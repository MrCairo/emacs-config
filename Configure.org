#+title: Mitch's Emacs Configuration File
#+author: Mitch Fisher
#+date: 2023-07-30
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes


* Welcome!

This ORG file will configure the *init.el* file based upon all of the *emacs-lisp* source blocks. The emacs-lisp source blocks are defined in an organized order. While these blocks cn generally be moved around, there are some order dependencies. So it's generally best that this order be preserved to prevent any runtime issues. This =org= file is largely taken from the System Crafter's sessions on configuring Emacs.


* Emacs Version Check
While most systems use a more modern version of Emacs, a check is made here so that only viable versions will continue.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
  ;;; ---------------------------------------------------------------------------
  ;;;
  ;;; NOTE: init.el is now generated from Configure.org.  Please edit that file
  ;;;       in Emacs and init.el will be generated automatically!
  ;;;
  (message "Checking for supported Emacs version(s)...")

  (let ((minver "26.1"))
     (when (version< emacs-version minver)
        (error "Your Emacs is too old -- this config requires v%s or higher" minver)))
  (when (version< emacs-version "27.1")
     (message "Your Emacs is old, and some functionality in this config will be disabled. Please upgrade if possible."))

  (message "Version check complete.")


#+end_src


* Early Setup
** Setup =load-path=

In the early phase of the startup, we include the =lisp= and =site-packages= directories. *Note* that the =use-package= package must be  included in the =site-packages= directory since we need it upon startup.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------
  ;;; Add site-lisp as well as all package directories in site-lisp to the
  ;;; load-path variable.
  (defun mrf/integrate-local-site-lisp ()
     (let ((default-directory (expand-file-name "site-lisp" user-emacs-directory)))
        (setq load-path
           (append
              (let ((load-path  (copy-sequence load-path))) ;; Shadow
                 (normal-top-level-add-subdirs-to-load-path))
              load-path))))

  (eval-when-compile
     (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
     (mrf/integrate-local-site-lisp)
     (require 'use-package)
     (require 'general)
     (setq use-package-always-ensure t))

#+end_src


** Emacs Config Directory
By default, the =user-emacs-directory= points to the .emacs.d* directory from which the =init.el= is used when Emacs starts. What this means is that any package that writes to this directory will be writing files to this initialization directory. Since we want to keep this directory clean, we set this directory to something external. A new variable, =emacs-config-directory= is set to now point to the starting Emacs condfiguration directory.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------
  (defvar emacs-config-directory user-emacs-directory)

  ;;; You'll need to override these from my values. Note that these directories
  ;;; are NOT automatically created if they don't exist.
  ;;;
  ;;; Optionally Set user-emacs-directory to something external to this directory
  ;;; so that transient files do not "polute" the .emacs.d directory.
  (setq user-emacs-directory "~/Documents/Emacs-Related/emacs-working-files")

  ;;; Setup a documenation directory. This is where things like YASnippet
  ;;; snippets are saved and also additional color themese are stored.
  (defvar mrf/docs-dir "~/Documents/Emacs-Related")


#+end_src


** Frame Setup
It's nice to know that Emacs is somewhat working. To help this along, we set the Frame (window size fonts) early in the loading process.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------
  ;; You will most likely need to adjust this font size for your system!
  (defvar mrf/default-font-size 175)
  (defvar mrf/default-variable-font-size 175)
  (defvar mrf/set-frame-maximized t)  ;; or f

  ;; Make frame transparency overridable
  (defvar mrf/frame-transparency '(90 . 90))

  ;; Set frame transparency
  (defun mrf/set-frame-alpha-maximized ()
     "Function to set the alpha and also maximize the frame."
     (set-frame-parameter (selected-frame) 'alpha mrf/frame-transparency)
     (set-frame-parameter (selected-frame) 'fullscreen 'maximized))

  ;; default window width and height
  (defun mrf/custom-set-frame-size ()
     "Simple function to set the default frame width/height."
     (add-to-list 'default-frame-alist '(height . 60))
     (add-to-list 'default-frame-alist '(width . 140)))

  (mrf/set-frame-alpha-maximized)
  ;; (mrf/custom-set-frame-size)

  ;; ====================================
  ;; Set the font faces
  ;; ====================================  
  (set-face-attribute 'default nil
     :font "Menlo"
     :height mrf/default-font-size)
     ;; :weight 'regular)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
     :font "Menlo"
     :height mrf/default-font-size)
     ;; :weight 'book)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
     :font "SF Pro"
     :height mrf/default-variable-font-size
     :weight 'regular)

#+end_src

#+RESULTS:


* Common Settings
The following values are things that are just general quality-of-life settings.

#+begin_src emacs-lisp
  ;;; ---------------------------------------------------------------------------

  (require 'paren)
  (show-paren-mode 1)

  (defconst *is-a-mac* (eq system-type 'darwin))

  (setq inhibit-startup-message t)  ;; Hide the startup message
  (setq visible-bell t)             ;; Set up the visible bell

  (save-place-mode 1)          ;; Remember where we were last editing a file.

  (setq backup-inhibited t)    ;; disable backup
  (setq auto-save-default nil) ;; disable auto save

  (column-number-mode)
  (global-display-line-numbers-mode t) ;; Line numbers appear everywhere

  ;; number of characters until the fill column
  (setq-default fill-column 78)

  ;; emacs lisp tab size
  (setq lisp-indent-offset '3)

  ;; each line of text gets one line on the screen (i.e., text will run
  ;; off the left instead of wrapping around onto a new line)
  (setq-default truncate-lines 1)

  (global-prettify-symbols-mode 1) ;; Display pretty symbols (i.e. Î» = lambda)
  
  ;; truncate lines even in partial-width windows
  (setq truncate-partial-width-windows 1)

  (use-package evil-nerd-commenter
     :bind ("M-/" . evilnc-comment-or-uncomment-lines))

  ;;; (use-package treemacs-all-the-icons)

  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode))

  (general-def  prog-mode-map
     "C-c ]"  'indent-region
     "C-c }"  'indent-region)

#+end_src



* Startup Performance

#+begin_src emacs-lisp

  ;;; ===========================================================================
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 128 1024 1024))

  (defun mrf/display-startup-time ()
     "Calculate and display startup time."
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
  (add-hook 'emacs-startup-hook #'mrf/display-startup-time)


#+end_src


* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (require 'package)  
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

#+end_src

*** Must Install Packages
#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------
  ;;;
  ;;; The following packages aren't properly loaded with the 'require' or
  ;;; 'use-package' functions (for some reason) so we resort to 'package-install'
  ;;; instead.
  ;;
  (defvar mrf/must-install-packages
     '(
         general
         cl-lib
         auto-complete
         better-defaults
         bind-key
      ))

  (mapc #'(lambda (item)
            (unless (package-installed-p item)
              (package-install item)))
        mrf/must-install-packages)

#+end_src


* Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src


* YASnippet
These are useful snippets of code that are commonly used in various languages. You can even create your own.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package yasnippet
     :defer t
     :config
     (use-package yasnippet-snippets
        :ensure t)
     (yas-global-mode t)
     (define-key yas-minor-mode-map (kbd "<tab>") nil)
     (define-key yas-minor-mode-map (kbd "C-'") #'yas-expand)
     (add-to-list #'yas-snippet-dirs (concat mrf/docs-dir "/Snippets"))
     (yas-reload-all)
     (setq yas-prompt-functions '(yas-ido-prompt))
     (defun help/yas-after-exit-snippet-hook-fn ()
        (prettify-symbols-mode)
        (prettify-symbols-mode))
     (add-hook 'yas-after-exit-snippet-hook #'help/yas-after-exit-snippet-hook-fn)
     :diminish yas-minor-mode)

  (add-to-list 'load-path (concat mrf/docs-dir "/Snippets"))

#+end_src



* Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package which-key
     :defer 0
     :diminish which-key-mode
     :custom (which-key-idle-delay 1.5)
     :config
     (which-key-mode)
     (which-key-setup-side-window-right))


#+end_src


* Language Server Protocol

#+begin_src emacs-lisp 

  ;;; ------------------------------------------------------------------------
  (defun mrf/lsp-mode-setup ()
    "Set up LSP header-line."
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . mrf/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :config (setq lsp-ui-sideline-show-hover t
                  lsp-ui-sideline-delay 0.5
                  lsp-ui-doc-delay 5
                  lsp-ui-sideline-ignore-duplicates t
                  lsp-ui-doc-position 'bottom
                  lsp-ui-doc-alignment 'frame
                  lsp-ui-doc-header nil
                  lsp-ui-doc-include-signature t
                  lsp-ui-doc-use-childframe t)
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-position 'bottom)
    :hook (lsp-mode . lsp-ui-mode))

  (use-package lsp-treemacs
    :after lsp)

  (use-package lsp-ivy
    :after lsp ivy)

  ;; Make sure that we set the read buffer above the default 4k
  (setq read-process-output-max (* 1024 1024))

#+end_src


** EGlot

#+begin_src emacs-lisp

  ;;; ===========================================================================
  ;;; Emacs Polyglot is the Emacs LSP client that stays out of your way:

  (use-package eglot)

#+end_src


* Debug Adapter Protocol

Provides a common protocol for debugging different systems. This is configured for Python

#+begin_src emacs-lisp 

    ;;; ------------------------------------------------------------------------
    (use-package dap-mode
      ;; Uncomment the config below if you want all UI panes to be hidden by default!
      ;; :custom
      ;; (lsp-enable-dap-auto-configure nil)
      :config
       (dap-ui-mode 1)
       (require 'dap-python)
  ;;     (require 'dap-node)
      :commands dap-debug
      :custom (dap-auto-configure-features '(sessions locals controls tooltip))
      )

    (setq dap-python-debugger 'debugpy)

    (use-package dap-hydra
       :hook (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra))))
  
#+end_src


** DAP for Python

#+begin_src emacs-lisp 

  ;;; ------------------------------------------------------------------------
  (use-package dap-python
    :after (dap)
    :ensure nil
    :config
    (dap-register-debug-template "Python :: Run file from project directory"
                                 (list :type "python"
                                       :args ""
                                       :cwd nil
                                       :module nil
                                       :program nil
                                       :request "launch"))

    (dap-register-debug-template "Python :: Run file (buffer)"
                                 (list :type "python"
                                       :args ""
                                       :cwd nil
                                       :module nil 
                                       :program nil
                                       :request "launch"
                                       :name "Python :: Run file (buffer)"))

    (dap-register-debug-template "Python :: Run pytest (buffer)"
                                 (list :type "python"
                                       :args ""
                                       :cwd nil
                                       :program nil
                                       :module "pytest"
                                       :request "launch"
                                       :name "Python :: Run pytest (buffer)")))

#+end_src


* IVY Mode
Ivy is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich
]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (require 'swiper)

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
  ;;       ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :custom     (ivy-use-virtual-buffers t)
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;; (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (use-package ivy-yasnippet)


#+end_src


* Languages
** Typescript
This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (use-package typescript-mode
     :disabled  ;; Don't use this package .... yet
     :after (dap-mode)
     :mode "\\.ts\\'"
     :hook (typescript-mode . lsp-deferred)
     :config
     (setq typescript-indent-level 2)
     (dap-node-setup))


#+end_src


** C/C++
#+begin_src emacs-lisp 

  ;;; ---------------------------------------------------------------------------

  (defun code-compile ()
  "Look for a Makefile and compiles the code with gcc/cpp."
  (interactive)
  (unless (file-exists-p "Makefile")
    (set (make-local-variable 'compile-command)
         (let ((file (file-name-nondirectory buffer-file-name)))
           (format "%s -o %s %s"
                   (if  (equal (file-name-extension file) "cpp") "g++" "gcc" )
                   (file-name-sans-extension file)
                   file)))
    (compile compile-command)))

  (global-set-key [f9] 'code-compile)

#+end_src


** Flycheck

This is more support for a language rather than a langage itself

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode))

  (require 'flycheck-package)

  (eval-after-load 'flycheck-package
    '(flycheck-package-setup))

  (defun mrf/check_fly ()
    "Force the check of the current python file being saved."
    (when (eq major-mode 'python-mode) ;; Python Only
      (flycheck-mode 0)
      (flycheck-mode t)))

  (add-hook 'before-save-hook #'mrf/check_fly)

#+end_src


** Python
#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (message "Initializing Python mode...")
  (message "Make sure the following Python packages are installed for the best experience:")
  (message "    python-lsp-server[all]")
  (message "    debnugpy")
  (message "    singleton-decorator") ;; Needed for several projects

  (defun mrf/load-python-file-hook ()
     (message "Running python Hook")
     (python-mode)
     (dap-mode)
     (display-fill-column-indicator-mode 1))

  (use-package python-mode
     :ensure nil
     :after (lsp-mode dap-mode)
     :hook (python-mode . lsp-mode)
     :config
     (eglot-ensure)
     (dap-tooltip 1)
     (toolit-mode 1)
     (dap-ui-controls-mode 1))

  (add-to-list 'auto-mode-alist '("\\.py\\'" . mrf/load-python-file-hook))
  (use-package blacken) ;Format Python file upon save.


#+end_src

#+RESULTS:

*** ELPY and RealGUD
Elpy is an Emacs package to bring powerful Python editing to Emacs.  It combines and configures a number of other packages, both written in Emacs Lisp as well as Python.  Elpy is fully documented at [[https://elpy.readthedocs.io/en/latest/index.html][read the docs]].

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package elpy
   :ensure t
   :config
   (elpy-enable)
   (highlight-indentation-mode 0))

  ;; Enable Flycheck
  (when (require 'flycheck nil t)
     (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
     (add-hook 'elpy-mode-hook 'flycheck-mode))

#+end_src

*** RealGUD
An extensible, modular GNU Emacs front-end for interacting with external debuggers, brought to you by Rocky Bernstein (@rocky) and ClÃ©ment Pit-Claudel (@cpitclaudel).
For now, we disable it since this script is using =Elpy= and =DAP=. We include this here as another option that can be used.

#+begin_src emacs-lisp 

  (use-package realgud
   :ensure t) ;; Keep this around but right now we use DAP

#+end_src

*** Auto-pep 8
autopep8 automatically formats Python code to conform to the `PEP 8` style guide.  It uses the pycodestyle_ utility to determine what parts of the code needs to be formatted.  autopep8 is capable of fixing most of the formatting issues_ that can be reported by pycodestyle.

#+begin_src emacs-lisp

  (use-package py-autopep8
   :ensure t
   :config
   (add-hook 'python-mode-hook 'py-autopep8-mode))

#+end_src

*** Python Keybinding
#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------
  (if (package-installed-p 'dap-mode)
    (general-def python-mode-map
       "C-c . /"       'dap-step-in
       "C-c . <right>" 'dap-step-in
       "C-c . ,"       'dap-step-out
       "C-c . <left>"    'dap-step-out
       "C-c . ."       'dap-next
       "C-c . <down>"  'dap-next
       "C-c . ?" 'dap-breakpoint-condition
       "C-c . C-b" 'dap-ui-breakpoints
       "C-c . C-b" 'dap-ui-breakpoints
       "C-c . C-c" 'dap-ui-controls-mode
       "C-c . C-e" 'dap-ui-expressions
       "C-c . C-l" 'dap-ui-locals
       "C-c . C-r" 'dap-ui-repl-mode
       "C-c . b" 'dap-breakpoint-toggle
       "C-c . c" 'dap-continue
       "C-c . d" 'dap-debug
       "C-c . C-d" 'dap-debug-last
       "C-c . i" 'dap-step-in
       "C-c . n" 'dap-next
       "C-c . o" 'dap-step-out
       "C-c . r" 'dap-debug-restart
       "C-c . t" 'dap-breakpoint-toggle
       "C-c . x" 'dap-disconnect
       "C-c . C-x" 'dap-delete-session
       "C-c }" 'indent-region))

#+end_src

*** Python Keybinding for Realgud
Since Realgud is options (in our configuratrion), we add it's keybindings conditionally. *Note* that these keybindings are still compatible with =dap-mode= keybindings.
#+begin_src emacs-lisp

  ;;; =========================================================================
  (if (package-installed-p 'realgud)
     (general-def python-mode-map
        "M-p" 'python-nav-backward-defun
        "M-n" 'python-nav-forward-defun
        "C-c p" 'elpy-goto-definition
        "C-c h" 'elpy-doc
        "C-c , j" 'realgud:cmd-jump
        "C-c , k" 'realgud:cmd-kill
        "C-c , s" 'realgud:cmd-step
        "C-c , n" 'realgud:cmd-next
        "C-c , q" 'realgud:cmd-quit
        "C-c , F" 'realgud:window-bt
        "C-c , U" 'realgud:cmd-until
        "C-c , X" 'realgud:cmd-clear
        "C-c , !" 'realgud:cmd-shell
        "C-c , b" 'realgud:cmd-break
        "C-c , f" 'realgud:cmd-finish
        "C-c , D" 'realgud:cmd-delete
        "C-c , +" 'realgud:cmd-enable
        "C-c , R" 'realgud:cmd-restart
        "C-c , -" 'realgud:cmd-disable
        "C-c , B" 'realgud:window-brkpt
        "C-c , c" 'realgud:cmd-continue
        "C-c , e" 'realgud:cmd-eval-dwim
        "C-c , Q" 'realgud:cmd-terminate
        "C-c , T" 'realgud:cmd-backtrace
        "C-c , h" 'realgud:cmd-until-here
        "C-c , u" 'realgud:cmd-older-frame
        "C-c , 4" 'realgud:cmd-goto-loc-hist-4
        "C-c , 5" 'realgud:cmd-goto-loc-hist-5
        "C-c , 6" 'realgud:cmd-goto-loc-hist-6
        "C-c , 7" 'realgud:cmd-goto-loc-hist-7
        "C-c , 8" 'realgud:cmd-goto-loc-hist-8
        "C-c , 9" 'realgud:cmd-goto-loc-hist-9
        "C-c , d" 'realgud:cmd-newer-frame
        "C-c , RET" 'realgud:cmd-repeat-last
        "C-c , E" 'realgud:cmd-eval-at-point
        "C-c , I" 'realgud:cmdbuf-info-describe
        "C-c , C-d" 'realgud:pdb
        "C-c , C-f" 'realgud:flake8-goto-msg-line
        "C-c , C-i" 'realgud:cmd-info-breakpoints))

#+end_src

*** Python Virtual Environment Support
We use Pyvenv-auto is a package that automatically changes to the Python virtual environment based upon the project's directory.  pyvenv-auto looks at the root director of the project for a =.venv= or =venv= (and a few others)

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package pyvenv-auto
     :config (message "Starting pyvenv-auto")
     :hook ((python-mode . pyvenv-auto-run)))

#+end_src


* Company Mode
[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package company
     :after lsp-mode
     :hook (lsp-mode . company-mode)
     :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
     (:map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common))
     :custom
     (company-minimum-prefix-length 1)
     (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package company-jedi
     :config
     (defun my/company-jedi-python-mode-hook ()
        (add-to-list 'company-backends 'company-jedi))
     (add-hook 'python-mode-hook 'my/company-jedi-python-mode-hook))

  (add-hook 'prog-mode-hook 'company-mode)
  
#+end_src


* Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp 

  ;;; ------------------------------------------------------------------------

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Developer")
      (setq projectile-project-search-path '("~/Developer")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src


* Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp 

  ;;; ------------------------------------------------------------------------

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src


* Color Theming
#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (add-to-list 'custom-theme-load-path (concat mrf/docs-dir "/Additional-Themes"))

  (defvar mrf/list-theme-packages
     '(
         color-theme-sanityinc-tomorrow
         doom-themes
         exotica-theme
         immaterial-theme
         material-theme
         timu-caribbean-theme
         timu-macos-theme
      ))

  (mapc #'(lambda (theme)
            (unless (package-installed-p theme)
              (package-install theme)))
        mrf/list-theme-packages)

  ;;; ------------------------------------------------------------------------
  ;;; List of favorite themes. Uncomment the one that feels good for the day.
  ;; (load-theme 'material t)
  (load-theme 'doom-palenight t)
  ;; (load-theme 'doom-monokai-pro t)
  ;; (load-theme 'afternoon t)
  ;; (load-theme 'tomorrow-night-blue t)
  ;; (load-theme 'tomorrow-night-bright t)
  ;; (load-theme 'borland-blue t)
  ;; (load-theme 'deeper-blue t)

#+end_src


* Org Mode

Org Mode is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package [[https://orgmode.org/][Orgmode]].

The =mrf/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

** Font setup
#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (defun mrf/org-font-setup ()
    "Setup org mode fonts."
    (font-lock-add-keywords
       'org-mode
       '(("^ *\\([-]\\) "
            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â¢"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Setup

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (defun mrf/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . mrf/org-mode-setup)
    :config
    (setq org-ellipsis " â¾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

     (define-key global-map (kbd "C-c j")
        (lambda () (interactive) (org-capture nil "jj")))

     (mrf/org-font-setup))

#+end_src

** Better Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("â" "â" "â" "â" "â" "â" "â")))


#+end_src

** Visual Fill
We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (defun mrf/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . mrf/org-mode-visual-fill))


#+end_src

** Export Code
To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][Babel]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates
Org Mode's structure templates feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.  You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language as it is known by Org Babel.

This snippet adds a hook to =org-mode= buffers so that =mrf/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Org-mode Roam
#+begin_src emacs-lisp

  ;;; ---------------------------------------------------------------------------
  
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (concat mrf/docs-dir "/RoamNotes"))
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun mrf/org-babel-tangle-config ()
     "Save emacs-lisp blocks."
     (when (string-equal (file-name-directory (buffer-file-name))
              (expand-file-name emacs-config-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
           (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mrf/org-babel-tangle-config)))


#+end_src



* Quality of Life

The following packages are some additional quality of life features.

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package for selecting a window to switch to. Like =other-window= but better!

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (use-package ace-window
     :config
     (general-define-key
        "M-o" 'ace-window))
  
#+end_src

** Dashboard

Dashboard is an extensible Emacs startup screen showing you whatâs most important.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package all-the-icons
     :if (display-graphic-p))

  (use-package dashboard
     :after (dired)
     :ensure t
     :preface
     (defun mrf/dashboard-banner ()
        (setq dashboard-footer-messages '("Greetings Program!"))
        (setq dashboard-banner-logo-title "Welcome to Emacs!")
        (setq dashboard-startup-banner "~/Pictures/Book-icon.png"))
     :hook ((after-init     . dashboard-refresh-buffer)
            (dashboard-mode . mrf/dashboard-banner))
     :custom
     (dashboard-items '((recents . 9)
                       (bookmarks . 5)))
     :config
     (dashboard-setup-startup-hook)
     (dashboard-open)
     (setq dashboard-center-content t))

#+end_src


** Autocomplete

Auto-Complete is an intelligent auto-completion extension for Emacs. It extends the standard Emacs completion interface and provides an environment that allows users to concentrate more on their own work.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (defvar ac-directory (unless (file-exists-p "auto-complete")
                       (make-directory "auto-complete")))
  (add-to-list 'load-path ac-directory)

  (require 'auto-complete)
  (ac-config-default)

  (global-auto-complete-mode 1)
  (setq-default ac-sources '(ac-source-pycomplete
                             ac-source-yasnippet
                             ac-source-abbrev
                             ac-source-dictionary
                             ac-source-words-in-same-mode-buffers))

  ; hack to fix ac-sources after pycomplete.el breaks it
  (add-hook 'python-mode-hook
            #'(lambda ()
               (setq ac-sources '(ac-source-pycomplete
                                  ac-source-yasnippet
                                  ac-source-abbrev
                                  ac-source-dictionary
                                  ac-source-words-in-same-mode-buffers))))

  ;; from http://truongtx.me/2013/01/06/config-yasnippet-and-autocomplete-on-emacs/
  ; set the trigger key so that it can work together with yasnippet on
  ; tab key, if the word exists in yasnippet, pressing tab will cause
  ; yasnippet to activate, otherwise, auto-complete will
  (ac-set-trigger-key "TAB")
  (ac-set-trigger-key "<tab>")


  ;; from http://blog.deadpansincerity.com/2011/05/setting-up-emacs-as-a-javascript-editing-environment-for-fun-and-profit/
  ; Start auto-completion after 2 characters of a word
  (setq ac-auto-start 2)
  ; case sensitivity is important when finding matches
  (setq ac-ignore-case nil)

#+end_src


** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src


** Terminals

*** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

*** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

*** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

   ;;; ------------------------------------------------------------------------
  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src



** Neotree
A tree plugin like NerdTree for Vim

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package neotree
     :ensure t
     :config
     (global-set-key [f8] 'neotree-toggle))

#+end_src




** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src


* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;; Prefer g-prefixed coreutils version of standard utilities when available
  (let ((gls (executable-find "gls")))
    (when gls (setq insert-directory-program gls)))

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom
     ((dired-listing-switches "-agho --group-directories-first"))
     (dired-dwim-target t))
    ;; :config
    ;; (evil-collection-define-key 'normal 'dired-mode-map
    ;;   "h" 'dired-single-up-directory
    ;;   "l" 'dired-single-buffer))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))
    ;; :config
    ;; (evil-collection-define-key 'normal 'dired-mode-map
    ;;   "H" 'dired-hide-dotfiles-mode))

#+end_src


*** Single Window
Dired, by default, opens up multiple windows - one for each directory. It would be nice to be able to limit =dired= to use just a single window. [[https://codeberg.org/amano.kenji/dired-single][dired-single]] does just that. We configure =dired-single= to open up a directory while in dired with the =C-<return>=  key combination. This will then open up the directory in the buffer named =*dired*=. Whenever a directory is opened with the =C-<return>= key sequence, that directory will then replace what's currently in the =*dired*= buffer.

#+begin_src emacs-lisp

    ;;; ------------------------------------------------------------------------


    (defun mrf/dired-single-keymap-init ()
      "Bunch of stuff to run for dired, either immediately or when it's
       loaded."
      (define-key dired-mode-map
         [remap dired-find-file] 'dired-single-buffer)
      (define-key dired-mode-map
         [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse)
      (define-key dired-mode-map
         [remap dired-up-directory] 'dired-single-up-directory))

    (use-package dired-single
       :config
       (mrf/dired-single-keymap-init))
  ;;    (general-def dired-mode-map
  ;;       "C-<return>" 'dired-single-magic-buffer
  ;;       [remap dired-find-file] 'dired-single-buffer
  ;;       [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse
  ;;       [remap dired-up-directory] 'dired-single-up-directory))

#+end_src



* Lastly

Some final configuratiion to be done at the end of this configuration.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  ;; Line #'s appear everywhere
  ;; ... except for when in these modes
  (dolist (mode '(dashboard-mode-hook
                    eshell-mode-hook
                    eww-mode-hook
                    org-mode-hook
                    shell-mode-hook
                    term-mode-hook
                    term-mode-hook
                    treemacs-mode-hook
                    vterm-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))


    ;;; ===========================================================================
  (setq warning-suppress-types '((package reinitialization)
                                   (package-initialize)
                                   (package)
                                   (use-package)
                                   (python-mode)))

    ;;; ===========================================================================
  (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(warning-suppress-log-types
         '(((package reinitialization))
             (use-package)
             (python-mode)
             (package-initialize))))

    ;;; init.el ends here.
  (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     )

  ;;  (dashboard-open)

#+end_src

