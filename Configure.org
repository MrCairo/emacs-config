#+title: Mitch's Emacs Configuration File
#+author: Mitch Fisher
#+date: 2023-08-10
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+auto_tangle: t

* Welcome!

This ORG file will configure the *init.el* file based upon all of the *emacs-lisp* source blocks. The emacs-lisp source blocks are defined in an organized order. While these blocks cn generally be moved around, there are some order dependencies. So it's generally best that this order be preserved to prevent any runtime issues. This =org= file is largely taken from the System Crafter's sessions on configuring Emacs.

*NOTE:* Most of the code below has been taken from the [[https://systemcrafters.net][System Crafters]] site run by David Wilson. Please visit that site for lots of great stuff!


* Early Setup

** Straight
#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
         (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-use-package-by-default t)

#+end_src

** Startup Performance

#+begin_src emacs-lisp

  ;;; =========================================================================
  ;;; startup
  ;;; The default is 800 kilobytes.  Measured in bytes.
  ;;; Process performance tuning

  (add-hook 'after-init-hook
     (lambda ()
  	;; warn when opening files bigger than 100MB
  	(setq large-file-warning-threshold 100000000)
  	;; reduce the frequency of garbage collection by making it happen on
  	;; each 50MB of allocated data (the default is on every 0.76MB)
  	(setq gc-cons-threshold 50000000)))

  (setq read-process-output-max (* 4 1024 1024))
  (setq process-adaptive-read-buffering nil)

  (defun mrf/display-startup-time ()
     "Calculate and display startup time."
     (message "Emacs loaded in %s with %d garbage collections."
  	(format "%.2f seconds"
  	   (float-time
  	      (time-subtract after-init-time before-init-time)))
  	gcs-done))

  (add-hook 'emacs-startup-hook #'mrf/display-startup-time)


#+end_src

** Use Shell Path
Because in macOS, Emacs could be started outside of a shell (like an application on the Dock), this code is used to migrate the current user's shell path to Emacs =exec-path=.

#+begin_src emacs-lisp

  ;;; -------------------------------------------------------------------------
  ;;; Use shell paths

  (defun set-exec-path-from-shell-PATH ()
     ;;; Set up Emacs' `exec-path' and PATH environment variable to match"
     ;;; that used by the user's shell.
     ;;; This is particularly useful under Mac OS X and macOS, where GUI
     ;;; apps are not started from a shell."
     (interactive)
     (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" ""
                               (shell-command-to-string "$SHELL --login -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))

#+end_src

** Setup =load-path=

In the early phase of the startup, we include the =lisp= and =site-packages= directories. *Note* that the =use-package= package must be  included in the =site-packages= directory since we need it upon startup.

#+begin_src emacs-lisp :tangle no

  ;;; -------------------------------------------------------------------------
  ;;; Add site-lisp as well as all package directories in site-lisp to the
  ;;; load-path variable.

  (defun mrf/integrate-local-site-lisp ()
     (let ((default-directory (expand-file-name "site-lisp" user-emacs-directory)))
        (setq load-path
           (append
              (let ((load-path  (copy-sequence load-path))) ;; Shadow
                 (normal-top-level-add-subdirs-to-load-path))
              load-path))))

  (defun mrf/use-pyenv-version-for-startup ()
     (set-exec-path-from-shell-PATH))

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (mrf/integrate-local-site-lisp)
  
  ;; (eval-when-compile
  ;;    (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  ;;    (mrf/integrate-local-site-lisp))
  ;;    ;; (mrf/use-pyenv-version-for-startup)
     
#+end_src

#+begin_src emacs-lisp

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  
#+end_src

** Emacs Config Directory
By default, the =user-emacs-directory= points to the .emacs.d* directory from which the =init.el= is used when Emacs starts. What this means is that any package that writes to this directory will be writing files to this initialization directory. Since we want to keep this directory clean, we set this directory to something external. A new variable, =emacs-config-directory= is set to now point to the starting Emacs condfiguration directory.

#+begin_src emacs-lisp

  ;;; -------------------------------------------------------------------------
  ;;; Set Emacs Config Directory

  (defvar emacs-config-directory user-emacs-directory)

  ;;; You'll need to override these from my values. Note that these directories
  ;;; are NOT automatically created if they don't exist.
  ;;;
  ;;; Optionally Set user-emacs-directory to something external to this directory
  ;;; so that transient files do not "polute" the .emacs.d directory.
  ;;; (setq user-emacs-directory "~/Documents/Emacs-Related/emacs-working-files")

  ;;; Setup a documenation directory. This is where things like YASnippet
  ;;; snippets are saved and also additional color themese are stored.
  (defvar mrf/docs-dir "~/Documents/Emacs-Related")

#+end_src

** Frame Setup
It's nice to know that Emacs is somewhat working. To help this along, we set the Frame (window size fonts) early in the loading process.

*** Define the various font size constants

#+begin_src emacs-lisp

  ;;; -------------------------------------------------------------------------
  ;;; Frame (view) setup including fonts.
  ;;; You will most likely need to adjust this font size for your system!

  (defvar mrf/small-font-size 150)
  (defvar mrf/small-variable-font-size 170)

  (defvar mrf/medium-font-size 170)
  (defvar mrf/medium-variable-font-size 190)

  (defvar mrf/large-font-size 190)
  (defvar mrf/large-variable-font-size 210)

  (defvar mrf/x-large-font-size 220)
  (defvar mrf/x-large-variable-font-size 240)

  (defvar mrf/default-font-size mrf/large-font-size)
  (defvar mrf/default-variable-font-size mrf/large-variable-font-size)
  ;; (defvar mrf/set-frame-maximized t)  ;; or f

  ;; Make frame transparency overridable
  ;; (defvar mrf/frame-transparency '(90 . 90))

#+end_src

*** Functions to set the frame size
#+begin_src emacs-lisp

  ;; Set frame transparency
  (defun mrf/set-frame-alpha-maximized ()
     "Function to set the alpha and also maximize the frame."
     ;; (set-frame-parameter (selected-frame) 'alpha mrf/frame-transparency)
     (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
     (add-to-list 'default-frame-alist '(fullscreen . maximized)))

  ;; default window width and height
  (defun mrf/custom-set-frame-size ()
     "Simple function to set the default frame width/height."
     ;; (set-frame-parameter (selected-frame) 'alpha mrf/frame-transparency)
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
     ;; (add-to-list 'default-frame-alist '(height . 60))
     ;; (add-to-list 'default-frame-alist '(width . 200))
     )

#+end_src

*** Default fonts and sizes

#+begin_src emacs-lisp

  (defun mrf/update-face-attribute ()
     ;; ====================================
     ;; Set the font faces
     ;; ====================================
     (set-face-attribute 'default nil
        ;; :font "Hack"
        ;; :font "Fira Code Retina"
        ;; :font "Menlo"
        :font "Andale Mono"
        :height mrf/default-font-size)

     ;; Set the fixed pitch face
     (set-face-attribute 'fixed-pitch nil
        ;; :font "Lantinghei TC Demibold"
        :font "Andale Mono"
        ;; :font "Fira Code Retina"
        :height mrf/default-font-size)

     ;; Set the variable pitch face
     (set-face-attribute 'variable-pitch nil
        :font "Optima"
        :height mrf/default-variable-font-size
        :weight 'regular))

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (mrf/set-frame-alpha-maximized)
  (mrf/update-face-attribute)
  ;; ==(mrf/custom-set-frame-size)

#+end_src

** Package System Setup (DISABLED)

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

*DISABLED DUE TO USE OF THE _STRAIGHT_ PACKAGE*

#+begin_src emacs-lisp :tangle no

  ;;; -------------------------------------------------------------------------
  ;;; Package setup
  
  (require 'package)
  (setq package-archives '(
                             ("melpa" . "https://melpa.org/packages/")
                             ("melpa-stable" . "https://stable.melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                          ))

  (package-initialize)

  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))

#+end_src

** Must Install Packages

*** Auto-complete
Auto-Complete is an intelligent auto-completion extension for Emacs. It extends the standard Emacs completion interface and provides an environment that allows users to concentrate more on their own work.

Features:

- Visual interface
- Reduce overhead of completion by using statistic method
- Extensibility
  
#+begin_src emacs-lisp

  (use-package auto-complete
    :straight (auto-complete :type git
			     :flavor melpa
			     :files ("*.el" "dict" "auto-complete-pkg.el")
			     :host github
			     :repo "auto-complete/auto-complete"))


#+end_src

*** Esup
Benchmark Emacs Startup time without ever leaving your Emacs.


#+begin_src emacs-lisp

  (use-package esup
     :straight (esup :type git :flavor melpa :host github :repo "jschaf/esup"))

#+end_src

*** Bind-key

#+begin_src emacs-lisp :tangle no

  (use-package bind-key
     :straight (bind-key :type git
  		  :flavor melpa
  		  :files ("bind-key.el" "bind-key-pkg.el")
  		  :host github
  		  :repo "jwiegley/use-package"))

#+end_src

*** spacious-padding
#+begin_src emacs-lisp

  (use-package spacious-padding
     :straight (spacious-padding :type git
    		:host github
    		:repo "emacs-straight/spacious-padding"
    		:files ("*" (:exclude ".git")))
     :hook (after-init . spacious-padding-mode)
     :custom
     (spacious-padding-widths
        '( :internal-border-width 15
  	  :header-line-width 4
  	  :mode-line-width 6
  	  :tab-width 4
  	  :right-divider-width 30
  	  :scroll-bar-width 8)))

  ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
  ;; is very flexible and provides several examples.
  (setq spacious-padding-subtle-mode-line
        `( :mode-line-active 'default
           :mode-line-inactive vertical-border))

#+end_src


* Color Theming

#+begin_src emacs-lisp

  ;;; -------------------------------------------------------------------------

  (add-to-list 'custom-theme-load-path (concat mrf/docs-dir "/Themes/"))

  (use-package ef-themes)
  (use-package doom-themes)
  (use-package material-theme
     :straight (material-theme
    		:type git :flavor melpa :host github
    		:repo "cpaulik/emacs-material-theme"))

  (use-package modus-themes
     :straight (modus-themes :type git
  		:flavor melpa
  		:host sourcehut :repo "protesilaos/modus-themes"))

  (use-package kaolin-themes
     :straight (kaolin-themes
  		:type git
  		:flavor melpa
  		:files (:defaults "themes/*.el" "kaolin-themes-pkg.el")
  		:host github
  		:repo "ogdenwebb/emacs-kaolin-themes"))
     ;; :config
     ;; (load-theme 'kaolin-dark t)
     ;; (kaolin-treemacs-theme))
  		
  (use-package color-theme-sanityinc-tomorrow
     :straight (color-theme-sanityinc-tomorrow
  		:type git
  		:flavor melpa
  		:host github
  		:repo "purcell/color-theme-sanityinc-tomorrow"))

  #+end_src

** Load a theme
Selec a theme (or themes) to load. The last one specified is the one that is used as the current theme.

*** Doom Themes
#+begin_src emacs-lisp
  ;; (load-theme 'doom-badger t)
  ;; (load-theme 'doom-challenger-deep t)
  ;; (load-theme 'doom-dark+ t)
  ;; (load-theme 'doom-feather-dark t)
  ;; (load-theme 'doom-gruvbox t)
  ;; (load-theme 'doom-material-dark t)
  ;; (load-theme 'doom-monokai-classic t)
  ;; (load-theme 'doom-monokai-machine t)
  ;; (load-theme 'doom-monokai-octagon t)
  ;; (load-theme 'doom-monokai-pro t)
  ;; (load-theme 'doom-monokai-spectrum t)
  ;; (load-theme 'doom-opera t)
  ;; (load-theme 'doom-oksolar-dark t)
  ;; (load-theme 'doom-palenight t)
  ;; (load-theme 'doom-rouge t)
  ;; (load-theme 'doom-tokyo-night t)
  ;; (load-theme 'doom-sourcerer t)
#+end_src

#+begin_src emacs-lisp
  ;;
  ;; List of favorite themes. Uncomment the one that feels good for the day.
  ;; -----------------------------------------------------------------------
  ;; (load-theme 'afternoon t)
  ;; (load-theme 'borland-blue t)
  ;; (load-theme 'deeper-blue t)
  ;; (load-theme 'material t)
  ;; (load-theme 'modus-vivendi t)
  ;; (load-theme 'modus-operandi t)
  ;; (load-theme 'modus-vivendi-tinted t)
  ;; (load-theme 'modus-operandi-tinted t)
  ;; (load-theme 'modus-vivendi-tritanopia t)
  ;; (load-theme 'modus-operandi-tritanopia t)
  ;; (load-theme 'modus-vivendi-deuteranopia t)
  ;; (load-theme 'modus-operandi-deuteranopia t)
  ;; (load-theme 'ef-duo-dark :no-confirm)
  ;; (load-theme 'ef-elea-dark :no-confirm)
  (load-theme 'ef-maris-dark :no-confirm)
  ;; (load-theme 'kaolin-dark t)
  ;; (load-theme 'sanityinc-tomorrow-eighties t)


#+end_src


* Common Settings
The following values are things that are just general quality-of-life settings.

#+begin_src emacs-lisp

  ;;; -------------------------------------------------------------------------
  ;;; Common Settings

  (show-paren-mode 1)

  (defconst *is-a-mac* (eq system-type 'darwin))
  (when (eq system-type 'darwin)
     (setq mac-option-key-is-meta t
           mac-command-key-is-meta nil
           mac-command-modifier 'none
           mac-option-modifier 'meta))

  (setq inhibit-startup-message t)  ;; Hide the startup message
  (setq visible-bell t)             ;; Set up the visible bell

  (save-place-mode 1)          ;; Remember where we were last editing a file.

  (setq backup-inhibited t)    ;; disable backup
  (setq auto-save-default nil) ;; disable auto save

  (column-number-mode)
  (global-display-line-numbers-mode 1) ;; Line numbers appear everywhere

  ;; number of characters until the fill column
  (setq-default fill-column 80)

  ;; emacs lisp tab size
  (setq lisp-indent-offset '3)

  ;; each line of text gets one line on the screen (i.e., text will run
  ;; off the left instead of wrapping around onto a new line)
  (setq-default truncate-lines 1)

  (global-prettify-symbols-mode 1) ;; Display pretty symbols (i.e. λ = lambda)

  ;; truncate lines even in partial-width windows
  (setq truncate-partial-width-windows 1)

  (use-package evil-nerd-commenter
     :bind ("M-/" . evilnc-comment-or-uncomment-lines))

  ;;; (use-package treemacs-all-the-icons)

  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode))

  (use-package general
     :straight t)

  (general-def prog-mode-map
     "C-c ]"  'indent-region
     "C-c }"  'indent-region)

  (general-define-key
     "C-x C-j" 'dired-jump)

  (setq dired-listing-switches "-agho --group-directories-first")
  (setq dired-dwim-target t)

  (if (boundp 'python-shell-completion-native-disabled-interpreters)
     (add-to-list 'python-shell-completion-native-disabled-interpreters "python3")
   (setq python-shell-completion-native-disabled-interpreters '("python3")))

  ;;; smooth scrolling.
  (setq pixel-scroll-mode t)

#+end_src


* Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  ;;; -------------------------------------------------------------------------
  ;;; Automatic Package Updates

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src


* YASnippet
These are useful snippets of code that are commonly used in various languages. You can even create your own.

#+begin_src emacs-lisp

  ;;; -------------------------------------------------------------------------
  ;;; YASnippets

  (use-package yasnippet
     :defer t
     :config
     (use-package yasnippet-snippets)
     (yas-global-mode t)
     (define-key yas-minor-mode-map (kbd "<tab>") nil)
     (define-key yas-minor-mode-map (kbd "C-'") #'yas-expand)
     (add-to-list #'yas-snippet-dirs (concat mrf/docs-dir "/Snippets"))
     (yas-reload-all)
     (setq yas-prompt-functions '(yas-ido-prompt))
     (defun help/yas-after-exit-snippet-hook-fn ()
        (prettify-symbols-mode)
        (prettify-symbols-mode))
     (add-hook 'yas-after-exit-snippet-hook #'help/yas-after-exit-snippet-hook-fn)
     :diminish yas-minor-mode)

#+end_src



* Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (use-package which-key
     :defer 0
     :diminish which-key-mode
     :custom (which-key-idle-delay 1.5)
     :config
     (which-key-mode)
     (which-key-setup-side-window-right))


#+end_src


* Treemacs
Treemacs is a file and project explorer similar to NeoTree or vim’s NerdTree, but largely inspired by the Project Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration, while also possessing basic file management utilities.

** Winum
Window numbers for Emacs: Navigate your windows and frames using numbers. This is not only handy but used by Treemacs.
#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;;; Window Number

  (use-package winum
     :straight (winum :type git :flavor melpa :host github :repo "deb0ch/emacs-winum"))
  (winum-mode)

#+end_src

** Treemacs Config

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;;; Treemacs

  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name
  							".cache/treemacs-persist"
                                                        user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules"
                                                         "/.venv"
                                                         "/.cask"
                                                         "/__pycache__")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           38
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
         (`(t . t)
  	  (treemacs-git-mode 'deferred))
         (`(t . _)
  	  (treemacs-git-mode 'simple)))
       (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

#+end_src

*** Treemacs Projectile
#+begin_src emacs-lisp

  (use-package treemacs-projectile
    :after (treemacs projectile))

#+end_src

*** Treemacs magit
#+begin_src emacs-lisp

  (use-package treemacs-magit
    :after (treemacs magit)
     )

#+end_src

*** Treemacs dired
#+begin_src emacs-lisp

  (use-package treemacs-icons-dired
     :hook (dired-mode . treemacs-icons-dired-enable-once)
     )

#+end_src

*** Treemacs Persp
#+begin_src emacs-lisp

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :config (treemacs-set-scope-type 'Perspectives))

#+end_src

*** Treemacs tab-bar
#+begin_src emacs-lisp

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :config (treemacs-set-scope-type 'Tabs))

#+end_src

*** Treemacs all-the-icons
#+begin_src emacs-lisp

  (use-package treemacs-all-the-icons
   :if (display-graphic-p))

 #+end_src
 

* Language Server Protocol

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;;; Language Server Protocol
  
  (defun mrf/lsp-mode-setup ()
    "Set up LSP header-line."
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
     :commands (lsp lsp-deferred)
     :hook (lsp-mode . mrf/lsp-mode-setup)
     :init
     (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
     :config
     (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :config (setq lsp-ui-sideline-enable t
                  lsp-ui-sideline-show-hover t
                  lsp-ui-sideline-delay 0.5
                  lsp-ui-sideline-ignore-duplicates t
                  lsp-ui-doc-delay 3
                  lsp-ui-doc-position 'top
                  lsp-ui-doc-alignment 'frame
                  lsp-ui-doc-header nil
                  lsp-ui-doc-show-with-cursor t
                  lsp-ui-doc-include-signature t
                  lsp-ui-doc-use-childframe t)
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-position 'bottom)
    :hook (lsp-mode . lsp-ui-mode))

  (general-def lsp-ui-mode-map
     "C-c l d" 'lsp-ui-doc-focus-frame)

  (use-package lsp-treemacs
     :after lsp
     :config
     (lsp-treemacs-sync-mode 1)
     (general-def prog-mode-map
        "C-c t" 'treemacs))

  (use-package lsp-ivy
    :after lsp ivy)

  ;; Make sure that we set the read buffer above the default 4k
  (setq read-process-output-max (* 1024 1024))

#+end_src

** EGlot

#+begin_src emacs-lisp

  ;;; ===========================================================================
  ;;; Emacs Polyglot is the Emacs LSP client that stays out of your way:

  (use-package eglot)

#+end_src


* Debug Adapter Protocol

Provides a common protocol for debugging different systems. This is configured for Python

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;;; Debug Adapter Protocol
  ;;   (straight-use-package
  ;;      '(dap-mode :type git
  ;; 	 :flavor melpa
  ;; 	 :files (:defaults "icons" "dap-mode-pkg.el")
  ;; 	 :host github
  ;; 	 :repo "emacs-lsp/dap-mode"))

  (use-package dap-mode
     :straight (dap-mode :type git
		  :flavor melpa
		  :files (:defaults "icons" "dap-mode-pkg.el")
		  :host github
		  :repo "emacs-lsp/dap-mode")
     ;; Uncomment the config below if you want all UI panes to be hidden by default!
     ;; :custom
     ;; (lsp-enable-dap-auto-configure nil)
     :config
     (message "DAP mode loaded.")
     (dap-ui-mode 1)
     ;; (setq lsp-enable-dap-auto-configure nil)
     (setq dap-python-executable "python3") ;; Otherwise it looks for 'python' else error.
     :commands
     dap-debug
     :custom
     (dap-auto-configure-features '(locals repl)))

  (setq dap-python-debugger 'debugpy)

  ;; (use-package dap-hydra
  ;;    :hook (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra))))

#+end_src

** DAP for Python

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;;; DAP for Python

  (use-package dap-python
     :straight (dap-python :type git :host github :repo "emacs-lsp/dap-mode")
     :after (dap-mode)
     :config
     (dap-register-debug-template "Python :: Run file from project directory"
	(list :type "python"
	   :args ""
	   :cwd nil
	   :module nil
	   :program nil
	   :request "launch"))
     (dap-register-debug-template "Python :: Run file (buffer)"
	(list :type "python"
	   :args ""
	   :cwd nil
	   :module nil
	   :program nil
	   :request "launch"
	   :name "Python :: Run file (buffer)")))

#+end_src

** DAP Template for NodeJS
#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;;; DAP for NodeJS

  (defun my-setup-dap-node ()
     "Require dap-node feature and run dap-node-setup if VSCode module isn't already installed"
     (require 'dap-node)
     (unless (file-exists-p dap-node-debug-path) (dap-node-setup)))

  (use-package dap-node
   :after (dap-mode)
   :straight (dap-node :type git
  		:flavor melpa
  		:files (:defaults "icons" "dap-mode-pkg.el")
  		:host github
  		:repo "emacs-lsp/dap-mode")
   :config
     (require 'dap-firefox)
     ;; (dap-register-debug-template
     ;;    "Launch index.ts"
     ;;    (list :type "node"
     ;; 	 :request "launch"
     ;; 	 :program "${workspaceFolder}/index.ts"
     ;; 	 :dap-compilation "npx tsc index.ts --outdir dist --sourceMap true"
     ;; 	 :outFiles (list "${workspaceFolder}/dist/**/*.js")
     ;; 	 :name "Launch index.ts"))
     )

  (add-hook 'typescript-mode-hook 'my-setup-dap-node)
  (add-hook 'javascript-mode-hook 'my-setup-dap-node)


#+end_src


* Hydra
This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra. Once you summon the Hydra through the prefixed binding (the body + any one head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head, arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his original purpose, calling his proper command. This makes the Hydra very seamless, it's like a minor mode that disables itself auto-magically.

#+begin_src emacs-lisp

  (use-package hydra
     :straight (hydra :type git
  		:flavor melpa
  		:files (:defaults (:exclude "lv.el") "hydra-pkg.el")
  		:host github
  		:repo "abo-abo/hydra"))
  
#+end_src


* IVY Mode
Ivy is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich
]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;;; Swiper and IVY mode

  (use-package swiper
     :straight (swiper :type git
  		  :flavor melpa
  		  :files ("swiper.el" "swiper-pkg.el")
  		  :host github
  		  :repo "abo-abo/swiper"))

  (use-package ivy
     :diminish
     :bind (("C-s" . swiper)
  	    :map ivy-minibuffer-map
  	    ("TAB" . ivy-alt-done)
  	    ("C-l" . ivy-alt-done)
  	    ("C-j" . ivy-next-line)
  	    ("C-k" . ivy-previous-line)
  	    :map ivy-switch-buffer-map
  	    ("C-k" . ivy-previous-line)
  	    ("C-l" . ivy-done)
  	    ("C-d" . ivy-switch-buffer-kill)
  	    :map ivy-reverse-i-search-map
  	    ("C-k" . ivy-previous-line)
  	    ("C-d" . ivy-reverse-i-search-kill))
     :custom (ivy-use-virtual-buffers t)
     :config
     (ivy-mode 1))

  (use-package ivy-rich
     :after ivy
    :straight (ivy-rich :type git :flavor melpa :host github :repo "Yevgnen/ivy-rich")
    :init
    (ivy-rich-mode 1))

  (use-package counsel
     ;; :straight (counsel :type git
     ;; 		:flavor melpa
     ;; 		:files ("counsel.el" "counsel-pkg.el")
     ;; 		:host github :repo "abo-abo/swiper")
     :bind (("C-M-j" . 'counsel-switch-buffer)
  	    :map minibuffer-local-map
  	    ("C-r" . 'counsel-minibuffer-history))
     :custom
     (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
     :config
     (counsel-mode 1))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (use-package ivy-yasnippet
     :straight (ivy-yasnippet :type git :flavor melpa :host github :repo "mkcms/ivy-yasnippet"))


#+end_src


* Tree-sitter
Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:

- General enough to parse any programming language
- Fast enough to parse on every keystroke in a text editor
- Robust enough to provide useful results even in the presence of syntax errors
- Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application
  
#+begin_src emacs-lisp

  (defun mrf/tree-sitter-setup ()
     (tree-sitter-hl-mode t)
     (ts-fold-mode t))

  (use-package tree-sitter-langs
     :straight (tree-sitter-langs :type git
  		:flavor melpa
  		:files (:defaults "queries" "tree-sitter-langs-pkg.el")
  		:branch "release"
  		:host github :repo "emacs-tree-sitter/tree-sitter-langs"))

  (use-package tree-sitter
     ;; :after (lsp-mode)
     :config
     ;; Activate tree-sitter globally (minor mode registered on every buffer)
     (global-tree-sitter-mode)
     :hook
     (tree-sitter-after-on . mrf/tree-sitter-setup)
     (typescript-mode . lsp-deferred)
     (javascript-mode . lsp-deferred))

  (use-package ts-fold
     :straight (ts-fold :type git
  		:host github
  		:repo "emacs-tree-sitter/ts-fold")
     :config
     (general-define-key
        "C-<tab>" 'ts-fold-toggle
        "C-c f"   'ts-fold-open-all))


#+end_src


* Languages
** Typescript
This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-ts-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

    ;;; -----------------------------------------------------------------

    (use-package typescript-ts-mode
       :after (dap-mode)
       :mode "\\.ts\\'"
       :hook (typescript-ts-mode . lsp-deferred)
       :config
       (setq typescript-indent-level 4)
       (dap-node-setup))

#+end_src

** NodeJS
#+begin_src emacs-lisp

  (defun mrf/load-js-file-hook ()
     (message "Running JS file hook")
     (js2-mode)
     (dap-mode)
     (dap-firefox-setup)
     (highlight-indentation-mode -1))

  (use-package js2-mode
     :straight (js2-mode :type git :flavor melpa :host github :repo "mooz/js2-mode")
     :custom
     (js-indent-level 2)
     (dap-firefox-debug-program
        '("node" "/Users/strider/.emacs.d.mitchorg/.extension/vscode/firefox-devtools.vscode-firefox-debug/extension/dist/adapter.bundle.js"))
     :init
     (require 'dap-firefox))

  (add-to-list 'auto-mode-alist '("\\.[m]js\\'" . mrf/load-js-file-hook))

#+end_src

** C/C++
#+begin_src emacs-lisp

  ;;; -----------------------------------------------------------------

  (defun code-compile ()
  "Look for a Makefile and compiles the code with gcc/cpp."
     (interactive)
     (unless (file-exists-p "Makefile")
        (set (make-local-variable 'compile-command)
  	 (let ((file (file-name-nondirectory buffer-file-name)))
              (format "%s -o %s %s"
                 (if  (equal (file-name-extension file) "cpp") "g++" "gcc" )
                 (file-name-sans-extension file)
                 file)))
        (compile compile-command)))

  (global-set-key [f9] 'code-compile)

#+end_src

** Other Languages
#+begin_src emacs-lisp

  (use-package graphql-mode)
  (use-package js2-mode)
  (use-package rust-mode)
  (use-package swift-mode)

#+end_src

#+RESULTS:

** Flycheck
This is more support for a language rather than a langage itself

#+begin_src emacs-lisp

  ;;; -----------------------------------------------------------------

  (use-package flycheck
    :config
    (global-flycheck-mode))

  (use-package flycheck-package
     :straight (flycheck-package :type git
		  :flavor melpa
		  :host github
		  :repo "purcell/flycheck-package"))

  (eval-after-load 'flycheck
    '(flycheck-package-setup))

  (defun mrf/before-save ()
    "Force the check of the current python file being saved."
    (when (eq major-mode 'python-mode) ;; Python Only
       (flycheck-mode 0)
       (flycheck-mode t)
       (message "deleting trailing whitespace enabled")
       (delete-trailing-whitespace)))

  (add-hook 'before-save-hook 'mrf/before-save)

#+end_src

** Python
*** IMPORTANT
Before any work can begin in python, make sure that the right packages are installed.

#+begin_src shell :results output silent
  pip3 install --upgrade pip
  pip3 install "python-lsp-server[all]"
  pip3 install debugpy
#+end_src

In addition to that, it is important that =autopep8=, which is a script, can reach python or python3. For my configuration, =autopep8= looks for python this like this:

: #!/Library/Frameworks/Python.framework/Versions/Current/bin/python3 :

*Note:* If this python path doesn't exist, you will see the very annoying

: file-missing "Doing vfork" "No such file or directory" :
message

*** Standard setup
This is the standard python mode setup.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (defun mrf/load-python-file-hook ()
     (message "Running python file hook")
     (python-mode)
     (dap-mode)
     (highlight-indentation-mode -1)
     (display-fill-column-indicator-mode 1))

  (use-package python-mode
     :straight (python-mode :type git
  		:flavor melpa
  		:files ("python-mode.el" ("completion" "completion/pycomplete.*") "python-mode-pkg.el")
  		:host gitlab
  		:repo "python-mode-devs/python-mode")
     :after (lsp-mode)
     :hook (python-mode . lsp-mode)
     :config
     ;; Typical python install name.
     ;; Also important to set dap-python-executable during dap-mode config
     ;; (python-shell-interpreter "python3")
     ;; (eglot-ensure)
     (dap-tooltip 1)
     (toolit-mode 1)
     (dap-ui-controls-mode 1)
     :custom
     (python-shell-completion-native-enable nil)
     :bind ("C-c |" . (display-fill-column-indicator-mode 1)))

  (add-to-list 'auto-mode-alist '("\\.py\\'" . mrf/load-python-file-hook))
  (use-package blacken) ;Format Python file upon save.

#+end_src

*** ELPY and RealGUD
Elpy is an Emacs package to bring powerful Python editing to Emacs.  It combines and configures a number of other packages, both written in Emacs Lisp as well as Python.  Elpy is fully documented at [[https://elpy.readthedocs.io/en/latest/index.html][read the docs]].

#+begin_src emacs-lisp

   ;;; ------------------------------------------------------------------------
   (use-package elpy
      :straight t
      :custom
      (elpy-rpc-python-command "python3")
      (display-fill-column-indicator-mode 1)
      (highlight-indentation-mode 0)
      :config
      (elpy-enable))

   ;; Enable Flycheck
  (use-package flycheck
     :straight (flycheck
		  :type git
		  :flavor melpa
		  :host github
		  :repo "flycheck/flycheck")
     :config
     (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
     :hook (elpy-mode . flycheck-mode))

#+end_src

*** RealGUD
An extensible, modular GNU Emacs front-end for interacting with external debuggers, brought to you by Rocky Bernstein (@rocky) and Clément Pit-Claudel (@cpitclaudel).
For now, we disable it since this script is using =Elpy= and =DAP=. We include this here as another option that can be used.

#+begin_src emacs-lisp

  (use-package realgud
     :disabled) ;; Keep this around but right now we use DAP

#+end_src

*** Auto-pep 8
autopep8 automatically formats Python code to conform to the `PEP 8` style guide.  It uses the pycodestyle_ utility to determine what parts of the code needs to be formatted.  autopep8 is capable of fixing most of the formatting issues_ that can be reported by pycodestyle. Refer to the [[IMPORTANT][IMPORTANT]] section above for possible issues when autopep8 is installed.

#+begin_src emacs-lisp

        (use-package py-autopep8
           :straight (py-autopep8 :type git
        		:flavor melpa
        		:branch "test-dummy-sentinel"
        		:host codeberg
        		:repo "ideasman42/emacs-py-autopep8")
           :hook ((python-mode) . py-autopep8-mode))

        (use-package blacken
           :straight (blacken :type git
      		  :flavor melpa
    		    :host github
  		      :repo "pythonic-emacs/blacken"))

#+end_src

*** Python Keybinding
#+begin_src emacs-lisp

  (defun mrf/end-debug-session ()
     "End the debug session and delete project Python buffers."
     (interactive)
     (kill-matching-buffers "\*Python :: Run file [from|\(buffer]*" nil :NO-ASK)
     (kill-matching-buffers "\*Python: Current File*" nil :NO-ASK)
     (kill-matching-buffers "\*dap-ui-*" nil :NO-ASK)
     (dap-disconnect (dap--cur-session)))

  (defun mrf/delete-all-debug-sessions ()
     "End the debug session and delete project Python buffers and all breakpoints."
     (interactive)
     (dap-breakpoint-delete-all)
     (mrf/end-debug-session))

  (defun mrf/begin-debug-session ()
     "Begin a debug session with several dap windows enabled."
     (interactive)
     (dap-ui-show-many-windows)
     (dap-debug))

  ;; This is a helpful macro that is used to put double quotes around a word.
  (defalias 'quote-word
     (kmacro "\" M-d \" <left> C-y"))

  (defalias 'quote-region
     (kmacro "C-w \" \" <left> C-y <right>"))
     

  ;; (define-key python-mode-map (kbd "C-c ,") 'dap-hydra/body)
  (general-define-key
     :keymaps '(python-mode-map dap-ui-mode-map)
     "C-c C-g"    'elpy-goto-definition-other-window
     "C-c g"      'elpy-goto-definition
     "C-c C-q"    'quote-region
     "C-c q"      'quote-word
     "C-c ."      'dap-hydra/body)


#+end_src

*** DAP-Hydra

#+begin_src emacs-lisp :results none
    (defhydra dap-hydra (:color pink :hint nil :foreign-keys run)
      "
    ^Stepping^          ^Switch^                 ^Breakpoints^          ^Debug^                     ^Eval
    ^^^^^^^^----------------------------------------------------------------------------------------------------------------
    _._: Next           _ss_: Session            _bb_: Toggle           _dd_: Debug                 _ee_: Eval
    _/_: Step in        _st_: Thread             _bd_: Delete           _dr_: Debug recent          _er_: Eval region
    _,_: Step out       _sf_: Stack frame        _ba_: Add              _dl_: Debug last            _es_: Eval thing at point
    _c_: Continue       _su_: Up stack frame     _bc_: Set condition    _de_: Edit debug template   _ea_: Add expression.
    _r_: Restart frame  _sd_: Down stack frame   _bh_: Set hit count    _ds_: Debug restart
    _Q_: Disconnect     _sl_: List locals        _bl_: Set log message  _dx_: end session
                      _sb_: List breakpoints                          _dX_: end all sessions
                      _sS_: List sessions
                      _sR_: Session Repl
  "
       ("n" dap-next)
       ("i" dap-step-in)
       ("o" dap-step-out)
       ("." dap-next)
       ("/" dap-step-in)
       ("," dap-step-out)
       ("c" dap-continue)
       ("r" dap-restart-frame)
       ("ss" dap-switch-session)
       ("st" dap-switch-thread)
       ("sf" dap-switch-stack-frame)
       ("su" dap-up-stack-frame)
       ("sd" dap-down-stack-frame)
       ("sl" dap-ui-locals)
       ("sb" dap-ui-breakpoints)
       ("sR" dap-ui-repl)
       ("sS" dap-ui-sessions)
       ("bb" dap-breakpoint-toggle)
       ("ba" dap-breakpoint-add)
       ("bd" dap-breakpoint-delete)
       ("bc" dap-breakpoint-condition)
       ("bh" dap-breakpoint-hit-condition)
       ("bl" dap-breakpoint-log-message)
       ("dd" dap-debug)
       ("dr" dap-debug-recent)
       ("ds" dap-debug-restart)
       ("dl" dap-debug-last)
       ("de" dap-debug-edit-template)
       ("ee" dap-eval)
       ("ea" dap-ui-expressions-add)
       ("er" dap-eval-region)
       ("es" dap-eval-thing-at-point)
       ("dx" mrf/end-debug-session)
       ("dX" mrf/delete-all-debug-sessions)
       ("x" nil "exit Hydra" :color yellow)
       ("q" mrf/end-debug-session "quit" :color blue)
       ("Q" mrf/delete-all-debug-sessions :color red))  

 #+end_src

#+begin_src emacs-lisp :tangle no

  ;; Disabled for now in lieu of Hydra
  ;;; -----------------------------------------------------------------
  ;;(if (package-installed-p 'dap-mode)
    (general-define-key
       :keymaps '(python-mode-map dap-ui-mode-map)
       ;; Debug python keys
       "C-c . /"       'dap-step-in
       "C-c . <right>" 'dap-step-in
       "C-c . ,"       'dap-step-out
       "C-c . <left>"  'dap-step-out
       "C-c . ."       'dap-next
       "C-c . <down>"  'dap-next
       "C-c . ?"       'dap-breakpoint-condition
       "C-c . C-b"     'dap-ui-breakpoints
       "C-c . C-c"     'dap-ui-controls-mode
       "C-c . C-d"     'mrf/begin-debug-session
       "C-c . C-e"     'dap-ui-expressions
       "C-c . C-r"     'dap-ui-repl
       "C-c . a"       'dap-ui-show-many-windows
       "C-c . b"       'dap-breakpoint-toggle
       "C-c . c"       'dap-continue
       "C-c . d"       'dap-debug
       "C-c . C-D"     'dap-debug-last
       "C-c . g"       'elpy-goto-definition-other-window
       "C-c . i"       'dap-step-in
       "C-c . l"       'dap-ui-locals
       "C-c . n"       'dap-next
       "C-c . o"       'dap-step-out
       "C-c . r"       'dap-debug-restart
       "C-c . t"       'dap-breakpoint-toggle
       "C-c . x"       'mrf/end-debug-session
       "C-c . C-d"     'mrf/end-debug-session
       "C-c . X"       'mrf/delete-all-debug-sessions
       "C-c . C-x"     'dap-delete-session
       "C-c g"         'elpy-goto-definition
       "C-c C-q"       'quote-word
       ) ;; )

#+end_src

*** Python Keybinding for Realgud
Since Realgud is options (in our configuratrion), we add it's keybindings conditionally. *Note* that these keybindings are still compatible with =dap-mode= keybindings.

#+begin_src emacs-lisp

  ;;; =========================================================================
  (if (package-installed-p 'realgud)
     (general-def python-mode-map
        "M-p" 'python-nav-backward-defun
        "M-n" 'python-nav-forward-defun
        "C-c p" 'elpy-goto-definition
        "C-c h" 'elpy-doc
        "C-c , j" 'realgud:cmd-jump
        "C-c , k" 'realgud:cmd-kill
        "C-c , s" 'realgud:cmd-step
        "C-c , n" 'realgud:cmd-next
        "C-c , q" 'realgud:cmd-quit
        "C-c , F" 'realgud:window-bt
        "C-c , U" 'realgud:cmd-until
        "C-c , X" 'realgud:cmd-clear
        "C-c , !" 'realgud:cmd-shell
        "C-c , b" 'realgud:cmd-break
        "C-c , f" 'realgud:cmd-finish
        "C-c , D" 'realgud:cmd-delete
        "C-c , +" 'realgud:cmd-enable
        "C-c , R" 'realgud:cmd-restart
        "C-c , -" 'realgud:cmd-disable
        "C-c , B" 'realgud:window-brkpt
        "C-c , c" 'realgud:cmd-continue
        "C-c , e" 'realgud:cmd-eval-dwim
        "C-c , Q" 'realgud:cmd-terminate
        "C-c , T" 'realgud:cmd-backtrace
        "C-c , h" 'realgud:cmd-until-here
        "C-c , u" 'realgud:cmd-older-frame
        "C-c , 4" 'realgud:cmd-goto-loc-hist-4
        "C-c , 5" 'realgud:cmd-goto-loc-hist-5
        "C-c , 6" 'realgud:cmd-goto-loc-hist-6
        "C-c , 7" 'realgud:cmd-goto-loc-hist-7
        "C-c , 8" 'realgud:cmd-goto-loc-hist-8
        "C-c , 9" 'realgud:cmd-goto-loc-hist-9
        "C-c , d" 'realgud:cmd-newer-frame
        "C-c , RET" 'realgud:cmd-repeat-last
        "C-c , E" 'realgud:cmd-eval-at-point
        "C-c , I" 'realgud:cmdbuf-info-describe
        "C-c , C-d" 'realgud:pdb
        "C-c , C-f" 'realgud:flake8-goto-msg-line
        "C-c , C-i" 'realgud:cmd-info-breakpoints))

#+end_src

*** Python Virtual Environment Support
We use Pyvenv-auto is a package that automatically changes to the Python virtual environment based upon the project's directory.  pyvenv-auto looks at the root director of the project for a =.venv= or =venv= (and a few others)

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package pyvenv-auto
     :config (message "Starting pyvenv-auto")
     :hook ((python-mode . pyvenv-auto-run)))

#+end_src

*** Pydoc
#+begin_src emacs-lisp

    (use-package pydoc-info
       :ensure
       :straight (pydoc-info :type git :host github :repo "emacsattic/pydoc-info"))

    (info-lookup-add-help
       :mode 'python-mode
       :parse-rule 'pydoc-info-python-symbol-at-point
       :doc-spec
       '(("(python)Index" pydoc-info-lookup-transform-entry)
           ("(sphinx)Index" pydoc-info-lookup-transform-entry)))

    (use-package info-lookmore
       :straight (info-lookmore :type git
  		  :host github :repo "emacsmirror/info-lookmore"))
    
    (info-lookup-add-help
       :mode 'python-mode
       :regexp "[[:alnum:]_]+"
       :doc-spec
       '(("(python)Index" nil "")))
      
#+end_src


* GameBoy Development
RGBDS is a compiler that has been around quite a long time (since 1997). It supports Z80 and the LR35902 assembler syntaxes that are used in the development of Game Boy and Game Boy color games.

#+begin_src emacs-lisp

  (use-package z80-mode
     :straight (z80-mode
  		:type git
  		:host github
  		:repo "SuperDisk/z80-mode"))

  (use-package mwim
     :straight (mwim
  		:type git
  		:flavor melpa
  		:host github
  		:repo "alezost/mwim.el"))

  (use-package rgbds-mode
     :after mwim
     :straight (rgbds-mode
  		:type git :host github
  		:repo "japanoise/rgbds-mode"))

#+end_src


* Corfu
Corfu enhances in-buffer completion with a small completion popup. The current candidates are shown in a popup below or above the point. The candidates can be selected by moving up and down. Corfu is the minimalistic in-buffer completion counterpart of the Vertico minibuffer UI.

#+begin_src emacs-lisp :tangle no

  ;;;; Code Completion
  (use-package corfu
     :disabled
     :ensure
     ;; Optional customizations
     :custom
     (corfu-cycle t)                 ; Allows cycling through candidates
     (corfu-auto t)                  ; Enable auto completion
     (corfu-auto-prefix 2)
     (corfu-auto-delay 0.8)
     (corfu-popupinfo-delay '(0.5 . 0.2))
     (corfu-preview-current 'insert) ; insert previewed candidate
     (corfu-preselect 'prompt)
     (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets
     ;; Optionally use TAB for cycling, default is `corfu-complete'.
     :bind (:map corfu-map
              ("M-SPC"      . corfu-insert-separator)
              ("TAB"        . corfu-next)
              ([tab]        . corfu-next)
              ("S-TAB"      . corfu-previous)
              ([backtab]    . corfu-previous)
              ("S-<return>" . corfu-insert)
              ("RET"        . nil))

     :init
     (global-corfu-mode)
     (corfu-history-mode)
     (corfu-popupinfo-mode) ; Popup completion info
     :config
     (add-hook 'eshell-mode-hook
        (lambda () (setq-local corfu-quit-at-boundary t
                      corfu-quit-no-match t
                      corfu-auto nil)
           (corfu-mode))))

#+end_src


* Company Mode
[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package company
     :after lsp-mode
     :hook (lsp-mode . company-mode)
     :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
     (:map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common))
     :custom
     (company-minimum-prefix-length 1)
     (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package company-jedi
     :config
     (defun my/company-jedi-python-mode-hook ()
        (add-to-list 'company-backends 'company-jedi))
     (add-hook 'python-mode-hook 'my/company-jedi-python-mode-hook))

  (add-hook 'after-init-hook 'global-company-mode)

#+end_src


* Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Developer")
      (setq projectile-project-search-path '("~/Developer")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src


* Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (use-package magit
  ;;  :commands (magit-status magit-get-current-branch)
  ;; :custom
  ;;  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
     )

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

  (use-package forge
    :after magit)

#+end_src


* Org Mode

Org Mode is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package [[https://orgmode.org/][Orgmode]].

The =mrf/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

*NOTE:* Most of the code below has been taken from the [[https://systemcrafters.net][System Crafters]] site run by David Wilson. Please visit that site for lots of great stuff!

** Font setup
#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (defun mrf/org-font-setup ()
    "Setup org mode fonts."
    (font-lock-add-keywords
       'org-mode
       '(("^ *\\([-]\\) "
            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Setup

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

#+begin_src  emacs-lisp
  ;;; -----------------------------------------------------------------

  (defun mrf/org-mode-setup ()
     (org-indent-mode)
     (variable-pitch-mode 1)
     (visual-line-mode 1)
     (setq org-ellipsis " ▾")
     (setq org-agenda-start-with-log-mode t)
     (setq org-log-done 'time)
     (setq org-log-into-drawer t)
     ;; (use-package org-habit)
     ;; (add-to-list 'org-modules 'org-habit)
     ;; (setq org-habit-graph-column 60)
     (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
  	  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)"
  	     "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
     (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
  	  ("Tasks.org" :maxlevel . 1))))
  
#+end_src

*** Function to setup the agenda

#+begin_src emacs-lisp
  ;;; -----------------------------------------------------------------

  (defun mrf/org-setup-agenda ()
     (setq org-agenda-custom-commands
        '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
                (todo "NEXT"
                   ((org-agenda-overriding-header "Next Tasks")))
                (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
               ((todo "NEXT"
                   ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
               ((org-agenda-overriding-header "Low Effort Tasks")
  		(org-agenda-max-todos 20)
  		(org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
               ((todo "WAIT"
                   ((org-agenda-overriding-header "Waiting on External")
                      (org-agenda-files org-agenda-files)))
  		(todo "REVIEW"
                     ((org-agenda-overriding-header "In Review")
                        (org-agenda-files org-agenda-files)))
  		(todo "PLAN"
                     ((org-agenda-overriding-header "In Planning")
                        (org-agenda-todo-list-sublevels nil)
                        (org-agenda-files org-agenda-files)))
  		(todo "BACKLOG"
                     ((org-agenda-overriding-header "Project Backlog")
                        (org-agenda-todo-list-sublevels nil)
                        (org-agenda-files org-agenda-files)))
  		(todo "READY"
                     ((org-agenda-overriding-header "Ready for Work")
                        (org-agenda-files org-agenda-files)))
  		(todo "ACTIVE"
                     ((org-agenda-overriding-header "Active Projects")
                        (org-agenda-files org-agenda-files)))
  		(todo "COMPLETED"
                     ((org-agenda-overriding-header "Completed Projects")
                        (org-agenda-files org-agenda-files)))
  		(todo "CANC"
                     ((org-agenda-overriding-header "Cancelled Projects")
                        (org-agenda-files org-agenda-files)))))))
     ) ;; mrf/org-setup-agenda
  
#+end_src

*** The capture-templates function

#+begin_src emacs-lisp

  ;;; -----------------------------------------------------------------

  (defun mrf/org-setup-capture-templates ()
     (setq org-capture-templates
        `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
               "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
               (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
               "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
               ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
               :clock-in :clock-resume
               :empty-lines 1)
            ("jm" "Meeting" entry
               (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
               "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
               :clock-in :clock-resume
               :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree
  				    "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
               "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline
  				       "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org"
  				       "Weight")
               "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t))))
     
#+end_src

** The main 'Org' package
#+begin_src emacs-lisp
  ;;; -----------------------------------------------------------------

  (use-package org
     :straight (org :type git
     		:repo "https://git.savannah.gnu.org/git/emacs/org-mode.git"
     		:local-repo "org"
     		:depth full
     		:pre-build (straight-recipes-org-elpa--build)
     		:build (:not autoloads)
     		:files (:defaults "lisp/*.el" ("etc/styles/" "etc/styles/*")))
     :commands (org-capture org-agenda)
     :hook (org-mode . mrf/org-mode-setup)
     :config
     (general-def org-mode-map
        "C-c e" 'org-edit-src-code)
     ;; Save Org buffers after refiling!
     (advice-add 'org-refile :after 'org-save-all-org-buffers)
     (setq org-tag-alist
        '((:startgroup)
  	; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
     (mrf/org-setup-agenda)
     ;; Configure custom agenda views
     (mrf/org-setup-capture-templates)
     (define-key global-map (kbd "C-c j")
        (lambda () (interactive) (org-capture nil "jj")))
     (mrf/org-font-setup))

#+end_src

** Better Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp

  ;;; -----------------------------------------------------------------

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


#+end_src

** Visual Fill
We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp :results silent

  ;;; -----------------------------------------------------------------

  (defun mrf/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . mrf/org-mode-visual-fill))


#+end_src

** Export Code
To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][Babel]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  ;;; -----------------------------------------------------------------

  (with-eval-after-load 'org
     (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
  	(js . t)
  	(shell . t)
  	(python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates
Org Mode's structure templates feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.  You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language as it is known by Org Babel.

This snippet adds a hook to =org-mode= buffers so that =mrf/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;;; -----------------------------------------------------------------

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Org-mode Roam
Org Mode is known to be a great tool not just for writing and personal notes but also TODO lists, project planning, time tracking, and more. Once you start to become really invested in Org Mode you’ll eventually have to come up with a system for managing your Org files so that it’s easy to store and find the information you need.

Org Roam is an extension to Org Mode which solves a couple of the biggest problems that I’ve personally had when using Org for personal notes:

- How many Org files do I need?
- How do I decide where to put things in my Org files?

Org Roam solves these problems by making it easy to create topic-focused Org Files and link them together so that you can treat the information as nodes in a network rather than as hierarchical documents. You can think of it like a personal wiki!

#+begin_src emacs-lisp 

  (use-package emacsql)
  (use-package emacsql-sqlite)
  
  ;;; ----------------------------------------------------------------
  (use-package org-roam
    :demand t  ;; Ensure org-roam is loaded by default
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (concat mrf/docs-dir "/RoamNotes"))
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n I" . org-roam-node-insert-immediate)
           ("C-c n p" . my/org-roam-find-project)
           ("C-c n t" . my/org-roam-capture-task)
           ("C-c n b" . my/org-roam-capture-inbox)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))

  (defun org-roam-node-insert-immediate (arg &rest args)
     (interactive "P")
     (let ((args (push arg args))
             (org-roam-capture-templates
                (list (append (car org-roam-capture-templates)
                         '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  #+end_src

*** Org Agenda from Roam Notes
One of the most useful features of Org Mode is the agenda view. You can actually use your Org Roam notes as the source for this view!

Typically you won’t want to pull in all of your Org Roam notes, so we’ll only use the notes with a specific tag like Project.

Here is a snippet that will find all the notes with a specific tag and then set your org-agenda-list with the corresponding note files.

#+begin_src emacs-lisp 

  ;; The buffer you put this code in must have lexical-binding set to t!
  ;; See the final configuration at the end for more details.

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)

#+end_src

*** Selecting from a list of notes
The org-roam-node-find function gives us the ability to filter the list of notes that get displayed for selection.

We can define our own function that shows a selection list for notes that have a specific tag like Project which we talked about before. This can be useful to set up a keybinding to quickly select from a specific set of notes!

One added benefit is that we can override the set of capture templates that get used when a new note gets created.

This means that we can automatically create a new note with our project capture template if the note doesn’t already exist!

#+begin_src emacs-lisp 

  (defun my/org-roam-project-finalize-hook ()
     "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
     ;; Remove the hook since it was added temporarily
     (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

     ;; Add project file to the agenda list if the capture was confirmed
     (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
     (interactive)
    ;; Add the project file to the agenda after capture is finished
     (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
     (org-roam-node-find
        nil
        nil
        (my/org-roam-filter-by-tag "Project")
        :templates
        '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
             :unnarrowed t))))

  (global-set-key (kbd "C-c n p") #'my/org-roam-find-project)

#+end_src

*** Keep and inbox of notes and tasks
If you want to quickly capture new notes and tasks with a single keybinding into a place that you can review later, we can use org-roam-capture- to capture to a single-specific file like Inbox.org!

Even though this file won’t have the timestamped filename, it will still be treated as a node in your Org Roam notes.
#+begin_src emacs-lisp 

  (defun my/org-roam-capture-inbox ()
     (interactive)
     (org-roam-capture- :node (org-roam-node-create)
        :templates '(("i" "inbox" plain "* %?"
                        :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

#+end_src

*** Capture a task
If you’ve set up project note files like we mentioned earlier, you can set up a capture template that allows you to quickly capture tasks for any project.

Much like the example before, we can either select a project that exists or automatically create a project note when it doesn’t exist yet.

#+begin_src emacs-lisp 
  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
     (org-roam-capture- :node (org-roam-node-read nil
                              (my/org-roam-filter-by-tag "Project"))
        :templates '(("p" "project" plain "** TODO %?"
                        :if-new
                        (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                           ("Tasks"))))))
#+end_src

*** Todo
The following snippet sets up a hook for all Org task state changes and then copies the completed (DONE) entry to today’s note file

#+begin_src emacs-lisp 
  (defun my/org-roam-copy-todo-to-today ()
     (interactive)
     (let ((org-refile-keep t) ;; Set this to nil to delete the original!
             (org-roam-dailies-capture-templates
                '(("t" "tasks" entry "%?"
                     :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
             (org-after-refile-insert-hook #'save-buffer)
             today-file pos)
        (save-window-excursion
           (org-roam-dailies--capture (current-time) t)
           (setq today-file (buffer-file-name))
           (setq pos (point)))

        ;; Only refile if the target file is different than the current file
        (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
           (org-refile nil nil (list "Tasks" today-file nil pos)))))

  (add-to-list 'org-after-todo-state-change-hook
     (lambda ()
        (when (equal org-state "DONE")
           (my/org-roam-copy-todo-to-today))))
#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that source code blocks can be written to another file - like how this Org file will write an init.el file. Add a =#+auto_tangle: t= at the top of the org file in order to enable this module to tangle the org file.

#+begin_src emacs-lisp

  ;; Automatically tangle our Configure.org config file when we save it
  ;; Org files that should use this need to add a '#+auto_tangle: t'
  ;; in the org file.
  (use-package org-auto-tangle
     :defer t
     :hook (org-mode . org-auto-tangle-mode))

  ;; no longer used but I keep it jic
  ;; (defun mrf/org-babel-tangle-save-hook ()
  ;;    "Save emacs-lisp blocks."
  ;;   (when (eq major-mode 'org-mode) ;; Org-mode Only
  ;;      (when (string-equal (file-name-directory (buffer-file-name))
  ;;               (expand-file-name emacs-config-directory))
  ;;         (message "org-mode-hook: Executing mrf/org-babel-tangle-config")
  ;;         ;; Dynamic scoping to the rescue
  ;;         (let ((org-confirm-babel-evaluate nil))
  ;;            (message "... tangle emacs-lisp")
  ;;            (org-babel-tangle)))))

#+end_src

** Markdown support
While there is standard markdown support built into =org-mode=, this additional markdown package can also be used.

#+begin_src emacs-lisp

(with-eval-after-load 'org
  (require 'ox-gfm nil t))

#+end_src

** Org-AI

#+begin_src emacs-lisp
  (use-package org-ai
     :disabled
     :straight (org-ai :type git
  		:flavor melpa
  		:files (:defaults "snippets" "org-ai-pkg.el")
  		:host github :repo "rksm/org-ai")
     :custom
     (org-ai-openai-api-token "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"))

  ;; (load "copilot")
#+end_src


* Quality of Life

The following packages are some additional quality of life features.

** Vertico
#+begin_src emacs-lisp :tangle no

  (use-package vertico
     )
  
  (use-package vertico-posframe
     :custom
     (vertico-posframe-parameters
        '((left-fringe . 8)
            (right-fringe . 8))))

#+end_src

** Solair mode
#+begin_src emacs-lisp

  (use-package solaire-mode
     :hook (after-init . solaire-global-mode)
     :config
     (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
     (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist))
  
#+end_src

** Doom Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
     :init (doom-modeline-mode 1)
     :config (column-number-mode 1)
     :custom
     (doom-modeline-height 30)
     (doom-modeline-window-width-limit nil)
     (doom-modeline-buffer-file-name-style 'truncate-with-project)
     (doom-modeline-minor-modes nil)
     (doom-modeline-enable-word-count t) (doom-modeline-buffer-encoding nil)
     (doom-modeline-buffer-modification-icon t)
     (doom-modeline-env-python-executable "python")
     ;; needs display-time-mode to be one
     (doom-modeline-time t)
     (doom-modeline-vcs-max-length 50)
     )

#+end_src

** Golden Ratio
#+begin_src emacs-lisp

  (use-package golden-ratio
     :disabled
     :hook (after-init . golden-ratio-mode)
     :custom
     (golden-ratio-exclude-modes '(occur-mode
  				   undo-tree-visualizer-mode
  				   dap-ui-repl-mode
  				   dap-mode
  				   dap-ui-mode
  				   dap-ui-many-windows-mode
  				   inferior-python-mode)))
  ;; (golden-ratio-auto-scale t))

#+end_src

** Ace Window
[[https://github.com/abo-abo/ace-window][ace-window]] is a package for selecting a window to switch to. Like =other-window= but better!

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (use-package ace-window
     :config
     (general-define-key
        "M-o" 'ace-window))

#+end_src

** Dashboard

Dashboard is an extensible Emacs startup screen showing you what’s most important.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package all-the-icons
     :if (display-graphic-p))

  ;; Value of dashb oard-startup-banner can be
  ;; - nil to display no banner
  ;; - 'official which displays the official emacs logo
  ;; - 'logo which displays an alternative emacs logo
  ;; - 1, 2 or 3 which displays one of the text banners
  ;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt"
  ;;   which displays whatever gif/image/text you would prefer
  ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")
  (use-package dashboard
     :after (dired)
     :preface
     (defun mrf/dashboard-banner ()
        (setq dashboard-footer-messages '("Greetings Program!"))
        (setq dashboard-banner-logo-title "Welcome to Emacs!")
        (setq dashboard-startup-banner 'logo))
     :hook ((after-init     . dashboard-refresh-buffer)
            (dashboard-mode . mrf/dashboard-banner))
     :custom
     (dashboard-items '((recents . 9)
                          (bookmarks . 5)
                          (projects . 5)))
     :config
     (dashboard-setup-startup-hook)
     (dashboard-open)
     (setq dashboard-center-content t)
     (global-set-key (kbd "C-c d") 'dashboard-open))

#+end_src

** Autocomplete

Auto-Complete is an intelligent auto-completion extension for Emacs. It extends the standard Emacs completion interface and provides an environment that allows users to concentrate more on their own work.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  (defvar ac-directory (unless (file-exists-p "auto-complete")
                       (make-directory "auto-complete")))
  (add-to-list 'load-path ac-directory)

  (require 'auto-complete)
  (ac-config-default)

  (global-auto-complete-mode 1)
  (setq-default ac-sources '(ac-source-pycomplete
                             ac-source-yasnippet
                             ac-source-abbrev
                             ac-source-dictionary
                             ac-source-words-in-same-mode-buffers))

  ; hack to fix ac-sources after pycomplete.el breaks it
  (add-hook 'python-mode-hook
            #'(lambda ()
               (setq ac-sources '(ac-source-pycomplete
                                  ac-source-yasnippet
                                  ac-source-abbrev
                                  ac-source-dictionary
                                  ac-source-words-in-same-mode-buffers))))

  ;; from http://truongtx.me/2013/01/06/config-yasnippet-and-autocomplete-on-emacs/
  ; set the trigger key so that it can work together with yasnippet on
  ; tab key, if the word exists in yasnippet, pressing tab will cause
  ; yasnippet to activate, otherwise, auto-complete will
  (ac-set-trigger-key "TAB")
  (ac-set-trigger-key "<tab>")


  ;; from http://blog.deadpansincerity.com/2011/05/setting-up-emacs-as-a-javascript-editing-environment-for-fun-and-profit/
  ; Start auto-completion after 2 characters of a word
  (setq ac-auto-start 2)
  ; case sensitivity is important when finding matches
  (setq ac-ignore-case nil)

#+end_src

** Undo Tree
A great package that allows moving up and down the undo-redo tree.

#+begin_src emacs-lisp
      
  (use-package vundo
     :straight (vundo :type git
  		:host github
  		:repo "emacs-straight/vundo"
  		:files ("*" (:exclude ".git")))
     :bind (("C-x u" . vundo)
  	  ("C-x r u" . vundo))
     :config
     (setq vundo-glyph-alist vundo-unicode-symbols)
     (set-face-attribute 'vundo-default nil :family "Wingdings2"))  

#+end_src

  
#+begin_src emacs-lisp :tangle no

      ;;; -------------------------------------------------------------------------
      ;;; undo-tree handling

      (defun mrf/undo-tree-hook ()
         (set-frame-width (selected-frame) 20))

      (use-package undo-tree
         :defer t
         ;; :hook (undo-tree-visualizer-mode-hook . mrf/undo-tree-hook)
         :init
         (setq undo-tree-visualizer-timestamps t
            ;; undo-tree-visualizer-diff t
            undo-tree-enable-undo-in-region t
            ;; 10X bump of the undo limits to avoid issues with premature
            ;; Emacs GC which truncages the undo history very aggresively
            undo-limit 800000
            undo-strong-limit 12000000
            undo-outer-limit 120000000)
         (global-undo-tree-mode))
        ;; :config
        ;; restore diff window after quit.  TODO fix upstream
        ;; (defun mrf/undo-tree-restore-default ()
        ;;   (setq undo-tree-visualizer-diff nil))
        ;;  (advice-add 'undo-tree-visualizer-quit :after #'mrf/undo-tree-restore-default))

      ;; This prevents the *.~undo-tree~ files from being persisted.
      (with-eval-after-load 'undo-tree
         (setq undo-tree-auto-save-history nil))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  ;;; -------------------------------------------------------------------------
  ;;; helpful package

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Terminals
*** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

*** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

*** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
     :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

** Neotree
A tree plugin like NerdTree for Vim

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package neotree
     :config
     (global-set-key [f8] 'neotree-toggle))

#+end_src

** Better Modeline
Using [[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Useful functions and Keybindings
Here are some helpful functions that are bound to some (for me) unassigned keys.

#+begin_src emacs-lisp :results silent
  ;;; ------------------------------------------------------------------------
  ;;; Functions to insert the buffer file name at the current cursor position
  ;;;
  (defun mrf/insert-buffer-full-name-at-point ()
     (interactive)
     (insert buffer-file-name))

  (defun mrf/insert-buffer-name-at-point ()
     (interactive)
     (insert (file-name-nondirectory (buffer-file-name))))

  (general-define-key
     "C-c i f" 'mrf/insert-buffer-name-at-point
     "C-c i F" 'mrf/insert-buffer-full-name-at-point
     )

#+end_src

** Hyperbole
GNU Hyperbole (pronounced Ga-new Hi-per-bo-lee), or just Hyperbole, is like Markdown for hypertext. Hyperbole automatically recognizes dozens of common, pre-existing patterns in any buffer regardless of mode and can instantly activate them as hyperbuttons with a single key: email addresses, URLs, grep -n outputs, programming backtraces, sequences of Emacs keys, programming identifiers, Texinfo and Info cross-references, Org links, Markdown links and on and on. All you do is load Hyperbole and then your text comes to life with no extra effort or complex formatting.

#+begin_src emacs-lisp :tangle no

  (unless (package-installed-p 'hyperbole)
    (package-refresh-contents)
    (package-install 'hyperbole))
  (hyperbole-mode 1)

#+end_src

** ChatGPT
#+begin_src emacs-lisp :tangle no

  (use-package chatgpt-shell
     :custom
     (chatgpt-shell-openai-key "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"))

#+end_src

** Centaur Tabs
#+begin_src emacs-lisp

  (use-package centaur-tabs
     :init
     :disabled
     ;; Set the style to rounded with icons (setq centaur-tabs-style "bar")
     (setq centaur-tabs-style "bar")
     (setq centaur-tabs-set-icons t)
     :config ;; Enable centaur-tabs
     (centaur-tabs-mode nil))

#+end_src

** Diff HL
=diff-hl-mode= highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.

#+begin_src emacs-lisp

  (use-package diff-hl
     :straight (diff-hl :type git :flavor melpa :host github :repo "dgutov/diff-hl"))

#+end_src


* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings
**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------
  ;; Prefer g-prefixed coreutils version of standard utilities when available
  (let ((gls (executable-find "gls")))
    (when gls (setq insert-directory-program gls)))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))
    ;; :config
    ;; (evil-collection-define-key 'normal 'dired-mode-map
    ;;   "H" 'dired-hide-dotfiles-mode))

#+end_src

*** Single Window
Dired, by default, opens up multiple windows - one for each directory. It would be nice to be able to limit =dired= to use just a single window. [[https://codeberg.org/amano.kenji/dired-single][dired-single]] does just that. We configure =dired-single= to open up a directory while in dired with the =C-<return>=  key combination. This will then open up the directory in the buffer named =*dired*=. Whenever a directory is opened with the =C-<return>= key sequence, that directory will then replace what's currently in the =*dired*= buffer.

#+begin_src emacs-lisp

    ;;; ------------------------------------------------------------------------


    (defun mrf/dired-single-keymap-init ()
      "Bunch of stuff to run for dired, either immediately or when it's
       loaded."
      (define-key dired-mode-map
         [remap dired-find-file] 'dired-single-buffer)
      (define-key dired-mode-map
         [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse)
      (define-key dired-mode-map
         [remap dired-up-directory] 'dired-single-up-directory))

    (use-package dired-single
       :config
       (mrf/dired-single-keymap-init))
  ;;    (general-def dired-mode-map
  ;;       "C-<return>" 'dired-single-magic-buffer
  ;;       [remap dired-find-file] 'dired-single-buffer
  ;;       [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse
  ;;       [remap dired-up-directory] 'dired-single-up-directory))

#+end_src


** Emacs Application Framework
This is a framework written in Qt and also emacs lisp. It is required to clone the [[https://github.com/emacs-eaf/emacs-application-framework][EAF framework]] into the =site-lisp= directory in the emacs config dir.
*** Setup
#+begin_src emacs-lisp :tangle no

  ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization

  (use-package eaf
     :load-path (concat emacs-config-directory "site-lisp/emacs-application-framework")
     :custom
     (eaf-browser-continue-where-left-off t)
     (eaf-browser-enable-adblocker t)
     (browse-url-browser-function 'eaf-open-browser)
     :config
     (defalias 'browse-web #'eaf-open-browser)
     (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
     (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
     (eaf-bind-key take_photo "p" eaf-camera-keybinding)
     (eaf-bind-key nil "M-q" eaf-browser-keybinding)
     (require 'eaf-browser))) ;; unbind, see more in the Wiki

#+end_src


* Lastly

Some final configuratiion to be done at the end of this configuration.

** Ignore Line Number Mode
The following is a list of major mode-hooks variables that are set so that they don't follow the normal global line number mode. If there is any mode that doesn't appear here, more than likely it will have line numbers added. Just add the hook name here to make it so that major mode not have line numbers. This doesn't effect minor modes.

#+begin_src emacs-lisp

  ;;; ------------------------------------------------------------------------

  ;; Line #'s appear everywhere
  ;; ... except for when in these modes
  (dolist (mode '(dashboard-mode-hook
                    eshell-mode-hook
                    eww-mode-hook
  		  help-mode-hook
                    org-mode-hook
                    shell-mode-hook
                    term-mode-hook
                    treemacs-mode-hook
                    vterm-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;;; ===========================================================================
  (setq warning-suppress-types '((package reinitialization)
                                   (package-initialize)
                                   (package)
                                   (use-package)
                                   (python-mode)))


  #+end_src


** Helper to up the font size for a higher-res monitor.
*** Frame font selection
This little function toggles between a larger font size and the default font size.

#+begin_src emacs-lisp

  (defvar mrf/font-size-slot 1)

  (defun mrf/update-font-size ()
     (message "adjusting font size")
     (if (equal mrf/font-size-slot 3)
        (progn
           (message "X-Large Font")
           (setq mrf/default-font-size mrf/x-large-font-size)
           (setq mrf/default-variable-font-size mrf/x-large-variable-font-size)
           (setq mrf/font-size-slot 2)
           (mrf/update-face-attribute))
        (if (equal mrf/font-size-slot 2)
           (progn
              (message "Large Font")
              (setq mrf/default-font-size mrf/large-font-size)
              (setq mrf/default-variable-font-size mrf/large-variable-font-size)
              (setq mrf/font-size-slot 1)
              (mrf/update-face-attribute))
           (if (equal mrf/font-size-slot 1)
              (progn
                 (message "Medium Font")
                 (setq mrf/default-font-size mrf/medium-font-size)
                 (setq mrf/default-variable-font-size mrf/medium-variable-font-size)
                 (setq mrf/font-size-slot 0)
                 (mrf/update-face-attribute))
              (progn
                 (message "Small Font")
                 (setq mrf/default-font-size mrf/small-font-size)
                 (setq mrf/default-variable-font-size mrf/small-variable-font-size)
                 (setq mrf/font-size-slot 3)
                 (mrf/update-face-attribute))))))

  ;; Cycle through all resolutions
  (general-define-key
     "C-c x" '(lambda () (interactive) (mrf/update-font-size)))

  ;; Some alternate keys below....
  (general-define-key
     "C-c 1" 'use-small-display-font)

  (general-define-key
     "C-c 2" 'use-medium-display-font)

  (general-define-key
     "C-c 3" 'use-large-display-font)

  (general-define-key
     "C-c 4" 'use-x-large-display-font)

#+end_src

*** Frame support functions
These functions are used to configure the main frame font size. Based upon a monitor's size, it may be necessary to make the font larger or smaller. Each function is specifically broken out only so that the =describe-key= will show something other than just ~lambda~.

#+begin_src emacs-lisp :results silent

  (defun mrf/set-frame-font (slot)
     (setq mrf/font-size-slot slot)
     (mrf/update-font-size))

  (defun use-small-display-font ()
     (interactive)
     (mrf/set-frame-font 0))

  (defun use-medium-display-font ()
     (interactive)
     (mrf/set-frame-font 1)
     (mrf/set-frame-alpha-maximized))

  (defun use-large-display-font ()
     (interactive)
     (mrf/set-frame-font 2)
     (mrf/set-frame-alpha-maximized))

  (defun use-x-large-display-font ()
     (interactive)
     (mrf/set-frame-font 3))

#+end_src


** Supress some startup warnings

  #+begin_src emacs-lisp

      ;;; ===========================================================================
    (custom-set-variables
       ;; custom-set-variables was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
        '(warning-suppress-log-types
    	'(((python python-shell-completion-native-turn-on-maybe))
    	    ((package reinitialization))
    	    (use-package)
    	    (python-mode)
    	    (package-initialize))))

      ;;; init.el ends here.
    (custom-set-faces
       ;; custom-set-faces was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       )

    ;;  (dashboard-open)

#+end_src
