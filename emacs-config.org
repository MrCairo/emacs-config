#+title: Mitch's Emacs Configuration
#+author: Mitch Fisher
#+date: 2024-05-11
#+OPTIONS: toc:nil h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :results silent :exports code :mkdirp yes

* Welcome!

This ORG file will configure the  ~init.el~  file based upon all of the =emacs-lisp= source blocks. The =emacs-lisp= source blocks are defined in an organized order. While these blocks can generally be moved around, there are some order dependencies. So it's generally best that this order be preserved to prevent any compile-time issues.

The goal of this Emacs configuration is to make an Emacs configuration that has a good collection of popular options. So far, the following collections of options are included here:


- Landing Screen Options ::
  + Dashboard
  + IELM (Integrated Emacs Lisp Mode)
  + Default *scratch* buffer
  
- Completion Frameworks:
  + Vertico, Consult
  + Ivy, Counsel, Swiper
  + Corfu

- Undo Handlers
  + =Vundo=
  + Undo-tree
    
- Debug Adapters
  + DAPE
  + DAP

- Integrated Development Environments
  + =Elpy=
  + =Eglot=
  + Stand-alone LSP
  + LSP Bridge (experimental)
  + Anaconda-mode for Python
    
- Project Options
  + Projectile
  + project.el
    
- Custom Themes
  + Several popular themes that are easy to cycle between and also good on the eyes.
    
- Other Optional Features
  + Game Boy Development Packages
  + Neo Tree
  + Golden Ratio
  + Embark
  + Customizable Menu (MmM)


* README:

--------------------------------------------------------------------------------

- This configuration requires Emacs 29.1+

- While this configuration includes support for several languages - and I mean support for syntax highlighting and, to some extent, debugging - this configuration caters to be a Python development environment.

- The C/C++ debugger for these type of programs are done via LSP/LLDB and [[RealGUD][RealGUD]]. The chosen =debug-adapter= custom variable doesn't apply. The reason for this is that the DAP/LSP/LLDB interaction doesn't work properly on my =Apple Silicon= mac. Until GDB supports =ARM= instruction sets then this (=RealGUD=) will remain as the only best way to support a more integrated debugging experience.

- Python can use either =dap= or =dape= which is the reasoning behind the =debug-adapter= custom variable.

- If auto-tangling doesn't work because of a problem in the generated ~init.el~ file, then tangling can be done manually by either using ~(C-c C-v t)~ or by calling the =org-babel-tangle= M-x command.

- When starting this Configuration for the very first time, set the =use-package-always-ensure= variable to =t=. This will force all packages to be installed even if deferred. Make sure to set this value back to =nil= after everything is loaded otherwise Emacs startup time will be impacted. This can be found in the [[Bootstrap straight][Bootstrap straight]] section.

- Take a look a the [[Custom enable flags][Custom Variables]] and [[Customization groups][Groups]] section to see what options exist. It's important to note that these variables need to be adhered to. Another thing to note is that the various =enable*= flags are not used as =:if= option in =use-package= statement. Instead, a lisp conditional statement is used so that the package is actually never loaded or installed. This improves overall startup performance.
  
- Shout out to the many people in the Emacs community from which a lot of this configuration took inspiration from.
  
--------------------------------------------------------------------------------


* early-init.el
** Package archives

#+begin_src emacs-lisp :tangle "early-init.el" 
  ;;; --------------------------------------------------------------------------

  ;; Adjust garbage collection threshold for early startup (see use of gcmh below)
  (setq gc-cons-threshold (* 100 1024 1024))

  ;; Process performance tuning

  (setq read-process-output-max (* 4 1024 1024))
  (setq process-adaptive-read-buffering nil)

  (setq package-vc-register-as-project nil) ; Emacs 30
  (add-hook 'package-menu-mode-hook #'hl-line-mode)

  (setq package-archives
    '(( "gnu-elpa" . "https://elpa.gnu.org/packages/")
       ( "nongnu" . "https://elpa.nongnu.org/nongnu/")
       ( "gnu-dev" . "https://elpa.gnu.org/devel/")
       ( "melpa" . "https://melpa.org/packages/")
       ( "org" . "https://orgmode.org/elpa/")
       ( "melpa-stable" . "https://stable.melpa.org/packages/")))

  ;; Highest number gets priority (what is not mentioned has priority 0)
  (setq package-archive-priorities
    '(
       ( "org" . 99 )
       ( "gnu-elpa" . 50 )
       ( "melpa-stable" . 40 )
       ( "melpa" . 30 )
       ( "nongnu" . 10)
       ( "gnu-dev" . 20 )
       ))

  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3") ;; w/o this Emacs freezes when refreshing ELPA

#+end_src

** Configure use-package

#+begin_src emacs-lisp :tangle "early-init.el" 

  (setq use-package-compute-statistics t
    use-package-verbose t
    use-package-always-ensure nil
    use-package-always-demand nil
    use-package-always-defer nil)
#+end_src

** Calculate startup time
#+begin_src emacs-lisp :tangle "early-init.el" 

  (add-hook 'emacs-startup-hook
    (lambda ()
      (setq startup-time-message
        (format "Emacs read in %.2f seconds with %d garbage collections."
        (float-time (time-subtract after-init-time before-init-time))
        gcs-done))
      (message startup-time-message)))

#+end_src

** Garbage Collection
#+begin_src emacs-lisp :tangle "early-init.el" 

  ;; (use-package gcmh
  ;;   :diminish gcmh-mode
  ;;   :config
  ;;   (setq gcmh-idle-delay 5
  ;;     gcmh-high-cons-threshold (* 16 1024 1024))      ; 16mb
  ;;   (gcmh-mode 1))

  (add-hook 'emacs-startup-hook
    (lambda ()
      (setq gc-cons-percentage 0.1))) ;; Default value for `gc-cons-percentage'

#+end_src

#+begin_src emacs-lisp :tangle "early-init.el" 
  ;;; early-init.el ends here.
#+end_src


* Elpaca bootstrap

This section just sets up the starting part of the ~init.el~ file. These includes Elpaca bootrapping and other types of global setup.

** Lispy Header
This is the standard format of a =lisp= header that should appear for all =lisp= scripts. It also indicates that the ~init.el~ file is generated from this ~Configure.org~ file.

#+begin_src emacs-lisp
  ;;; init.el -*- flycheck-disabled-checkers: (emacs-lisp); lexical-binding: nil -*-
  ;;;
  ;;; Commentary:

  ;; This file bootstraps the configuration which is generated from tangling an org-mode file.
  ;; So, DO NOT MODIFY this file directly as changes will be overwritten.

  ;;; Code:

  ;; Produce backtraces when errors occur: can be helpful to diagnose startup issues
  ;; (setq debug-on-error t)
  ;;

#+end_src

** Elpaca Bootstrap

Elpaca is an elisp package manager. It allows users to find, install, update, and remove third-party packages for Emacs. It is a replacement for the built-in Emacs package manager, package.el.

Elpaca:

- Installs packages asynchronously, in parallel for fast, non-blocking installations.
- Includes a flexible UI for finding and operating on packages.
- Downloads packages from their sources for convenient elisp development.
- Supports thousands of elisp packages out of the box (MELPA, NonGNU/GNU ELPA, Org/org-contrib).
- Makes it easy for users to create their own ELPAs.

#+begin_src emacs-lisp

  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                          :ref nil :depth 1
                          :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                          :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
          (build (expand-file-name "elpaca/" elpaca-builds-directory))
          (order (cdr elpaca-order))
          (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
        (if-let ((buffer
                   (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process
                            `("git" nil ,buffer t "clone"
                               ,@(when-let ((depth (plist-get order :depth)))
                                   (list (format "--depth=%d" depth)
                                     "--no-single-branch"))
                               ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                            (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                            "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
          (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  (elpaca elpaca-use-package
    (elpaca-use-package-mode 1)
    (setq elpaca-use-package-by-default t))
  ;; (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

#+end_src


* Custom Groups and Variables

Set various variables to =t= to turn on a specific feature or =nil= to disable it. Changing any of these values will require a restart of ~emacs~ since these values are inspected only during startup.

*Note:* There are no thorough dependency check done if any of these values is enabled or disabled. There has been some effort, for example, to enable a keymap if ~dap~ or ~dape~ is enabled. But if something enabled requires some not obvious package to be installed, this isn't checked.

Other variables are also defined here that define other emacs behaviors and defaults.

** Customization groups
These are the groups used by this Emacs config for customization.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Define my customization groups

  (defgroup mrf-custom nil
    "M.R. Fisher's configuration section."
    :group 'Local)

  (defgroup mrf-custom-toggles nil
    "A set of toggles that enable or disable  specific packages."
    :group 'mrf-custom)

  (defgroup mrf-custom-features nil
    "Customization from a selection of specific features and handlers."
    :group 'mrf-custom)

  (defgroup mrf-custom-fonts nil
    "Customization of fonts and sizes."
    :group 'mrf-custom)

  (defgroup mrf-custom-theming nil
    "Custom theming values."
    :group 'mrf-custom)

#+end_src

** File Locations and Variables

#+begin_src emacs-lisp
      ;;; --------------------------------------------------------------------------

  (defcustom dashboard-landing-screen t
    "If set to t, the `dashboard' package will be displayed once emacs has
  finished initializing. If this value is nil, then the *scratch* buffer will be
  shown instead.

  The Dashboard will be in the *dashboard* buffer and can also be opened using
  \"C-c d\" or \"M-RET d\" from anywhere even if this value is nil."
    :type 'boolean
    :group 'mrf-custom)

  (defcustom custom-docs-dir "~/Documents/Emacs-Related"
    "A directory used to store documents and customized data."
    :type 'string
    :group 'mrf-custom)

  (defcustom working-files-directory
    (expand-file-name "emacs-working-files" custom-docs-dir)
    "The directory where to store Emacs working files."
    :type 'string
    :group 'mrf-custom)

  (defcustom custom-org-fill-column 120
    "The fill column width for Org mode text.
      Note that the text is also centered on the screen so that should
      be taken into consideration when providing a width."
    :type 'natnum
    :group 'mrf-custom)

#+end_src

** Custom Package Toggles

Thes values toggle the availability of specific packages. These options are not grouped together as can be done with the =mrf-custom-features= group so are all separate values.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Feature Toggles

  (defcustom enable-gb-dev nil
    "If set to t, the z80-mode and other GameBoy related packages
      will be enabled."
    :type 'boolean
    :group 'mrf-custom-toggles)

  (defcustom enable-ts nil
    "Set to t to enable TypeScript handling."
    :type 'boolean
    :group 'mrf-custom-toggles)

  (defcustom enable-centaur-tabs nil
    "Set to t to enable `centaur-tabs' which uses tabs to represent open buffer."
    :type 'boolean
    :group 'mrf-custom-toggles)

  (defcustom enable-neotree nil
    "Set to t to enable the `neotree' package."
    :type 'boolean
    :group 'mrf-custom-toggles)

  (defcustom enable-golden-ratio nil
    "Set to t to enable `golden-ratio-mode' which resizes the active buffer
     window to the dimensions of a golden-rectangle"
    :type 'boolean
    :group 'mrf-custom-toggles)

  (defcustom enable-org-fill-column-centering nil
    "Set to t to center the visual-fill column of the Org display."
    :type 'boolean
    :group 'mrf-custom-toggles)

  (defcustom enable-embark nil
    "Set to t to enable the Embark package."
    :type 'boolean
    :group 'mrf-custom-toggles)

  ;; Keep as defvar until the frameset save/restore process works better.
  (defvar enable-frameset-restore nil
    "Set to t to enable restoring the last Emacs window size and position
     upon startup.")
    ;; :type 'boolean
    ;; :group 'mrf-custom-toggles)

#+end_src

** Feature selections

These are features that basically have multiple-choice options instead of being a typical binary t or nil.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defcustom undo-handler 'undo-handler-vundo
    "Select the undo handler to use.

  Vundo is a minimalistic undo handler that provides a simple, graphical undo
  horizontal tree.

  Undo-tree is a very mature and full featured undo handler. It also has the
  capability to persist undo history across Emacs sessions.

  Finally, the standard undo handler can also be chosen."
    :type '(radio
           (const :tag "Vundo (default)" undo-handler-vundo)
           (const :tag "Undo-tree" undo-handler-undo-tree)
           (const :tag "Built-in" undo-handler-built-in))
    :group 'mrf-custom-features)

  (defcustom completion-handler 'comphand-vertico
    "Select the default minibuffer completion handler.

  Vertico provides a performant and minimalistic vertical completion UI based on
  the default completion system.

  Ivy is a generic completion mechanism for Emacs. While it operates similarly to
  other completion schemes such as icomplete-mode, Ivy aims to be more efficient,
  smaller, simpler, and smoother to use yet highly customizable.  The Ivy package
  also includes Counsel. Counsel provides completion versions of common Emacs
  commands that are customised to make the best use of Ivy.  Swiper is an
  alternative to isearch that uses Ivy to show an overview of all matches."
    :type '(radio
           (const :tag "Vertico completion system." comphand-vertico)
           (const :tag "Ivy, Counsel, Swiper completion systems" comphand-ivy-counsel)
           (const :tag "Cofu completion systems" comphand-corfu)
           (const :tag "Built-in Ido" comphand-built-in))
    :group 'mrf-custom-features)

  (defcustom debug-adapter 'debug-adapter-dape
    "Select the debug adapter to use for debugging applications.  dap-mode is an
  Emacs client/library for Debug Adapter Protocol is a wire protocol for
  communication between client and Debug Server. It’s similar to the LSP but
  provides integration with debug server.

  dape (Debug Adapter Protocol for Emacs) is similar to dap-mode but is
  implemented entirely in Emacs Lisp. There are no other external dependencies
  with DAPE. DAPE supports most popular languages, however, not as many as
  dap-mode."
    :type '(radio
           (const :tag "Debug Adapter Protocol (DAP)" debug-adapter-dap-mode)
           (const :tag "Debug Adapter Protocol for Emacs (DAPE)" debug-adapter-dape))
    :group 'mrf-custom-features)

  (defcustom custom-ide 'custom-ide-eglot
    "Select which IDE will be used for Python development.

  Elpy is an Emacs package to bring powerful Python editing to Emacs. It
  combines and configures a number of other packages, both written in Emacs
  Lisp as well as Python. Elpy is fully documented at
  https://elpy.readthedocs.io/en/latest/index.html.

  Eglot/LSP Eglot is the Emacs client for the Language Server Protocol
  (LSP). Eglot provides infrastructure and a set of commands for enriching the
  source code editing capabilities of Emacs via LSP. Eglot itself is
  completely language-agnostic, but it can support any programming language
  for which there is a language server and an Emacs major mode.

  Anaconda-mode is another IDE for Python very much like Elpy. It is not as
  configurable but has a host of great feaures that just work."
    :type '(radio
           (const :tag "Elpy: Emacs Lisp Python Environment" custom-ide-elpy)
           (const :tag "Emacs Polyglot (Eglot)" custom-ide-eglot)
           (const :tag "Language Server Protocol (LSP)" custom-ide-lsp)
           (const :tag "LSP Bridge (standalone)" custom-ide-lsp-bridge)
           (const :tag "Python Anaconda-mode for Emacs" custom-ide-anaconda))
    :group 'mrf-custom-features)

  (defcustom custom-project-handler 'custom-project-project
    "Select which project handler to use."
    :type '(radio (const :tag "Projectile" custom-project-projectile)
             (const :tag "Built-in project" custom-project-project))
    :group 'mrf-custom-features)

#+end_src

** Theme Specific Values
This is a curated selection of themes that I personally like. Most of them are dark mode but there are a few light versions. New themes can be added here or done via the =customize= interface. If a new theme is added to this list, it's important to ensure that the theme is actually included (see [[Color Theming][Color Theming]] section)

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Theming related

  (defcustom theme-list '("palenight-deeper-blue"
                         "ef-symbiosis"
                         "ef-maris-light"
                         "ef-maris-dark"
                         "ef-kassio"
                         "ef-bio"
                         "sanityinc-tomorrow-bright"
                         "ef-melissa-dark"
                         "darktooth-dark"
                         "material"
                         "tron-legacy")

    "My personal list of themes to cycle through indexed by `theme-selector'.
  If additional themes are added, they must be previously installed."
    :group 'mrf-custom-theming
    :type '(repeat string))

  (defcustom default-terminal-theme "sanityinc-tomorrow-bright"
    "The default theme used for a terminal invocation of Emacs."
    :group 'mrf-custom-theming
    :type 'string)

  (defcustom theme-selector 0
    "The index into the list of custom themes."
    :group 'mrf-custom-theming
    :type 'natnum)

  ;;; Font related
  (defcustom default-font-family "Fira Code Retina"
    "The font family used as the default font."
    :type 'string
    :group 'mrf-custom-fonts)

  (defcustom mono-spaced-font-family "Fira Code Retina"
    "The font family used as the mono-spaced font."
    :type 'string
    :group 'mrf-custom-fonts)

  (defcustom variable-pitch-font-family "Helvetica Neue"
    "The font family used as the default proportional font."
    :type 'string
    :group 'mrf-custom-fonts)

  (defcustom small-mono-font-size 150
    "The small font size in pixels."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defcustom medium-mono-font-size 170
    "The medium font size in pixels."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defcustom large-mono-font-size 190
    "The large font size in pixels."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defcustom x-large-mono-font-size 220
    "The extra-large font size in pixels."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defcustom small-variable-font-size 170
    "The small font size in pixels."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defcustom medium-variable-font-size 190
    "The small font size in pixels."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defcustom large-variable-font-size 210
    "The small font size in pixels."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defcustom x-large-variable-font-size 240
    "The small font size in pixels."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defcustom custom-default-font-size 170
    "A place to store the most current (face-attribute 'default :height).  This
  is specifically for the mono-spaced and default font. The variable type-face
  font size is computed + 20 of this value."
    :type 'natnum
    :group 'mrf-custom-fonts)

  (defvar custom-default-mono-font-size 170
    "Storage for the current mono-spaced font height.")

#+end_src

*** Verify Default variable-pitch Font

Look for a proportional font that is available on the OS. If the actual default font isn't available, find another that will work instead.

#+begin_src emacs-lisp

  (defun mrf/validate-variable-pitch-font ()
    (let* ((variable-pitch-font
             (cond
  	     ((x-list-fonts variable-pitch-font-family) variable-pitch-font-family)
  	     ((x-list-fonts "SF Pro")           "SF Pro")
  	     ((x-list-fonts "DejaVu Sans")      "DejaVu Sans")
  	     ((x-list-fonts "Ubuntu")           "Ubuntu")
  	     ((x-list-fonts "Helvetica")        "Helvetica")
               ((x-list-fonts "Source Sans Pro")  "Source Sans Pro")
               ((x-list-fonts "Lucida Grande")    "Lucida Grande")
               ((x-list-fonts "Verdana")          "Verdana")
               ((x-family-fonts "Sans Serif")     "Sans Serif")
               (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))))
      (if variable-pitch-font
        (when (not (equal variable-pitch-font variable-pitch-font-family))
  	(setq variable-pitch-font-family variable-pitch-font))
        (message "---- Can't find a variable-pitch font to use.")))

    (message (format ">>> variable-pitch font is %s" variable-pitch-font-family)))

#+end_src

*** Verify Default monospace / default font

Look for a proportional font that is available on the OS. If the actual default font isn't available, find another that will work instead.

#+begin_src emacs-lisp

  (defun mrf/validate-monospace-font ()
    (let* ((monospace-font
             (cond
  	     ((x-list-fonts mono-spaced-font-family) mono-spaced-font-family)
  	     ((x-list-fonts "Fira Code Retina")  "Fira Code Retina")
  	     ((x-list-fonts "Fira Code")         "Fira Code")
  	     ((x-list-fonts "Source Code Pro")   "Source Code Pro")
  	     ((x-list-fonts "Ubuntu Monospaced") "Ubuntu Monospaced")
               ((x-family-fonts "Monospaced")      "Monospaced")
               (nil (warn "Cannot find a monospaced Font.  Install Source Code Pro.")))))
      (if monospace-font
        (when (not (equal monospace-font variable-pitch-font-family))
  	(setq mono-spaced-font-family monospace-font)
  	(setq default-font-family monospace-font))
        (message "---- Can't find a monospace font to use.")))

    (message (format ">>> monospace font is %s" mono-spaced-font-family)))
  
#+end_src


* Global Configuration

Setup initial paths, global values and settings, and Emacs working directories.

** Use Shell Path
Because in macOS, Emacs could be started outside of a shell (like an application on the Dock), this code is used to migrate the <current user's shell path to Emacs ~exec-path~.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; Use shell path

  (defun set-exec-path-from-shell-PATH ()
     ;;; Set up Emacs' `exec-path' and PATH environment variable to match"
     ;;; that used by the user's shell.
     ;;; This is particularly useful under Mac OS X and macOS, where GUI
     ;;; apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" ""
                             (shell-command-to-string "$SHELL --login -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))
      (add-to-list 'exec-path "/opt/homebrew/bin")
      (add-to-list 'exec-path "/usr/local/bin")
      (add-to-list 'exec-path "/opt/homebrew/opt/openjdk/bin")
      (add-to-list 'exec-path "/opt/homebrew/opt/node@20/bin/node")
      (setq-default insert-directory-program "gls"
        dired-use-ls-dired t
        ;; Needed to fix an issue on Mac which causes dired to fail
        dired-listing-switches "-al --group-directories-first")))

#+end_src

** Emacs/User Config Directory

By default, the =user-emacs-directory= points to the .emacs.d* directory from which the =init.el= is used when Emacs starts. What this means is that any package that writes to this directory will be writing files to this initialization directory. Since we want to keep this directory clean, we set this directory to something external. A new variable, =emacs-config-directory= is set to now point to the starting Emacs condfiguration directory.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Set a variable that represents the actual emacs configuration directory.
  ;;; This is being done so that the user-emacs-directory which normally points
  ;;; to the .emacs.d directory can be re-assigned so that customized files don't
  ;;; pollute the configuration directory. This is where things like YASnippet
  ;;; snippets are saved and also additional color themese are stored.

  (defvar emacs-config-directory user-emacs-directory)

  ;;; Different emacs configuration installs with have their own configuration
  ;;; directory.
  (make-directory working-files-directory t)

  ;;; Point the user-emacs-directory to the new working directory
  (setq user-emacs-directory working-files-directory)

  ;;; Put any emacs cusomized variables in a special file
  (setq custom-file (expand-file-name "customized-vars.el" user-emacs-directory))
  ;; create custom file if it does not exists.
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
  ;; (add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror 'nomessage)))
  (load custom-file 'noerror 'nomessage)
  (setq enable-frameset-restore nil) ;; FORCE UNTIL FRAMESET RESTORE IS DONE

  ;; ensure that the loaded font values are supported by this OS. If not, try
  ;; to correct them.
  (mrf/validate-variable-pitch-font)
  (mrf/validate-monospace-font)

#+end_src

** Additional Search Paths

This directory is expected to be in the ~emacs-config-direcory~ dir. This can be used to store custom lisp (or non-elpa/melpa) files that can'tbe found by =require.el= or =straight-use-package=.


#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (add-to-list 'load-path (expand-file-name "lisp" emacs-config-directory))
  (add-to-list 'custom-theme-load-path (expand-file-name "Themes" custom-docs-dir))

#+end_src

** Global default variables

#+begin_src emacs-lisp

  ;;; --------------------------------------------------------------------------

  (setq-default
    window-resize-pixelwise t ;; enable smooth resizing
    window-resize-pixelwise t
    frame-resize-pixelwise t
    dired-dwim-target t       ;; try to guess target directory
    truncate-partial-width-windows 1 ;; truncate lines in partial-width windows
    backup-inhibited t         ;; disable backup (No ~ tilde files)
    auto-save-default nil     ;; disable auto save
    global-auto-revert-mode 1 ;; Refresh buffer if file has changed
    global-auto-revert-non-file-buffers t
    history-length 25          ;; Reasonable buffer length
    inhibit-startup-message t ;; Hide the startup message
    inhibit-startup-screent t
    lisp-indent-offset '2     ;; emacs lisp tab size
    visible-bell t             ;; Set up the visible bell
    truncate-lines 1           ;; long lines of text do not wrap
    fill-column 80             ;; Default line limit for fills
    ;; Triggers project for directories with any of the following files:
    project-vc-extra-root-markers '(".dir-locals.el"
                                   "requirements.txt"
                                   "Gemfile"
                                   "package.json"))

  (defconst *is-a-mac* (eq system-type 'darwin))


#+end_src

** Globally enabled/disabled modes
*** Save History
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  (setq savehist-file (expand-file-name "savehist" user-emacs-directory))
  (savehist-mode t)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))

#+end_src


#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; (global-display-line-numbers-mode 1) ;; Line numbers appear everywhere
  (save-place-mode 1)                  ;; Remember where we were last editing a file.
  (show-paren-mode 1)
  (column-number-mode 1)
  (tool-bar-mode -1)                   ;; Hide the toolbar
  (global-prettify-symbols-mode 1)     ;; Display pretty symbols (i.e. λ = lambda)
  ;; (repeat-mode 1)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

#+end_src

*** Save / Restore Frameset

These functions will save and restore Emacs framework. These are normally called when starting and exiting Emacs.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/save-desktop-frameset ()
    (unless (daemonp)
      (desktop-save-mode 0)
      (desktop-save-frameset)
      (with-temp-file (expand-file-name "saved-frameset.el" user-emacs-directory)
        (insert
        (format "(setq desktop-saved-frameset %S)" desktop-saved-frameset)))))

  (add-hook 'kill-emacs-hook 'mrf/save-desktop-frameset)

  ;;; --------------------------------------------------------------------------
   
  (defun mrf/restore-desktop-frameset ()
    (unless (and (daemonp) (not enable-frameset-restore))
      (let
        ((file (expand-file-name "saved-frameset.el" user-emacs-directory)))
        (desktop-save-mode 0)
        (when (f-exists? file) (load file)
        (desktop-restore-frameset)
        (when (featurep 'spacious-padding)
          (when spacious-padding-mode
            (spacious-padding-mode 0)
            (spacious-padding-mode 1)))))
        ))

#+end_src

** Emacs in server mode

#+begin_src emacs-lisp

  ;; Allow access from emacsclient
  (add-hook 'elpaca-after-init-hook
    (lambda ()
      (use-package server :ensure nil)
      (unless (server-running-p)
        (server-start))))

  ;; (when (fboundp 'pixel-scroll-precision-mode)
  ;;    (pixel-scroll-precision-mode))

#+end_src


* Universal Packages

These are the common packages that I pretty much use universally in my normal Emacs workflow.
It excludes packages that can be customized through my =mrf-custom= variables as they are generally in their own section

** F.el

Much inspired by @magnarss excellent s.el and dash.el, f.el is a modern API for working with files and directories in Emacs.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package f
    :ensure ( :package "f" :source "MELPA" :protocol https :inherit t
            :depth 1 :fetcher github :repo "rejeep/f.el"
            :files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo"
                     "doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo"
                     "lisp/*.el" (:exclude ".dir-locals.el" "test.el"
                                   "tests.el" "*-test.el" "*-tests.el"
                                   "LICENSE" "README*" "*-pkg.el"))))

#+end_src

** Hydra

This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra. Once you summon the Hydra through the prefixed binding (the body + any one head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head, arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his original purpose, calling his proper command. This makes the Hydra very seamless, it's like a minor mode that disables itself auto-magically.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package hydra
    :ensure (:repo "abo-abo/hydra" :fetcher github
              :files (:defaults (:exclude "lv.el"))))


#+end_src

** Diminish
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/set-diminish ()
    (when (equal custom-project-handler 'custom-project-projectile)
      (diminish 'projectile-mode "PrM"))
    (diminish 'anaconda-mode)
    (diminish 'tree-sitter-mode "ts")
    (diminish 'lisp-interaction-mode "Lim")
    (diminish 'counsel-mode)
    (diminish 'lisp-interaction-mode "iLisp")
    (diminish 'golden-ratio-mode)
    (diminish 'mmm-keys-minor-mode "m3k")
    (diminish 'company-box-mode)
    (diminish 'company-mode))

  (use-package diminish
    :config
    (if (not elpaca-after-init-time)
      (add-hook 'elpaca-after-init-hook
        (lambda () (run-with-timer 0.5 nil 'mrf/set-diminish)))
      (run-with-timer 1.0 nil 'mrf/set-diminsh)))


#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package which-key
    :diminish which-key-mode
    :custom (which-key-idle-delay 1)
    :config
    (which-key-mode)
    (which-key-setup-side-window-right))

#+end_src

** Multiple-cursors
Multiple cursors for Emacs. This is some pretty crazy functionality, so yes, there are kinks. Don't be afraid though.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
          ("C->" . mc/mark-next-like-this)
          ("C-<" . mc/mark-previous-like-this)
          ("C-c C-<" . mc/mark-all-like-this)))

#+end_src

** Anzu

anzu.el is an Emacs port of anzu.vim. anzu.el provides a minor mode which displays current match and total matches information in the mode-line in various search modes.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package anzu
    :custom
    (anzu-mode-lighter "")
    (anzu-deactivate-region t)
    (anzu-search-threshold 1000)
    (anzu-replace-threshold 50)
    (anzu-replace-to-string-separator " => ")
    :config
    (global-anzu-mode +1)
    (set-face-attribute 'anzu-mode-line nil
      :foreground "yellow" :weight 'bold)
    (define-key isearch-mode-map
      [remap isearch-query-replace]  #'anzu-isearch-query-replace)
    (define-key isearch-mode-map
      [remap isearch-query-replace-regexp] #'anzu-isearch-query-replace-regexp))
  
#+end_src

** Visual Fill

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package visual-fill-column
    :after org)

#+end_src

** Default Text Scale

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  
  (use-package default-text-scale
    :hook (elpaca-after-init . default-text-scale-mode))

#+end_src

** Mac Specific

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; Macintosh specific configurations.

  (defconst *is-a-mac* (eq system-type 'darwin))
  (when (eq system-type 'darwin)
    (setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'super))

#+end_src

** Prompt Indicator / minibuffer

#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------

  ;; Prompt indicator/Minibuffer

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
            (replace-regexp-in-string
              "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
              crm-separator)
            (car args))
        (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

#+end_src

** Global key-binding
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (bind-key "C-c ]" 'indent-region prog-mode-map)
  (bind-key "C-c }" 'indent-region prog-mode-map)
  (bind-key "C-x C-j" 'dired-jump)

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

  ;;
  ;; A little better than just the typical "C-x o"
  ;; windmove is a built-in Emacs package.
  ;;
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)

  ;;
  ;; Ctl-mouse to adjust/scale fonts will be disabled.
  ;; I personally like this since it was all to easy to accidentally
  ;; change the size of the font.
  ;;
  (global-unset-key (kbd "C-<mouse-4>"))
  (global-unset-key (kbd "C-<mouse-5>"))
  (global-unset-key (kbd "C-<wheel-down>"))
  (global-unset-key (kbd "C-<wheel-up>"))

#+end_src

** Eldoc

This package displays ElDoc documentations in a childframe. The childframe is selectable and scrollable with mouse, even though the cursor is hidden.

#+begin_src emacs-lisp
    ;;; --------------------------------------------------------------------------

  ;; prevent (emacs) eldoc loaded before Elpaca activation warning.
  ;; (Warning only displayed during first Elpaca installation)

  (elpaca-process-queues)
  (use-package eldoc
    :defer t
    :config
    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
    (add-hook 'ielm-mode-hook 'eldoc-mode)
    ;; Eldoc will try to load/unload a theme which can cause issues with our
    ;; theme loading mechanism. Our theme could fail to load because of this.
    ;; So, to get our themes loading properly, load it here if not already
    ;; loaded.
    (unless theme-did-load
      (mrf/load-theme-from-selector)))

  (use-package eldoc-box
    :after eldoc
    :diminish DocBox
    :config
    (global-eldoc-mode t))

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Automatic Package Updates

  (use-package auto-package-update
    ;; :ensure (:fetcher github :repo "rranelli/auto-package-update.el")
    :defer t
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

** YASnippet

These are useful snippets of code that are commonly used in various languages. You can even create your own.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; YASnippets

  (use-package yasnippet
    :bind (:map yas-minor-mode-map
          ("<C-'>" . yas-expand))
    :config
    (setq yas-global-mode t)
    (setq yas-minor-mode t)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (add-to-list #'yas-snippet-dirs (expand-file-name "Snippets" custom-docs-dir))
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode)
    (setq yas-prompt-functions '(yas-ido-prompt))
    (defun help/yas-after-exit-snippet-hook-fn ()
      (prettify-symbols-mode))
    (add-hook 'yas-after-exit-snippet-hook #'help/yas-after-exit-snippet-hook-fn))

#+end_src

**** Yasnippet Snippets

Collections of more yasnippet snippets for various languages.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package yasnippet-snippets
    :after yasnippet)

#+end_src

** All-the-icons

This package is a utility for using and formatting various Icon fonts within
Emacs.  Icon Fonts allow you to propertize and format icons the same way you
would normal text.  This enables things such as better scaling of and anti
aliasing of the icons.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package all-the-icons
    :when (display-graphic-p))

#+end_src

** Auto-complete
Auto-Complete is an intelligent auto-completion extension for Emacs. It extends the standard Emacs completion interface and provides an environment that allows users to concentrate more on their own work.

Features:

- Visual interface
- Reduce overhead of completion by using statistic method
- Extensibility

#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------
  ;; Auto Complete

  (use-package auto-complete)

  (defvar ac-directory (unless (file-exists-p "auto-complete")
                       (make-directory "auto-complete")))
  (add-to-list 'load-path ac-directory)

  (global-auto-complete-mode 1)
  (setq-default ac-sources '(ac-source-pycomplete
                            ac-source-yasnippet
                            ac-source-abbrev
                            ac-source-dictionary
                            ac-source-words-in-same-mode-buffers))

  (ac-set-trigger-key "TAB")
  (ac-set-trigger-key "<tab>")


  ;; from http://blog.deadpansincerity.com/2011/05/setting-up-emacs-as-a-javascript-editing-environment-for-fun-and-profit/
  ;; Start auto-completion after 2 characters of a word
  (setq ac-auto-start 2)
  ;; case sensitivity is important when finding matches
  (setq ac-ignore-case nil)

#+end_src

** Ace Window
[[https://github.com/abo-abo/ace-window][ace-window]] is a package for selecting a window to switch to. Like =other-window= but better!

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package ace-window
    ;;:ensure (:repo "abo-abo/ace-window" :fetcher github)
    :bind ("M-o" . ace-window))

#+end_src

** Winum
Window numbers for Emacs: Navigate your windows and frames using numbers. This is not only handy but used by Treemacs.
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Window Number

  (use-package winum
    ;;:ensure (:host github :repo "deb0ch/emacs-winum")
    :config (winum-mode))

#+end_src

** Jinx

Jinx is a fast just-in-time spell-checker for Emacs. Jinx highlights misspelled words in the text of the visible portion of the buffer. For efficiency, Jinx highlights misspellings lazily, recognizes window boundaries and text folding, if any. For example, when unfolding or scrolling, only the newly visible part of the text is checked if it has not been checked before. Each misspelling can be corrected from a list of dictionary words presented as a completion mnu.

*Important*
Jinx requires the library ~libenchant~ or ~enchant~ installed. This can be done via the [[https://github.com/AbiWord/enchant][enchant github]] site, through ~brew~ on macOS or the package management system of the OS.

#+begin_src emacs-lisp

  (use-package jinx
    :ensure (:host github :repo "minad/jinx")
    ;;:hook (emacs-startup . global-jinx-mode)
    :bind (("C-c C-$" . jinx-correct)
           ("C-x C-$" . jinx-languages))
    :config
    (dolist (hook '(text-mode-hook prog-mode-hook org-mode-hook))
      (add-hook hook #'jinx-mode)))


#+end_src

** Local packages

These are packages located in the ~"lisp"~ directory within the emacs-config-directory.

#+begin_src emacs-lisp

#+end_src


* Undo Systems

*These packages are selected via the =M-x customize= function.*

** Vundo (visual undo)

Vundo displays the undo history as a tree and lets you move in the tree to go back to previous buffer states. To use vundo, type M-x vundo RET in the buffer you want to undo. An undo tree buffer should pop up.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package vundo
    ;;:ensure ( :host github :repo "casouri/vundo")
    :when (equal undo-handler 'undo-handler-vundo)
    :bind
    ("C-x u" . vundo)
    ("C-x r u" . vundo)
    :config
    (set-face-attribute 'vundo-default nil :family "Symbola")
    (setq vundo-glyph-alist vundo-unicode-symbols))

#+end_src

** Undo Tree

Instead of treating undo/redo as a linear sequence of changes, undo-tree-mode treats undo history as a branching tree of changes, similar to the way Vim handles it. This makes it substantially easier to undo and redo any change, while preserving the entire history of past states. The undo-tree visualizer is particularly helpful in complex cases. An added side bonus is that undo history can in some cases be stored more efficiently, allowing more changes to accumulate before Emacs starts discarding history. Undo history can be saved persistently across sessions with Emacs 24.3 and later. It also sports various other nifty features: storing and restoring past buffer states in registers, a diff view of the changes that will be made by undoing, and probably more besides.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/undo-tree-hook ()
    (set-frame-width (selected-frame) 20))

  (defun undo-tree-split-side-by-side (original-function &rest args)
    "Split undo-tree side-by-side"
    (let ((split-height-threshold nil)
         (split-width-threshold 0))
      (apply original-function args)))
  
#+end_src

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;;
  ;; Sometimes, when behind a firewall, the undo-tree package triggers elpaca
  ;; to queue up the Queue package which then hangs and fails. This happens
  ;; even if the :unless option is specified in the use-package (only :disabled
  ;; seems to work which isn't what I want). So, we prevent the loading of the
  ;; page altogether.
  ;;
  (when (equal undo-handler 'undo-handler-undo-tree)
    (use-package undo-tree
      :init
      (setq undo-tree-visualizer-timestamps nil
        undo-tree-visualizer-diff t
        undo-tree-enable-undo-in-region t
        ;; 10X bump of the undo limits to avoid issues with premature
        ;; Emacs GC which truncages the undo history very aggresively
        undo-limit 800000
        undo-strong-limit 12000000
        undo-outer-limit 120000000)
      :diminish untree
      :config
      (global-undo-tree-mode)
      (advice-add 'undo-tree-visualize :around #'undo-tree-split-side-by-side)
      (bind-keys :map undo-tree-visualizer-mode-map
        ("RET" . undo-tree-visualizer-quit)
        ("C-g" . undo-tree-visualizer-abort))
      (setq undo-tree-auto-save-history nil)))

#+end_src



* Theme List and Selection

This bit of code contains a list of themes that I like personally and then allows them to be switched between themselves. The index of ~theme-selector~ is what is set in order to access a theme via the ~mrf/load-theme-from-selector()~ function.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;;
  ;; 1. The function `mrf/load-theme-from-selector' is called from the
  ;;    "C-= =" Keybinding (just search for it).
  ;;
  ;; 2. Once the new theme is loaded via the `theme-selector', the previous
  ;;    theme is unloaded (or disabled) the function(s) defined in the
  ;;    `disable-theme-functions' hook are called (defined in the load-theme.el
  ;;    package).
  ;;
  ;; 3. The function `mrf/cycle-theme-selector' is called by the hook. This
  ;;    function increments the theme-selector by 1, cycling the value to 0
  ;;    if beyond the `theme-list' bounds.
  ;;
  (setq-default loaded-theme (nth theme-selector theme-list))
  (add-to-list 'savehist-additional-variables 'loaded-theme)
  (add-to-list 'savehist-additional-variables 'custom-default-font-size)
  (add-to-list 'savehist-additional-variables 'theme-selector)
  (add-to-list 'savehist-additional-variables 'custom-default-mono-font-size)

#+end_src

** Cycle Theme Function

This is the main function that allows cycling (up or down) through the list of themes defined in the ~theme-list~.  This function is normally called by the ~disable-theme-functions~ hook. Before calling this function, set the variable ~theme-cycle-step~ to either a 1 or -1 depending upon which direction in the ~theme-list~ array to select the next element from. The resulting index will cycle to the end or the beginning of the list if the computed index goes beyond element 0 or the length of ~theme-list~. The parameter theme is passed to this function when a theme becomes disabled (via the ~disable-theme~ function) and represents the theme that has become disabled.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/cycle-theme-selector (&rest theme)
    "Cycle the `theme-selector' by 1, resetting to 0 if beyond array bounds."
    (interactive)
    (when (not (eq theme-cycle-step nil))
      (let ((step theme-cycle-step) (result 0))
        (when step
        (setq result (+ step theme-selector))
        (when (< result 0)
          (setq result (- (length theme-list) 1)))
        (when (> result (- (length theme-list) 1))
          (setq result 0)))
        (setq-default theme-selector result))))

  ;; This is used to trigger the cycling of the theme-selector
  ;; It is called when a theme is disabled. The theme is disabled from the
  ;; `mrf/load-theme-from-selector' function.
  (add-hook 'disable-theme-functions #'mrf/cycle-theme-selector)

#+end_src

** Load Theme Function

This function simply loads the theme from the theme-list indexed by the ~theme-selector~ variable. Note the advice for ~load-theme~ that deactivates the current theme before activating the new theme. This is done to reset all the colors, a clean slate, before the new theme is activated.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defvar theme-did-load nil
    "Set to true if the last Theme was loaded.")

  (defun mrf/load-theme-from-selector (&optional step)
    "Load the theme in `theme-list' indexed by `theme-selector'."
    (interactive)
    (setq theme-cycle-step nil)
    (cond
      ((or (eq step nil) (eq step 0)) (setq theme-cycle-step 0))
      ((> step 0) (setq theme-cycle-step 1))
      ((< step 0) (setq theme-cycle-step -1)))
    (when loaded-theme
      (disable-theme (intern loaded-theme)))
    (setq loaded-theme (nth theme-selector theme-list))
    (setq theme-did-load (load-theme (intern loaded-theme) t))
    (when (featurep 'org)
      (mrf/org-font-setup))
    (set-face-foreground 'line-number "SkyBlue4"))

#+end_src

** Theme selection helper functions.

#+begin_src emacs-lisp

  (defun mrf/print-custom-theme-name ()
    "Print the current loaded theme from the `theme-list' on the modeline."
    (interactive)
    (message (format "Custom theme is %S" loaded-theme)))

  ;; Quick Helper Functions
  (defun next-theme ()
    "Go to the next theme in the list."
    (interactive)
    (mrf/load-theme-from-selector 1))

  (defun previous-theme ()
    "Go to the next theme in the list."
    (interactive)
    (mrf/load-theme-from-selector -1))

  (defun which-theme ()
    "Go to the next theme in the list."
    (interactive)
    (mrf/print-custom-theme-name))

  ;; Go to NEXT theme
  (global-set-key (kbd "C-c C-=") 'next-theme)
  ;; Go to PREVIOUS theme
  (global-set-key (kbd "C-c C--") 'previous-theme)
  ;; Print current theme
  (global-set-key (kbd "C-c C-?") 'which-theme)
#+end_src

** Theme Override Values

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/org-theme-override-values ()
    (defface org-block-begin-line
      '((t (:underline "#1D2C39" :foreground "SlateGray" :background "#1D2C39")))
      "Face used for the line delimiting the begin of source blocks.")

    (defface org-block
      '((t (:background "#242635" :extend t :font "Fira Code Retina")))
      "Face used for the source block background.")

    (defface org-block-end-line
      '((t (:overline "#1D2C39" :foreground "SlateGray" :background "#1D2C39")))
      "Face used for the line delimiting the end of source blocks.")

    (defface org-modern-horizontal-rule
      '((t (:strike-through "green" :weight bold)))
      "Face used for the Horizontal like (-----)"))

  ;;; --------------------------------------------------------------------------

  (defun mrf/customize-modus-theme ()
    (when (featurep 'org)
      (mrf/org-font-setup))
    (setq modus-themes-common-palette-overrides
      '((bg-mode-line-active bg-blue-intense)
         (fg-mode-line-active fg-main)
         (border-mode-line-active blue-intense))))

  (add-hook 'elpaca-after-init-hook 'mrf/customize-modus-theme)

  (defun mrf/customize-ef-theme ()
    (defface ef-themes-fixed-pitch
      '((t (:background "#242635" :extend t :font "Courier New")))
      "Face used for the source block background.")
    (when (featurep 'org)
      (mrf/org-font-setup))
    (setq ef-themes-common-palette-override
      '( (bg-mode-line bg-blue-intense)
         (fg-mode-line fg-main)
         (border-mode-line-active blue-intense))))
  ;;(add-hook 'org-load-hook 'mrf/customize-ef-theme)
  (add-hook 'elpaca-after-init-hook 'mrf/customize-ef-theme)

#+end_src

** Color Theming

<<<Color Theming>>> as a curated list of theming packages.
*Note:* If new themes are added in the ~theme-list~ custom variable then they must be included here along with any customizations.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (add-to-list 'custom-theme-load-path (expand-file-name "Themes" custom-docs-dir))

  (mrf/org-theme-override-values)
  (use-package tron-legacy-theme :defer t)
  (use-package ef-themes :init (mrf/customize-ef-theme) :defer t)
  (use-package modus-themes :init (mrf/customize-modus-theme) :defer t)
  (use-package material-theme :defer t)
  (use-package color-theme-modern :defer t)
  (use-package color-theme-sanityinc-tomorrow :defer t)
  ;; Can't defer darktooth since we need the base theme to always load
  (use-package darktooth-theme :ensure t)
  (use-package zenburn-theme :defer t)

#+end_src

** Selected theme
This includes the theme to use in both graphical and non-graphical.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; (add-hook 'emacs-startup-hook #'(mrf/load-theme-from-selector))
  ;; (mrf/load-theme-from-selector)
  ;; For terminal mode we choose Material theme

  (defun mrf/load-terminal-theme ()
    (load-theme (intern default-terminal-theme) t))

  (if (not (display-graphic-p))
    (add-hook 'elpaca-after-init-hook 'mrf/load-terminal-theme)
    ;;else
    (progn
      (if (not elpaca-after-init-time)
        (add-hook 'elpaca-after-init-hook
        (lambda ()
          (unless theme-did-load
            (mrf/load-theme-from-selector))))
        ;; else
        (add-hook 'window-setup-hook
        (lambda ()
          (unless theme-did-load
            (mrf/load-theme-from-selector))))
        )))

#+end_src


* Frame and Font Setup

It's nice to know that Emacs is somewhat working. To help this along, we set the Frame (window size fonts) early in the loading process.

** Define the various font size constants

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; Frame (view) setup including fonts.
  ;; You will most likely need to adjust this font size for your system!

  (setq-default mrf/small-font-size 150)
  (setq-default mrf/small-mono-font-size 150)
  (setq-default mrf/small-variable-font-size 170)

  (setq-default mrf/medium-font-size 170)
  (setq-default mrf/medium-mono-font-size 170)
  (setq-default mrf/medium-variable-font-size 190)

  (setq-default mrf/large-font-size 190)
  (setq-default mrf/large-mono-font-size 190)
  (setq-default mrf/large-variable-font-size 210)

  (setq-default mrf/x-large-font-size 220)
  (setq-default mrf/x-large-mono-font-size 220)
  (setq-default mrf/x-large-variable-font-size 240)

  ;; (setq-default custom-default-font-size mrf/medium-font-size)
  (setq-default mrf/default-variable-font-size (+ custom-default-font-size 20))
  ;; (setq-default mrf/set-frame-maximized t)  ;; or f

  ;; Make frame transparency overridable
  ;; (setq-default mrf/frame-transparency '(90 . 90))

  (setq frame-resize-pixelwise t)

#+end_src

** Functions to set the frame size
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; Functions to set the frame size

  (defun mrf/frame-recenter (&optional frame)
    "Center FRAME on the screen.  FRAME can be a frame name, a terminal name,
    or a frame.  If FRAME is omitted or nil, use currently selected frame."
    (interactive)
    ;; (set-frame-size (selected-frame) 250 120)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
      (progn
        (let ((width (nth 3 (assq 'geometry (car (display-monitor-attributes-list)))))
               (height (nth 4 (assq 'geometry (car (display-monitor-attributes-list))))))
          (cond (( > width 3000) (mrf/update-large-display))
            (( > width 2000) (mrf/update-built-in-display))
            (t (mrf/set-frame-alpha-maximized)))
          ))
      ))

  (defun mrf/update-large-display ()
    (modify-frame-parameters
      frame '((user-position . t)
               (top . 0.0)
               (left . 0.70)
               (width . (text-pixels . 2800))
               (height . (text-pixels . 1650))) ;; 1800
      ))

  (defun mrf/update-built-in-display ()
    (modify-frame-parameters
      frame '((user-position . t)
               (top . 0.0)
               (left . 0.90)
               (width . (text-pixels . 1800))
               (height . (text-pixels . 1170)));; 1329
      ))


  ;; Set frame transparency
  (defun mrf/set-frame-alpha-maximized ()
    "Function to set the alpha and also maximize the frame."
    ;; (set-frame-parameter (selected-frame) 'alpha mrf/frame-transparency)
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

  ;; default window width and height
  (defun mrf/custom-set-frame-size ()
    "Simple function to set the default frame width/height."
    ;; (set-frame-parameter (selected-frame) 'alpha mrf/frame-transparency)
    (setq swidth (nth 3 (assq 'geometry (car (display-monitor-attributes-list)))))
    (setq sheight (nth 4 (assq 'geometry (car (display-monitor-attributes-list)))))

    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (unless enable-frameset-restore (mrf/frame-recenter))
    )

#+end_src

** Default fonts and sizes

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; Default fonts

  (defun mrf/update-face-attribute ()
    "Set the font faces."
    ;; ====================================
    (set-face-attribute 'default nil
      :family default-font-family
      :height custom-default-font-size
      :weight 'medium)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil
      :family mono-spaced-font-family
      :height custom-default-mono-font-size
      :weight 'medium)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil
      :family variable-pitch-font-family
      :height (+ custom-default-font-size 20)
      :weight 'medium))

  ;; This is done so that the Emacs window is sized early in the init phase along with the default font size.
  ;; Startup works without this but it's nice to see the window expand early...
  (add-hook 'emacs-startup-hook
    (lambda ()
      (when (display-graphic-p)
        (mrf/update-face-attribute)
        (unless (daemonp)
  	(if enable-frameset-restore
            (mrf/restore-desktop-frameset)
  	  (mrf/frame-recenter)))
        )))

#+end_src

** Track Slected Front Size

The functions in the list =after-setting-font-hook= are called whenever the frame's font changes. In order to save this value, we capture it and store it in the =custom-default-font-size= custom variable. This variable is saved whenver Emacs exists. Then, when Emacs is started again, the default and fixed-pitch font height values are set to =custom-default-font-size=. The variable pitch font is computed as ~(+ custom-default-font-size 20)~

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/default-font-height-change ()
    (setq-default custom-default-font-size (face-attribute 'default :height))
    (mrf/update-face-attribute)
    (unless enable-frameset-restore (mrf/frame-recenter)))

  (add-hook 'after-setting-font-hook 'mrf/default-font-height-change)

#+end_src

** Helper to up the font size for a higher-res monitor.
*** Frame font selection
This little function toggles between a larger font size and the default font size.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; Frame font selection

  (defvar mrf/font-size-slot 1)

  (defun mrf/update-font-size ()
    (cond
      ((equal mrf/font-size-slot 3)
        (setq custom-default-font-size mrf/x-large-font-size
              custom-default-mono-font-size mrf/x-large-mono-font-size
              mrf/default-variable-font-size (+ custom-default-font-size 20)
              mrf/font-size-slot 2)
        (mrf/update-face-attribute))
      ((equal mrf/font-size-slot 2)
        (setq custom-default-font-size mrf/large-font-size
              custom-default-mono-font-size mrf/large-mono-font-size
              mrf/default-variable-font-size (+ custom-default-font-size 20)
              mrf/font-size-slot 1)
        (mrf/update-face-attribute))
      ((equal mrf/font-size-slot 1)
        (setq custom-default-font-size mrf/medium-font-size
              custom-default-mono-font-size mrf/medium-mono-font-size
              mrf/default-variable-font-size (+ custom-default-font-size 20)
              mrf/font-size-slot 0)
        (mrf/update-face-attribute))
      ((equal mrf/font-size-slot 0)
        (setq custom-default-font-size mrf/small-font-size
              custom-default-mono-font-size mrf/small-mono-font-size
              mrf/default-variable-font-size (+ custom-default-font-size 20)
              mrf/font-size-slot 3)
        (mrf/update-face-attribute))))

#+end_src

**** Resolution Key Bindings
Some key kindings to switch to different screen resolutions.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; Some alternate keys below....

  (bind-keys ("C-c 1". use-small-display-font)
    ("C-c 2". use-medium-display-font)
    ("C-c 3". use-large-display-font)
    ("C-c 4". use-x-large-display-font))

  (let ((map global-map))
    (define-key map (kbd "C-S-c 1")
      (lambda () (interactive) (use-small-display-font t)))
    (define-key map (kbd "C-S-c 2")
      (lambda () (interactive) (use-medium-display-font t)))
    (define-key map (kbd "C-S-c 3")
      (lambda () (interactive) (use-large-display-font t)))
    (define-key map (kbd "C-S-c 4")
      (lambda () (interactive) (use-x-large-display-font t))))

#+end_src

**** Frame support functions
These functions are used to configure the main frame font size. Based upon a monitor's size, it may be necessary to make the font larger or smaller.

#+begin_src emacs-lisp
    ;;; --------------------------------------------------------------------------
  ;; Frame support functions

  (defun mrf/set-frame-font (slot)
    (setq mrf/font-size-slot slot)
    (mrf/update-font-size)
    (unless enable-frameset-restore (mrf/frame-recenter)))

  (defun mrf/should-recenter (&optional force-recenter)
    (if force-recenter
      (mrf/frame-recenter)
      ;;else
      (unless enable-frameset-restore (mrf/frame-recenter))))

  ;;; --------------------------------------------------------------------------

  (defun use-small-display-font (&optional force-recenter)
    (interactive)
    (mrf/set-frame-font 0)
    (mrf/should-recenter force-recenter))


  (defun use-medium-display-font (&optional force-recenter)
    (interactive)
    (mrf/set-frame-font 1)
    (mrf/should-recenter force-recenter))


  (defun use-large-display-font (&optional force-recenter)
    (interactive)
    (mrf/set-frame-font 2)
    (mrf/should-recenter force-recenter))


  (defun use-x-large-display-font (&optional force-recenter)
    (interactive)
    (mrf/set-frame-font 3)
    (mrf/should-recenter force-recenter))


  ;; This is done so that the Emacs window is sized early in the init phase along with the default font size.
  ;; Startup works without this but it's nice to see the window expand early...
  (when (display-graphic-p)
    (add-hook 'elpaca-after-init-hook
      (lambda ()
        (progn
        (mrf/update-face-attribute)
        (unless (daemonp)
          (unless enable-frameset-restore (mrf/frame-recenter))))
        )))

#+end_src

** Window, mode-line, +more padding

This package provides a global minor mode to increase the spacing/padding of Emacs windows and frames. The idea is to make editing and reading feel more comfortable.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package spacious-padding
    :custom
    (spacious-padding-widths
      '( :internal-border-width 10
         :header-line-width 4
         :mode-line-width 6
         :tab-width 4
         :right-divider-width 10
         :scroll-bar-width 8
         :fringe-width 8))
    :config
    (spacious-padding-mode t))

  ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
  ;; is very flexible and provides several examples.
  ;; (setq spacious-padding-subtle-mode-line
  ;;       `( :mode-line-active 'default
  ;;          :mode-line-inactive vertical-border))
#+end_src


* Org Mode

Org Mode is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package [[https://orgmode.org/][Orgmode]].

The =mrf/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

*NOTE:* Most of the code below has been taken from the [[https://systemcrafters.net][System Crafters]] site run by David Wilson. Please visit that site for lots of great stuff!

** Font setup

This function sets up the fonts faces that are used within org-mode.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package faces :ensure nil)
  (defun mrf/org-font-setup ()
    "Setup org mode fonts."

    (font-lock-add-keywords
      'org-mode
      '(("^ *\\([-]\\) "
          (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    
    (set-face-attribute 'org-block nil
      :foreground 'unspecified
      :inherit 'fixed-pitch
      :font mono-spaced-font-family
      :height custom-default-mono-font-size)
    
    (set-face-attribute 'org-formula nil
      :inherit 'fixed-pitch)
    
    (set-face-attribute 'org-code nil
      :foreground 'unspecified
      :font mono-spaced-font-family
      :height custom-default-mono-font-size
      :inherit '(shadow fixed-pitch))

    (set-face-attribute 'org-table nil
      :foreground 'unspecified
      :font mono-spaced-font-family
      :height custom-default-mono-font-size
      :inherit '(shadow fixed-pitch))
    
    (set-face-attribute 'org-verbatim nil
      :foreground 'unspecified
      :font mono-spaced-font-family
      :height custom-default-mono-font-size
      :inherit '(shadow fixed-pitch))
    
    (set-face-attribute 'org-special-keyword nil
      :inherit '(font-lock-comment-face fixed-pitch))
    
    (set-face-attribute 'org-meta-line nil
      :inherit '(font-lock-comment-face fixed-pitch))
    
    (set-face-attribute 'org-checkbox nil
      :foreground 'unspecified
      :font mono-spaced-font-family
      :height custom-default-mono-font-size
      :inherit 'fixed-pitch)
    
    (set-face-attribute 'line-number nil
      :foreground 'unspecified
      :font mono-spaced-font-family
      :height custom-default-mono-font-size
      :inherit 'fixed-pitch)
    
    (set-face-attribute 'line-number-current-line nil
      :foreground 'unspecified
      :font mono-spaced-font-family
      :height custom-default-mono-font-size
      :inherit 'fixed-pitch)

    (dolist (face '((org-level-1 . 1.50)
                     (org-level-2 . 1.25)
                     (org-level-3 . 1.15)
                     (org-level-4 . 1.05)
                     (org-level-5 . 0.95)
                     (org-level-6 . 0.90)
                     (org-level-7 . 0.90)
                     (org-level-8 . 0.90)))
      (set-face-attribute (car face) nil :font "Helvetica Neue" :weight 'regular
        :height (cdr face))))
#+end_src

** Setup

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp
  ;; -----------------------------------------------------------------

  (defun mrf/org-mode-visual-fill ()
    (interactive)
    (setq visual-fill-column-width custom-org-fill-column
      visual-fill-column-center-text enable-org-fill-column-centering)
    (visual-fill-column-mode 1))

  (defun mrf/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (mrf/org-mode-visual-fill)
    (font-lock-add-keywords nil
      '(("^_\\{5,\\}"    0 '(:foreground "green" :weight bold))))
    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    ;; (use-package org-habit)
    ;; (add-to-list 'org-modules 'org-habit)
    ;; (setq org-habit-graph-column 60)
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
         (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)"
           "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
         ("Tasks.org" :maxlevel . 1))))

#+end_src

**** Function to setup the agenda

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/org-setup-agenda ()
    (setq org-agenda-custom-commands
      '(("d" "Dashboard"
          ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
              ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

         ("n" "Next Tasks"
           ((todo "NEXT"
              ((org-agenda-overriding-header "Next Tasks")))))

         ("W" "Work Tasks" tags-todo "+work-email")

         ;; Low-effort next actions
         ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
             (org-agenda-max-todos 20)
             (org-agenda-files org-agenda-files)))

         ("w" "Workflow Status"
           ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
                (org-agenda-files org-agenda-files)))
             (todo "REVIEW"
               ((org-agenda-overriding-header "In Review")
                 (org-agenda-files org-agenda-files)))
             (todo "PLAN"
               ((org-agenda-overriding-header "In Planning")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
             (todo "BACKLOG"
               ((org-agenda-overriding-header "Project Backlog")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
             (todo "READY"
               ((org-agenda-overriding-header "Ready for Work")
                 (org-agenda-files org-agenda-files)))
             (todo "ACTIVE"
               ((org-agenda-overriding-header "Active Projects")
                 (org-agenda-files org-agenda-files)))
             (todo "COMPLETED"
               ((org-agenda-overriding-header "Completed Projects")
                 (org-agenda-files org-agenda-files)))
             (todo "CANC"
               ((org-agenda-overriding-header "Cancelled Projects")
                 (org-agenda-files org-agenda-files)))))))
    ) ;; mrf/org-setup-agenda

#+end_src

**** The capture-templates function

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/org-setup-capture-templates ()
    (setq org-capture-templates
      `(("t" "Tasks / Projects")
         ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
         "* TODO %?\n  %U\n  %a\n        %i" :empty-lines 1)

         ("j" "Journal Entries")
         ("jj" "Journal" entry
         (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
         "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
         ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
         :clock-in :clock-resume
         :empty-lines 1)
         ("jm" "Meeting" entry
         (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1)

         ("w" "Workflows")
         ("we" "Checking Email" entry (file+olp+datetree
                                      "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
         "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

         ("m" "Metrics Capture")
         ("mw" "Weight" table-line (file+headline
                                   "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org"
                                   "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t))))

#+end_src

** The main 'Org' package
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package org
    :preface
    (mrf/org-theme-override-values)
    :commands (org-capture org-agenda)
    :defer t
    :hook (org-mode . mrf/org-mode-setup)
    :custom
    (org-startup-indented t)
    (org-pretty-entities t)
    (org-use-sub-superscripts "{}")
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-image-actual-width '(300))
    :bind (:map org-mode-map
            ("C-c e" . org-edit-src-code))
    :mode ("\\.org\\'" . org-mode)
    :config
    (setq org-hide-emphasis-markers nil)
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (setq org-tag-alist
      '((:startgroup)
         ;; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))
    ;; Configure custom agenda views
    (mrf/org-setup-agenda)
    (mrf/org-setup-capture-templates)
    (mrf/org-font-setup)
    (yas-global-mode t)
    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj"))))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (26172 1876 296393 0) :use-package-secs (0 0 907 0) :preface (26171 64968 44297 0) :init (26171 64968 44286 0) :init-secs (0 0 28 0) :preface-secs (0 0 265 0) :config (26171 64988 735976 0) :config-secs (0 0 361702 0)))

** Org Modern

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package org-modern
    :when (display-graphic-p)
    :after org
    :hook (org-mode . org-modern-mode)
    :config
    ;; Add frame borders and window dividers
    (modify-all-frames-parameters
      '((right-divider-width . 40)
         (internal-border-width . 40)))
    (dolist (face '(window-divider
                     window-divider-first-pixel
                     window-divider-last-pixel))
      (face-spec-reset-face face)
      (set-face-foreground face (face-attribute 'default :background nil)))
    (set-face-background 'fringe (face-attribute 'default :background nil))
    (setq
      ;; Edit settings
      org-auto-align-tags nil
      org-tags-column 0
      org-catch-invisible-edits 'show-and-error
      org-special-ctrl-a/e t
      org-insert-heading-respect-content t

      ;; Org styling, hide markup etc.
      org-hide-emphasis-markers nil
      org-pretty-entities t
      org-ellipsis "…"

      ;; Agenda styling
      org-agenda-tags-column 0
      org-agenda-block-separator ?─
      org-agenda-time-grid
      '((daily today require-timed)
         (800 1000 1200 1400 1600 1800 2000)
         " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
      org-agenda-current-time-string
      "◀── now ─────────────────────────────────────────────────")
    (global-org-modern-mode))

#+end_src

** Better Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package org-superstar
    :after org
    :custom
    (org-superstar-headline-bullets-list '("✪" "✫" "✦" "✧" "✸" "✺"))
    :hook (org-mode . org-superstar-mode))

#+end_src

** Export Code
To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][Babel]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (with-eval-after-load 'org
    (org-babel-do-load-languages
      'org-babel-load-languages
      (seq-filter
        (lambda (pair)
  	(locate-library (concat "ob-" (symbol-name (car pair)))))
        '((emacs-lisp . t)
  	 (ditaa . t)
  	 (dot . t)
  	 (emacs-lisp . t)
  	 (gnuplot . t)
  	 (haskell . nil)
  	 (latex . t)
  	 (ledger . t)
  	 (ocaml . nil)
  	 (octave . t)
  	 (plantuml . t)
  	 (python . t)
  	 (ruby . t)
  	 (screen . nil)
  	 (sh . t) ;; obsolete
  	 (shell . t)
  	 (sql . t)
  	 (sqlite . t))))
    (push '("conf-unix" . conf-unix) org-src-lang-modes))
  
#+end_src

** Structure Templates
Org Mode's structure templates feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.  You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language as it is known by Org Babel.

This snippet adds a hook to =org-mode= buffers so that =mrf/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Markdown support
While there is standard markdown support built into =org-mode=, this additional markdown package can also be used.
*Disabled for now. Plus there is a large starup time.*
#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------

  (use-package ox-gfm
    :after org)

#+end_src

** Org-Roam
Org Mode is known to be a great tool not just for writing and personal notes but also TODO lists, project planning, time tracking, and more. Once you start to become really invested in Org Mode you’ll eventually have to come up with a system for managing your Org files so that it’s easy to store and find the information you need.

Org Roam is an extension to Org Mode which solves a couple of the biggest problems that I’ve personally had when using Org for personal notes:

- How many Org files do I need?
- How do I decide where to put things in my Org files?

Org Roam solves these problems by making it easy to create topic-focused Org Files and link them together so that you can treat the information as nodes in a network rather than as hierarchical documents. You can think of it like a personal wiki!

*** Some required pacakages 

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  (use-package emacsql :demand t :ensure t :after org)
  (use-package emacsql-sqlite :demand t :ensure t :after org)
   
#+end_src

*** Org Agenda from Roam Notes
One of the most useful features of Org Mode is the agenda view. You can actually use your Org Roam notes as the source for this view!

Typically you won’t want to pull in all of your Org Roam notes, so we’ll only use the notes with a specific tag like Project.

Here is a snippet that will find all the notes with a specific tag and then set your org-agenda-list with the corresponding note files.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; The buffer you put this code in must have lexical-binding set to t!
  ;; See the final configuration at the end for more details.

  (defun mrf/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun mrf/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
      (seq-filter
        (mrf/org-roam-filter-by-tag tag-name)
        (org-roam-node-list))))

  (defun mrf/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (mrf/org-roam-list-notes-by-tag "Project")))

  ;; Build the agenda list the first time for the session
#+end_src

*** Selecting from a list of notes
The org-roam-node-find function gives us the ability to filter the list of notes that get displayed for selection.

We can define our own function that shows a selection list for notes that have a specific tag like Project which we talked about before. This can be useful to set up a keybinding to quickly select from a specific set of notes!

One added benefit is that we can override the set of capture templates that get used when a new note gets created.

This means that we can automatically create a new note with our project capture template if the note doesn’t already exist!

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'mrf/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun mrf/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'mrf/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
      nil
      nil
      (mrf/org-roam-filter-by-tag "Project")
      :templates
      '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
        :unnarrowed t))))

  ;; (global-set-key (kbd "C-c n p") #'mrf/org-roam-find-project)
  
#+end_src

*** Keep and inbox of notes and tasks
If you want to quickly capture new notes and tasks with a single keybinding into a place that you can review later, we can use org-roam-capture- to capture to a single-specific file like Inbox.org!

Even though this file won’t have the timestamped filename, it will still be treated as a node in your Org Roam notes.
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
      :templates '(("i" "inbox" plain "* %?"
                   :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))
  
#+end_src

*** Insert a node immediately

#+begin_src emacs-lisp

  (defun mrf/org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
         (org-roam-capture-templates
           (list (append (car org-roam-capture-templates)
                   '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src

*** Capture a task
If you’ve set up project note files like we mentioned earlier, you can set up a capture template that allows you to quickly capture tasks for any project.

Much like the example before, we can either select a project that exists or automatically create a project note when it doesn’t exist yet.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'mrf/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read nil
                             (mrf/org-roam-filter-by-tag "Project"))
      :templates '(("p" "project" plain "** TODO %?"
                   :if-new
                   (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                     "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                     ("Tasks"))))))
#+end_src

*** Todo
The following snippet sets up a hook for all Org task state changes and then copies the completed (DONE) entry to today’s note file

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/org-roam-copy-todo-to-today ()
    (interactive)
    (let ((org-refile-keep t) ;; Set this to nil to delete the original!
         (org-roam-dailies-capture-templates
           '(("t" "tasks" entry "%?"
               :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
         (org-after-refile-insert-hook #'save-buffer)
         today-file pos)
      (save-window-excursion
        (org-roam-dailies--capture (current-time) t)
        (setq today-file (buffer-file-name))
        (setq pos (point)))

      ;; Only refile if the target file is different than the current file
      (unless (equal (file-truename today-file)
              (file-truename (buffer-file-name)))
        (org-refile nil nil (list "Tasks" today-file nil pos)))))

#+end_src

*** Table-of-contents
#+begin_src emacs-lisp

  (use-package toc-org
    :after org markdown-mode
    :hook
    (org-mode . toc-org-mode)
    (markdown-mode-hook . toc-org-mode)
    :bind (:map markdown-mode-map
          ("C-c C-o" . toc-org-markdown-follow-thing-at-point)))

#+end_src

*** Main Org-roam Configuration

#+begin_src emacs-lisp

  (use-package org-roam
    ;; :demand t  ;; Ensure org-roam is loaded by default
    :defer t
    :init
    (setq org-roam-v2-ack t)
    (make-directory (expand-file-name "org-roam-notes" user-emacs-directory) t)
    :ensure t
    :commands (org-roam-node-find org-roam-node-insert org-roam-capture-templates)
    ;; :after org
    :custom
    (org-roam-directory (expand-file-name "org-roam-notes" user-emacs-directory))
    (org-roam-completion-everywhere t)
    :bind ( ("C-c n l" . org-roam-buffer-toggle)
          ("C-c n f" . org-roam-node-find)
          ("C-c n i" . org-roam-node-insert)
          ("C-c n I" . mrf/org-roam-node-insert-immediate)
          ("C-c n p" . mrf/org-roam-find-project)
          ("C-c n t" . mrf/org-roam-capture-task)
          ("C-c n b" . mrf/org-roam-capture-inbox)
          :map org-mode-map
          ("C-M-i" . completion-at-point)
          :map org-roam-dailies-map
          ("Y" . org-roam-dailies-capture-yesterday)
          ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (mrf/org-roam-refresh-agenda-list)
    (add-to-list 'org-after-todo-state-change-hook
      (lambda ()
        (when (equal org-state "DONE")
        (mrf/org-roam-copy-todo-to-today))))
    (org-roam-db-autosync-mode))

#+end_src

** Org-transclusion

Org-transclusion lets you insert a copy of text content via a file link or ID link within an Org file. It lets you have the same content present in different buffers at the same time without copy-and-pasting it. Edit the source of the content, and you can refresh the transcluded copies to the up-to-date state. Org-transclusion keeps your files clear of the transcluded copies, leaving only the links to the original content.

*This is experimental for me and will only enable it when testing.*

#+begin_src emacs-lisp :tangle no

  (use-package org-transclusion
    :after org
    :config
    (define-key global-map (kbd "<f12>") #'org-transclusion-add)
    (define-key global-map (kbd "C-n t") #'org-transclusion-mode))

#+end_src


* Denote

Denote aims to be a simple-to-use, focused-in-scope, and effective note-taking and file-naming tool for Emacs.

Denote is based on the idea that files should follow a predictable and descriptive file-naming scheme. The file name must offer a clear indication of what the contents are about, without reference to any other metadata. Denote basically streamlines the creation of such files or file names while providing facilities to link between them (where those files are editable).

Denote’s file-naming scheme is not limited to “notes”. It can be used for all types of file, including those that are not editable in Emacs, such as videos. Naming files in a consistent way makes their filtering and retrieval considerably easier. Denote provides relevant facilities to rename files, regardless of file type.

** Denote Keymap

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/define-denote-keymap ()
    (interactive)
    ;; Denote DOES NOT define any key bindings.  This is for the user to
    ;; decide.
    ;; Just in case, unbind some org-roam keys so it doesn't get loaded
    ;; unintentionally. These are some that show up in the which-key menu:
    (unbind-key "C-c n f")
    (unbind-key "C-c n l")
    (unbind-key "C-c n p")
    (let ((map global-map))
      (define-key map (kbd "C-c n n") #'denote)
      (define-key map (kbd "C-c n c") #'denote-region) ; "contents" mnemonic
      (define-key map (kbd "C-c n N") #'denote-type)
      (define-key map (kbd "C-c n o") #'denote-open-or-create)
      (define-key map (kbd "C-c n d") #'denote-date)
      (define-key map (kbd "C-c n z") #'denote-signature) ; "zettelkasten" mnemonic
      (define-key map (kbd "C-c n s") #'denote-subdirectory)
      (define-key map (kbd "C-c n t") #'denote-template)
      ;; If you intend to use Denote with a variety of file types, it is
      ;; easier to bind the link-related commands to the `global-map', as
      ;; shown here.  Otherwise follow the same pattern for `org-mode-map',
      ;; `markdown-mode-map', and/or `text-mode-map'.
      (define-key map (kbd "C-c n i") #'denote-link) ; "insert" mnemonic
      (define-key map (kbd "C-c n I") #'denote-add-links)
      (define-key map (kbd "C-c n b") #'denote-backlinks)
      (define-key map (kbd "C-c n f f") #'denote-find-link)
      (define-key map (kbd "C-c n f b") #'denote-find-backlink)
      ;; Note that `denote-rename-file' can work from any context, not just
      ;; Dired bufffers.  That is why we bind it here to the `global-map'.
      (define-key map (kbd "C-c n r") #'denote-rename-file)
      (define-key map (kbd "C-c n R") #'denote-rename-file-using-front-matter))

    ;; Key bindings specifically for Dired.
    (let ((map dired-mode-map))
      (define-key map (kbd "C-c C-d C-i") #'denote-link-dired-marked-notes)
      (define-key map (kbd "C-c C-d C-r") #'denote-dired-rename-files)
      (define-key map (kbd "C-c C-d C-k") #'denote-dired-rename-marked-files-with-keywords)
      (define-key map (kbd "C-c C-d C-R") #'denote-dired-rename-marked-files-using-front-matter))

    (if (mrf/minor-mode-is-active 'which-key-mode)
      (which-key-add-key-based-replacements "C-c n f" "denote-find")))

#+end_src

** Denote Configuration

#+begin_src  emacs-lisp
  ;;; --------------------------------------------------------------------------
  
  (use-package denote
    :custom
    (denote-directory (expand-file-name "notes" user-emacs-directory))
    (denote-save-buffers nil)
    ;; (denote-known-keywords '("emacs" "philosophy" "politics" "economics"))
    (denote-infer-keywords t)
    (denote-sort-keywords t)
    (denote-file-type nil) ; Org is the default, set others here
    (denote-prompts '(title keywords))
    (denote-excluded-directories-regexp nil)
    (denote-excluded-keywords-regexp nil)
    (denote-rename-confirmations '(rewrite-front-matter modify-file-name))
    (denote-date-prompt-use-org-read-date t)
    (denote-date-format nil) ; read doc string
    (denote-backlinks-show-context t)
    (denote-dired-directories
      (list denote-directory
        (thread-last denote-directory (expand-file-name "attachments"))
        (expand-file-name "books" user-emacs-directory)))
    :config
    (add-hook 'find-file-hook #'denote-link-buttonize-buffer)
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    (denote-rename-buffer-mode 1)

    (mrf/define-denote-keymap) ;; Define the keymap for Denote.

    (with-eval-after-load 'org-capture
      (setq denote-org-capture-specifiers "%l\n%i\n%?")
      (add-to-list 'org-capture-templates
        '("n" "New note (with denote.el)" plain
           (file denote-last-path)
           #'denote-org-capture
           :no-save t
           :immediate-finish nil
           :kill-buffer t
           :jump-to-captured t)))

    (add-hook 'context-menu-functions #'denote-context-menu))

#+end_src


* Treemacs
<<<Treemacs>>> is a file and project explorer similar to NeoTree or vim’s NerdTree, but largely inspired by the Project Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration, while also possessing basic file management utilities.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Treemacs

  (use-package treemacs
    :after (:all winum ace-window)
    :bind (:map global-map
            ("M-0"         . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t t"   . treemacs)
            ("C-x t d"   . treemacs-select-directory)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag))
    :config
    (setq treemacs-collapse-dirs                  (if treemacs-python-executable 3 0)
      treemacs-deferred-git-apply-delay  0.5
      treemacs-directory-name-transformer        #'identity
      treemacs-display-in-side-window            t
      treemacs-eldoc-display                     'simple
      treemacs-file-event-delay          2000
      treemacs-file-extension-regex              treemacs-last-period-regex-value
      treemacs-file-follow-delay                 0.2
      treemacs-file-name-transformer             #'identity
      treemacs-follow-after-init                 t
      treemacs-expand-after-init                 t
      treemacs-find-workspace-method             'find-for-file-or-pick-first
      treemacs-git-command-pipe          ""
      treemacs-goto-tag-strategy                 'refetch-index
      treemacs-header-scroll-indicators  '(nil . "^^^^^^")
      treemacs-hide-dot-git-directory            t
      treemacs-indentation                       2
      treemacs-indentation-string                " "
      treemacs-is-never-other-window             nil
      treemacs-max-git-entries           5000
      treemacs-missing-project-action            'ask
      treemacs-move-forward-on-expand            nil
      treemacs-no-png-images                     nil
      treemacs-no-delete-other-windows   t
      treemacs-project-follow-cleanup            nil
      treemacs-persist-file                      (expand-file-name
                                                     ".cache/treemacs-persist"
                                                     user-emacs-directory)
      treemacs-position                  'left
      treemacs-read-string-input                 'from-child-frame
      treemacs-recenter-distance                 0.1
      treemacs-recenter-after-file-follow        nil
      treemacs-recenter-after-tag-follow         nil
      treemacs-recenter-after-project-jump       'always
      treemacs-recenter-after-project-expand     'on-distance
      treemacs-litter-directories                '("/node_modules"
                                              "/.venv"
                                              "/.cask"
                                              "/__pycache__")
      treemacs-project-follow-into-home  nil
      treemacs-show-cursor                       nil
      treemacs-show-hidden-files                 t
      treemacs-silent-filewatch          nil
      treemacs-silent-refresh                    nil
      treemacs-sorting                   'alphabetic-asc
      treemacs-select-when-already-in-treemacs 'move-back
      treemacs-space-between-root-nodes  t
      treemacs-tag-follow-cleanup                t
      treemacs-tag-follow-delay          1.5
      treemacs-text-scale                        nil
      treemacs-user-mode-line-format             nil
      treemacs-user-header-line-format   nil
      treemacs-wide-toggle-width                 70
      treemacs-width                             38
      treemacs-width-increment           1
      treemacs-width-is-initially-locked         t
      treemacs-workspace-switch-cleanup  nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))
    (pcase (cons (not (null (executable-find "git")))
             (not (null treemacs-python-executable)))
      (`(t . t)
        (treemacs-git-mode 'deferred))
      (`(t . _)
        (treemacs-git-mode 'simple)))
    (treemacs-hide-gitignored-files-mode nil))

#+end_src

** Treemacs Projectile

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package treemacs-projectile
    :when (equal custom-project-handler 'custom-project-projectile)
    :after treemacs projectile)

#+end_src

** Treemacs dired
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package treemacs-icons-dired
    :after treemacs
    :hook (dired-mode . treemacs-icons-dired-enable-once))

#+end_src

** Treemacs Persp
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; (use-package treemacs-perspective
  ;;    :disabled
  ;;    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    ;;:ensure (:files ("src/extra/treemacs-persp.el" "treemacs-persp-pkg.el"):host github :repo "Alexander-Miller/treemacs")
    :after (:any treemacs persp-mode) ;;or perspective vs. persp-mode
    :config (treemacs-set-scope-type 'Perspectives))

#+end_src

** Treemacs tab-bar

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after treemacs
    :config (treemacs-set-scope-type 'Tabs))

#+end_src

** Treemacs all-the-icons

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package treemacs-all-the-icons
    :after treemacs
    :if (display-graphic-p))

#+end_src


* Dashboard
<<<Dashboard>>> is an extensible Emacs startup screen showing you what’s most important.
**** Value of dashboard-startup-banner can be:
***** =nil= to display no banner
***** ='official= which displays the official emacs logo
***** ='logo= which displays an alternative emacs logo
***** =1, 2 or 3= which displays one of the text banners
***** ~"path/to/your/image.gif"~, ~"path/to/your/image.png"~ or ~"path/to/your/text.txt"~  which displays whatever gif/image/text you would prefer
***** a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

** Dashboard Setup
#+begin_src emacs-lisp
    ;;; --------------------------------------------------------------------------

  (use-package dashboard
    :custom
    (dashboard-items '(   (recents . 15)
                        (bookmarks . 10)
                        (projects . 10)))
    (dashboard-center-content t)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-footer-messages '("Greetings Program!"))
    (dashboard-banner-logo-title "Welcome to Emacs!")
    (dashboard-startup-banner 'logo)
    :bind ("C-c d" . dashboard-open)
    :config
    ;; (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook))

#+end_src



* Integrated Development Environments
The following are configured for Python development and provide an IDE type experience.  It's worth noting that Eglot/LSP can be configured for other languages. The others are Python specific. Use the =configure= system to select which one is used (=Mrf Custom Selection=).
*** Features
- context-sensitive code completion
- jump to definitions
- find references
- view documentation
- virtual environment
- eldoc mode

** EGlot

<<<Eglot>>> is the Emacs client for the Language Server Protocol (LSP). Eglot provides infrastructure and a set of commands for enriching the source code editing capabilities of Emacs via LSP. Eglot itself is completely language-agnostic, but it can support any programming language for which there is a language server and an Emacs major mode.

#+begin_src emacs-lisp
    ;;; --------------------------------------------------------------------------
    ;;; Emacs Polyglot is the Emacs LSP client that stays out of your way:

  (defvar mrf/clangd-path (executable-find "clangd")
    "Clangd executable path.")

  (defun mrf/projectile-proj-find-function (dir)
    "Find the project `DIR' function for Projectile.
    Thanks @wyuenho on GitHub"
    (let ((root (projectile-project-root dir)))
      (and root (cons 'transient root))))

  (use-package track-changes
    :defer t
    :config
    (unless theme-did-load
      (mrf/load-theme-from-selector)))

#+end_src

*** JSON-RPC

The JSON-RPC protocol is used to communicate with many different types of server. This is required for the DAPE and DAP Debug Adapters as well as Eglot.

#+begin_src emacs-lisp
  ;;; ------------------------------------------------------------------------
  (use-package jsonrpc
    :config
    ;; For some odd reason, it is possible that jsonrpc will try to load a
    ;; theme. (jsonrpc/lisp/custom.el:1362). If our theme hasn't been loaded
    ;; yet, go ahead and try. This could prevent a startup without the theme
    ;; properly loaded.
    (unless theme-did-load
      (mrf/load-theme-from-selector)))

#+end_src

*** Eglot Setup

#+begin_src emacs-lisp

  (use-package eglot
    :when (equal custom-ide 'custom-ide-eglot)
    ;; :ensure (:repo "https://github.com/emacs-mirror/emacs" :local-repo "eglot" :branch "master"
    ;;            :files ("lisp/progmodes/eglot.el" "doc/emacs/doclicense.texi" "doc/emacs/docstyle.texi"
    ;;                      "doc/misc/eglot.texi" "etc/EGLOT-NEWS" (:exclude ".git")))
    :after eldoc track-changes company
    :after (:any (:all company which-key eldoc) (:any jsonrpc python))
    :init
    (setq company-backends
      (cons 'company-capf
        (remove 'company-capf company-backends)))
    :hook
    (lisp-mode . eglot-ensure)
    (python-mode . eglot-ensure)
    (go-mode . eglot-ensure)
    (rust-mode . eglot-ensure)
    ;; (c-mode . eglot-ensure)
    ;; (c++-mode . eglot-ensure)
    ;; (prog-mode . eglot-ensure)
    :config
    (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
    (which-key-add-key-based-replacements "C-c g r" "find-symbol-reference")
    (which-key-add-key-based-replacements "C-c g o" "find-defitions-other-window")
    (which-key-add-key-based-replacements "C-c g g" "find-defitions")
    (which-key-add-key-based-replacements "C-c g ?" "eldoc-definition")
    ;; Eldoc/Eglot will try to load/unload a theme which can cause issues with our
    ;; theme loading mechanism. Our theme could fail to load because of this.  So,
    ;; to get our themes loading properly, load it here if not already loaded.
    (unless theme-did-load
      (mrf/load-theme-from-selector))
    (add-to-list 'eglot-stay-out-of 'flymake)
    (if (featurep 'company) ;; Company should be loaded.
      (bind-keys :map eglot-mode-map
        ("<tab>" . company-indent-or-complete-common))
      (message "Eglot: Company was expected to be loaded but wasn't.")))

#+end_src

** Language Server Protocol (lsp-mode)

Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company, flycheck and projectile.

❤ Community Driven
💎 Fully featured - supports all features in Language Server Protocol v3.14.
🚀 Fast - see performance section.
🌟 Flexible - choose between full-blown IDE with flashy UI or minimal distraction free.
⚙ Easy to configure - works out of the box and automatically upgrades if additional packages are present.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Language Server Protocol

  ;; (when (equal custom-ide 'custom-ide-lsp)
  ;;   (eval-when-compile (defvar lsp-enable-which-key-integration)))

  (use-package lsp-mode
    :when (equal custom-ide 'custom-ide-lsp)
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . mrf/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (if (featurep 'company)
      (bind-keys :map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common)))
    (mrf/define-rust-lsp-values)
    (lsp-enable-which-key-integration t))
  
#+end_src

*** LSP UI

This package contains all the higher level UI modules of lsp-mode, like flycheck support and code lenses. By default, lsp-mode automatically activates lsp-ui unless lsp-auto-configure is set to nil. You only have to put (use-package lsp-ui) in your config and the package will work out of the box.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package lsp-ui
    :when (equal custom-ide 'custom-ide-lsp)
    :after lsp
    :custom
    (lsp-ui-sideline-enable t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-delay 0.5)
    (lsp-ui-sideline-ignore-duplicates t)
    (lsp-ui-peek-always-show t)
    (lsp-ui-doc-delay 3)
    (lsp-ui-doc-position 'bottom)
    ;;(lsp-ui-doc-position 'top)
    (lsp-ui-doc-alignment 'frame)
    (lsp-ui-doc-header nil)
    (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-use-childframe t)
    :commands lsp-ui-mode
    :bind (:map lsp-ui-mode-map
            ("C-c l d" . lsp-ui-doc-focus-frame))
    :hook (lsp-mode . lsp-ui-mode))
  
#+end_src

*** LSP Treemacs integration

Integration between lsp-mode and treemacs and implementation of treeview controls using treemacs as a tree renderer.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; To enable bidirectional synchronization of lsp workspace folders and
  ;;; treemacs projects set lsp-treemacs-sync-mode to 1.

  (use-package lsp-treemacs
    :when (equal custom-ide 'custom-ide-lsp)
    :after lsp treemacs
    :bind (:map prog-mode-map
            ("C-c t" . treemacs))
    :config
    (lsp-treemacs-sync-mode 1))

  (use-package lsp-ivy
    :when (and (equal custom-ide 'custom-ide-lsp)
            (equal completion-handler 'comphand-ivy-counsel))
    :after lsp ivy)
#+end_src

*** LSP mode hook function

This function is called from the lsp-mode-hook when enering or leaving LSP mode.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; LSP mode setup hook

  (defun mrf/lsp-mode-setup ()
    "Custom LSP setup function."
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
    (when (equal custom-ide 'custom-ide-lsp)
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (setq lsp-clangd-binary-path "/usr/bin/clangd")'
      (lsp-headerline-breadcrumb-mode)))

#+end_src

*** LSP configuration for Rust

#+begin_src emacs-lisp

  (defun mrf/define-rust-lsp-values ()
    (setq-default lsp-rust-analyzer-cargo-watch-command "clippy")
    (setq-default lsp-eldoc-render-all t)
    (setq-default lsp-idle-delay 0.6)
    ;; enable / disable the hints as you prefer:
    (setq-default lsp-inlay-hint-enable t)
    ;; These are optional configurations. See
    ;; https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints
    ;; for a full list
    (setq-default lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (setq-default lsp-rust-analyzer-display-chaining-hints t)
    (setq-default lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (setq-default lsp-rust-analyzer-display-closure-return-type-hints t)
    (setq-default lsp-rust-analyzer-display-parameter-hints nil)
    (setq-default lsp-rust-analyzer-display-reborrow-hints nil))
  
#+end_src

** LSP Bridge
****  *Note:* This is a stand-alone package. This doesn't require eglot/lsp-mode/elpy, etc.

The goal of lsp-bridge is use multi-thread technology to implement the fastest LSP client in the Emacs ecosystem.

Advantages of lsp-bridge:

+ Blazingly fast: Offload LSP request and data analysis to an external process,  preventing Emacs from getting stuck due to delays or large data triggering  garbage collection.

+ Remote Completion: Built-in support for remote server code completion, with various login methods such as passwords and public keys, supports tramp protocol and jump server

+ Out of the box: Ready to use immediately after installation, no additional configuration required, no need to tweak with completion frontend, completion backend and multi-backend mix

+ Multi-server fusion: A simple JSON is all you need to combine multiple LSP Servers into one file that provides services for example Python which offers code completion with Pyright and diagnostic and formatting capabilities with Ruff

+ Flexible Customization: Customizing LSP server options is as simple as using a JSON file, allowing different projects to have different JSON configurations with just a few lines of rules

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package lsp-bridge
    :when (equal custom-ide 'custom-ide-lsp-bridge)
    :ensure ( :host github :repo "manateelazycat/lsp-bridge"
            :files (:defaults "*.el" "*.py" "acm" "core" "langserver"
                     "multiserver" "resources") :build (:not compile))
    :custom
    (lsp-bridge-python-lsp-server "pylsp")
    :config
    (global-lsp-bridge-mode))

#+end_src


#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  
  (use-package markdown-mode
    :when (equal custom-ide 'custom-ide-lsp-bridge))

#+end_src


** Anaconda-mode

Anaconda-mode provides Code navigation, documentation lookup and completion for Python.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package anaconda-mode
    :when (equal custom-ide 'custom-ide-anaconda)
    :bind (:map python-mode-map
          ("C-c g o" . anaconda-mode-find-definitions-other-frame)
          ("C-c g g" . anaconda-mode-find-definitions)
          ("C-c C-x" . next-error))
    :config
    (which-key-add-key-based-replacements "C-c g o" "find-defitions-other-window")
    (which-key-add-key-based-replacements "C-c g g" "find-defitions")
    (use-package pyvenv-auto)
    :hook
    (if (featurep 'company)
      (bind-keys :map anaconda-mode-map
        ("<tab>" . company-indent-or-complete-common)))
    (python-mode-hook . anaconda-eldoc-mode))

#+end_src

** ELPY
Elpy is an Emacs package to bring powerful Python editing to Emacs.  It combines and configures a number of other packages, both written in Emacs Lisp as well as Python.  Elpy is fully documented at [[https://elpy.readthedocs.io/en/latest/index.html][read the docs]].

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package elpy
    :when (equal custom-ide 'custom-ide-elpy)
    :after python which-key
    :custom
    (elpy-rpc-python-command "python3")
    (display-fill-column-indicator-mode 1)
    (highlight-indentation-mode nil)
    :bind (:map python-mode-map
          ("C-c g a" . elpy-goto-assignment)
          ("C-c g o" . elpy-goto-definition-other-window)
          ("C-c g g" . elpy-goto-definition)
          ("C-c g ?" . elpy-doc))
    :config
    (use-package jedi)
    (use-package flycheck
      :when (equal custom-ide 'custom-ide-elpy)
      :after elpy
      :defer t
      :diminish FlM
      ;;:ensure (:host github :repo "flycheck/flycheck")
      :hook (elpy-mode . flycheck-mode))        (which-key-add-key-based-replacements "C-c g a" "goto-assignment")
    (which-key-add-key-based-replacements "C-c g o" "find-defitions-other-window")
    (which-key-add-key-based-replacements "C-c g g" "find-defitions")
    (which-key-add-key-based-replacements "C-c g ?" "eldoc-definition")
    (if (featurep 'company)
      (bind-keys :map elpy-mode-map
        ("<tab>" . company-indent-or-complete-common)))
    (elpy-enable))

#+end_src



* Completion Systems
Here are a series of completion systems that are available for Emacs.

** Prescient

prescient.el is a library which sorts and filters lists of candidates, such as appear when you use a package like Ivy or Company. Extension packages such as ivy-prescient.el and company-prescient.el adapt the library for usage with various frameworks.

prescient.el also provides a completion style (prescient) for filtering candidates via Emacs's generic completion, such as in Icomplete, Vertico, and Corfu. These last two have extension packages to correctly set up filtering and sorting.

As compared to other packages which accomplish similar tasks, including IDO, Ivy, Helm, Smex, Flx, Historian, and Company-Statistics, prescient.el aims to be simpler, more predictable, and faster.

TL;DR prescient.el: simple but effective sorting and filtering for Emacs.

#+begin_src emacs-lisp

  (use-package prescient)
  
#+end_src

** Orderless

This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order. Each component can match in any one of several ways: literally, as a regexp, as an initialism, in the flex style, or as multiple word prefixes. By default, regexp and literal matches are enabled.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package orderless
    :when (or (equal completion-handler 'comphand-vertico)
            (equal completion-handler 'comphand-ivy-counsel))
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

** IVY Mode

<<<Ivy>>> is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Swiper and IVY mode

  (use-package ivy
    :when (equal completion-handler 'comphand-ivy-counsel)
    :bind (("C-s" . swiper)
            :map ivy-minibuffer-map
              ;;; ("TAB" . ivy-alt-done)
            ("C-l" . ivy-alt-done)
            ("C-j" . ivy-next-line)
            ("C-k" . ivy-previous-line)
            :map ivy-switch-buffer-map
            ("C-k" . ivy-previous-line)
            ("C-l" . ivy-done)
            ("C-d" . ivy-switch-buffer-kill)
            :map ivy-reverse-i-search-map
            ("C-k" . ivy-previous-line)
            ("C-d" . ivy-reverse-i-search-kill))
    :custom
    (enable-recursive-minibuffers t)
    (ivy-use-virtual-buffers t)
    :config
    (ivy-mode 1)
    (setq ivy-re-builders-alist '((t . orderless-ivy-re-builder)))
    (add-to-list 'ivy-highlight-functions-alist
      '(orderless-ivy-re-builder . orderless-ivy-highlight)))

#+end_src

*** Ivy-rich and ivy-yasnippet

Ivy-rich provides rich transformers for commands from ivy and counsel.
Ivy-yasnippet lets you preview yasnippet snippets with ivy.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package ivy-rich
    :when (equal completion-handler 'comphand-ivy-counsel)
    :after ivy
    :init
    (ivy-rich-mode 1)
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

  (use-package ivy-yasnippet
    :when (equal completion-handler 'comphand-ivy-counsel)
    :after (:any yasnippet ivy))
  ;; :ensure (:host github :repo "mkcms/ivy-yasnippet"))

#+end_src

*** Swiper
Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package swiper
    :when (equal completion-handler 'comphand-ivy-counsel)
    :after ivy)

#+end_src

*** Counsel

~ivy-mode~ ensures that any Emacs command using completing-read-function uses ivy for completion.
Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of Ivy. For example, ~counsel-find-file~ has some additional keybindings. Pressing =DEL= will move you to the parent directory.

#+begin_src emacs-lisp :results output silent
  ;;; --------------------------------------------------------------------------

  (use-package counsel
    :when (equal completion-handler 'comphand-ivy-counsel)
    :bind ( ("C-M-j" . 'counsel-switch-buffer)
            ("M-x" . 'counsel-M-x)
            ("M-g o" . 'counsel-outline)
            ("C-x C-f" . 'counsel-find-file)
            ("C-c C-r" . 'ivy-resume)
            :map minibuffer-local-map
            ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

*** Ivy Prescient
~prescient.el~ is a library which sorts and filters lists of candidates, such as appear when you use a package like =Ivy= or =Company=.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package ivy-prescient
    :when (equal completion-handler 'comphand-ivy-counsel)
    :after (ivy prescient)
    :custom
    (prescient-persist-mode t)
    (ivy-prescient-mode t)
    (ivy-prescient-enable-filtering t))

#+end_src

** Corfu

<<<Corfu>>> enhances in-buffer completion with a small completion popup. The current candidates are shown in a popup below or above the point. The candidates can be selected by moving up and down. Corfu is the minimalistic in-buffer completion counterpart of the Vertico minibuffer UI.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;;;; Code Completion
  (use-package corfu
    :when (equal completion-handler 'comphand-corfu)
    ;; Optional customizations
    :custom
    (corfu-cycle t)                  ; Allows cycling through candidates
    (corfu-auto t)                   ; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.8)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; insert previewed candidate
    (corfu-preselect 'prompt)
    (corfu-on-exact-match nil)       ; Don't auto expand tempel snippets
    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
          ("M-SPC"          . corfu-insert-separator)
          ("TAB"            . corfu-next)
          ([tab]            . corfu-next)
          ("S-TAB"          . corfu-previous)
          ([backtab]    . corfu-previous)
          ("S-<return>" . corfu-insert)
          ("RET"            . nil))
    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode) ; Popup completion info
    :config
    (add-hook 'eshell-mode-hook
      (lambda () (setq-local corfu-quit-at-boundary t
                 corfu-quit-no-match t
                 corfu-auto nil)
        (corfu-mode))))
  
#+end_src

*** Corfu-prescient

#+begin_src emacs-lisp

  (use-package corfu-prescient
    :when (equal completion-handler 'comphand-corfu)
    :after (corfu prescient))

#+end_src

** Vertico

<<<Vertico>>> provides a performant and minimalistic vertical completion UI based on the default completion system. The focus of Vertico is to provide a UI which behaves correctly under all circumstances. By reusing the built-in facilities system, Vertico achieves full compatibility with built-in Emacs completion commands and completion tables.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package vertico
    :when (equal completion-handler 'comphand-vertico)
    :demand t
    ;;:wait t
    ;;:ensure (:repo "minad/vertico" :files (:defaults "extensions/vertico-*.el") :fetcher github)
    :custom
    (recentf-mode t)
    (vertico-count 12)
    (vertico-cycle nil)
    (vertico-multiform-mode 1)
    :config
    (vertico-mode)
    ;; :bind ("C-x C-f" . ido-find-file)
    ;; Clean up file path when typing
    :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy)
          ;; Make sure vertico state is saved
          (minibuffer-setup . vertico-repeat-save)))
  
#+end_src

*** Marginalia

Marginalia are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the  minibuffer for your completion candidates. Marginalia can only add annotations  to the completion candidates. It cannot modify the appearance of the candidates  themselves, which are shown unaltered as supplied by the original command.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package marginalia
    ;; :when (equal completion-handler 'comphand-vertico)
    ;; :after vertico
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'left)
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :config
    (marginalia-mode t))
  
#+end_src

*** Icons for Marginalia

#+begin_src emacs-lisp

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))

#+end_src

*** Consult

Consult provides search and navigation commands based on the Emacs completion function completing-read. Completion allows you to quickly select an item from a list of candidates. Consult offers asynchronous and interactive consult-grep and  consult-ripgrep commands, and the line-based search command consult-line. Furthermore Consult provides an advanced buffer switching command consult-buffer to switch between buffers, recently opened files, bookmarks and buffer-like candidates from other sources. Some of the Consult commands are enhanced versions of built-in Emacs commands.

#+begin_src emacs-lisp

  (use-package consult
    :when (equal completion-handler 'comphand-vertico)
    :after vertico
    :bind
    ([remap switch-to-buffer] . consult-buffer)
    ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
    ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
    ([remap project-switch-to-buffer] . consult-project-buffer)
    ([remap bookmark-jump] . consult-bookmark)
    ([remap recentf-open] . consult-recent-file)
    ([remap yank] . nil)
    ([remap yank-pop] . consult-yank-pop)
    ([remap goto-line] . consult-goto-line)
    ("M-g m" . consult-mark)
    ("M-g M" . consult-global-mark)
    ("M-g o" . consult-outline)
    ("M-g i" . consult-imenu)
    ("M-g I" . consult-imenu-multi)
    ("M-s l" . consult-line)
    ("M-s p" . consult-preview)  
    ("M-s L" . consult-line-multi)
    ("M-s k" . consult-keep-lines)
    ("M-s u" . consult-focus-lines)
    ("M-s r" . consult-ripgrep)
    ("M-s f" . consult-find)
    ("M-s F" . consult-locate)
    ("M-g e" . consult-compile-error)
    ("M-g f" . consult-flymake)
    ([remap repeat-complex-command] . consult-complex-command)
    ("M-s e" . consult-isearch-history)
    ([remap isearch-edit-string] . consult-isearch-history)
    ([remap next-matching-history-element] . consult-history)
    ([remap previous-matching-history-element] . consult-history)
    ([remap Info-search] . consult-info)
    :custom
    (xref-show-xrefs-function 'consult-xref)
    (xref-show-definitions-function 'consult-xref)
    :config
    (setq consult-buffer-sources
      '(consult--source-hidden-buffer 
         consult--source-buffer
         (:name "Ephemeral" :state consult--buffer-state
         :narrow 109 :category buffer
         :items ("*Messages*"  "*scratch*" "*vterm*"
                  "*Async-native-compile-log*" "*dashboard*"))
         consult--source-modified-buffer
         consult--source-recent-file)))

#+end_src

*** Vertico support packages

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package vertico-prescient
    :when (equal completion-handler 'comphand-vertico)
    :after vertico prescient)
  
#+end_src

vertico-posframe is an vertico extension, which lets vertico use posframe to show its candidate menu.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package vertico-posframe
    :when (equal completion-handler 'comphand-vertico)
    :after vertico
    :custom
    (setq vertico-multiform-commands
      '((consult-line
          posframe
          (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
          (vertico-posframe-border-width . 10)
          ;; NOTE: This is useful when emacs is used in both in X and
          ;; terminal, for posframe do not work well in terminal, so
          ;; vertico-buffer-mode will be used as fallback at the
          ;; moment.
          (vertico-posframe-fallback-mode . vertico-buffer-mode))
         (t posframe)))
    (vertico-multiform-mode 1)
    (setq vertico-posframe-parameters
      '((left-fringe . 8)
         (right-fringe . 8))))
  
#+end_src

** Built-In (Ido)
Enable the IDO handler everywhere.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; This has to be evaluated at the end of the init since it's possible that the
  ;; completion-handler variable will not yet be defined at this point in the
  ;; init phase using elpaca.
  (add-hook 'elpaca-after-init-hook
    (lambda ()
      (when (equal completion-handler 'comphand-built-in)
        (ido-everywhere t))))

#+end_src

** Embark

Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers. Bind the command  embark-act to a key and it acts like prefix-key for a keymap of actions (commands) relevant to the target around point. With point on an URL in a buffer you can open the URL in a browser or eww or download the file it points to. If while switching buffers you spot an old one, you can kill it right there and continue to select another. Embark comes preconfigured with over a hundred actions for common types of targets such as files, buffers, identifiers, s-expressions, sentences; and it is easy to add more actions and more target types. Embark can also collect all the candidates in a minibuffer to an occur-like buffer or export them to a buffer in a major-mode specific to the type of candidates, such as dired for a set of files, ibuffer for a set of buffers, or customize for a set of variables.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package embark
    :when enable-embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
      ("C-;" . embark-dwim)        ;; good alternative: M-.
      ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
      '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
         nil
         (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :when (equal completion-handler 'comphand-vertico)
    :defer t
    ;;:ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src



* Software Development
** Language Support Packages
*** Flycheck

This is more support for a language rather than a langage itself

#+begin_src emacs-lisp
    ;;; --------------------------------------------------------------------------

  (use-package flycheck
    :unless (equal custom-ide 'custom-ide-elpy)
    :diminish FlM
    :defer t
    ;;:ensure (:host github :repo "flycheck/flycheck")
    :config
    (eval-after-load 'flycheck
      '(flycheck-package-setup))
    (global-flycheck-mode))

  (use-package flycheck-package
    :after flycheck)

#+end_src

*** Tree-sitter
Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:

- General enough to parse any programming language
- Fast enough to parse on every keystroke in a text editor
- Robust enough to provide useful results even in the presence of syntax errors
- Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application

**** Treesit-support functions

Some functions that are used during the initialization of tree-sitter.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/tree-sitter-setup ()
    (tree-sitter-hl-mode t))

  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  
#+end_src

**** The main Tree-sitter setup

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package tree-sitter
    :defer t
    :after (:any python python-mode lisp-mode)
    :config
    ;; Activate tree-sitter globally (minor mode registered on every buffer)
    (global-tree-sitter-mode)
    (cond
      ((equal custom-ide 'custom-ide-eglot)
        (add-hook 'go-mode-hook 'eglot-ensure))
      ((equal custom-ide 'custom-ide-lsp)
        (add-hook 'go-mode-hook 'lsp-deferred)))
    :hook
    (tree-sitter-after-on . mrf/tree-sitter-setup)
    (typescript-mode . lsp-deferred)
    ;; (c-mode . lsp-deferred)
    ;; (c++-mode . lsp-deferred)
    (before-save . lsp-go-install-save-hooks)
    (js2-mode . lsp-deferred))

  (use-package tree-sitter-langs
    :after tree-sitter)
#+end_src

**** Treesit-auto

If a tree-sitter grammer is available and installed, use it instead of the corresponding default mode.  Conversely, when a tree-sitter grammar is not available and a fallback major mode is available/specified, use it instead.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package treesit-auto
    :demand t
    :config
    (global-treesit-auto-mode))

#+end_src

*** Magit
[[https://magit.vc/][
Magit]] is the one of the best Git interface implementations .  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package transient :defer t)
  (use-package git-commit :after transient :defer t)
  (use-package magit :after git-commit :defer t)

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

  (use-package forge :after magit :defer t)
  (use-package treemacs-magit :defer t :after treemacs magit)

#+end_src

** Python :Python:

<<<Python>>> is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. It supports multiple programming paradigms beyond object-oriented programming, such as procedural and functional programming. Python combines remarkable power with very clear syntax. It has interfaces to many system calls and libraries, as well as to various window systems, and is extensible in C or C++. It is also usable as an extension language for applications that need a programmable interface. Finally, Python is portable: it runs on many Unix variants including Linux and macOS, and on Windows.

This is the Python setup for development under Emacs.

*** Important
Before any work can begin in python, make sure that the right packages are installed.

#+begin_src shell :results output silent

  pip3 install --upgrade pip
  pip3 install "python-lsp-server[all]"
  pip3 install debugpy

#+end_src

In addition to that, it is important that =autopep8=, which is a script, can reach python or python3. For my configuration, =autopep8= looks for python this like this:

: #!/Library/Frameworks/Python.framework/Versions/Current/bin/python3 :

*Note:* If this python path doesn't exist, you will see the very annoying

: file-missing "Doing vfork" "No such file or directory" :
message

*** Specialized python-mode Keymaps :Python:
The following are keymaps that are used by by the custom-ide and for python-mode

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/set-custom-ide-python-keymaps ()
    (cond
      ((equal custom-ide 'custom-ide-lsp)
        (bind-keys :map python-mode-map
          ("C-c g r" . lsp-find-references)
          ("C-c g o" . xref-find-definitions-other-window)
          ("C-c g g" . xref-find-definitions)
          ("C-c g ?" . eldoc-doc-buffer)))
      ((equal custom-ide 'custom-ide-eglot)
        (bind-keys :map python-mode-map
          ("C-c g r" . eglot-find-implementation)
          ("C-c g o" . xref-find-definitions-other-window)
          ("C-c g g" . xref-find-definitions)
          ("C-c g ?" . eldoc-doc-buffer)))
      ((equal custom-ide 'custom-ide-elpy)
        (elpy-enable)
        (bind-keys :map python-mode-map
          ("C-c g a" . elpy-goto-assignment)
          ("C-c g o" . elpy-goto-definition-other-window)
          ("C-c g g" . elpy-goto-definition)
          ("C-c g ?" . elpy-doc)))
      ((equal custom-ide 'custom-ide-lsp-bridge)
        (bind-keys :map python-mode-map
          ("C-c g a" . lsp-bridge-find-reference)
          ("C-c g o" . lsp-bridge-find-def-other-window)
          ("C-c g g" . lsp-bridge-find-def)
          ("C-c g i" . lsp-bridge-find-impl)
          ("C-c g r" . lsp-bridge-rename)
          ("C-c g ?" . lsp-bridge-popup-documentation)))
      ))

#+end_src

*** Standard setup
***** Python mode support functions

These functions are used during python intialization or file loading. This is where Python IDE functionality, linting and debugging setup begins.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/load-python-file-hook ()
    (python-mode)
    (when (equal custom-ide 'custom-ide-anaconda)
      (anaconda-mode 1))
    (message ">>> mrf/load-python-file-hook")
    (setq highlight-indentation-mode -1)
    (setq display-fill-column-indicator-mode t))

  (defun mrf/before-save ()
    "Force the check of the current python file being saved."
    (when (eq major-mode 'python-mode) ;; Python Only
      (flycheck-mode 0)
      (flycheck-mode t)
      (delete-trailing-whitespace)))

  ;; Enable DAP or DAPE, Eglot or LSP modes
  ;; This function should only be called ONCE during python-mode startup.
  (defun mrf/enable-python-features ()
    (message ">>> mrf/enable-python-features")
    ;; _____________________________
    ;; check for which debug adapter
    (cond
      ((equal debug-adapter 'debug-adapter-dap-mode)
        (unless (featurep 'dap-mode) (dap-mode)) ;; Load if not loaded.
        (define-dap-hydra))
      ((equal debug-adapter 'debug-adapter-dape)
        ;; dape should load as part of (use-package .... :after python)
        (message "dape should be auto-loading for Python.")))
    ;;___________________________
    ;; check for which custom-ide
    (cond
      ((equal custom-ide 'custom-ide-eglot)
        (eglot-ensure))
      ((equal custom-ide 'custom-ide-lsp)
        (lsp-deferred))))

  (defun mrf/python-mode-triggered ()
    ;; (eldoc-box-hover-at-point-mode t) ;; Using Mitch Key for this
    (mrf/enable-python-features)
    (mrf/set-custom-ide-python-keymaps)
    (unless (featurep 'yasnippet)
      (yas-global-mode t))
    (add-hook 'before-save-hook 'mrf/before-save)
    (set-fill-column 80))

#+end_src

***** Python mode initialization

This is the primary Python setup that is triggered by the first load of the Python mode and then any time a file is loaded.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (add-to-list 'auto-mode-alist '("\\.py\\'" . mrf/load-python-file-hook))

  (use-package python-mode
    :hook (python-mode . mrf/python-mode-triggered))

  (use-package blacken :after python) ;Format Python file upon save.

  (if (boundp 'python-shell-completion-native-disabled-interpreters)
    (add-to-list 'python-shell-completion-native-disabled-interpreters "python3")
    (setq python-shell-completion-native-disabled-interpreters '("python3")))

#+end_src

*** Auto-pep 8
autopep8 automatically formats Python code to conform to the `PEP 8` style guide.  It uses the pycodestyle_ utility to determine what parts of the code needs to be formatted.  autopep8 is capable of fixing most of the formatting issues_ that can be reported by pycodestyle. Refer to the [[IMPORTANT][IMPORTANT]] section above for possible issues when autopep8 is installed.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package py-autopep8
    :after python
    :hook (python-mode . py-autopep8-mode))

#+end_src

*** Python Keybinding
**** Helpful Macros
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; This is a helpful macro that is used to put double quotes around a word.
  (defalias 'quote-word
    (kmacro "\" M-d \" <left> C-y"))

  (defalias 'quote-region
    (kmacro "C-w \" \" <left> C-y <right>"))

  (eval-after-load "python"
    #'(bind-keys :map python-mode-map
        ("C-c C-q" . quote-region)
        ("C-c q"   . quote-word)
        ("C-c |"   . display-fill-column-indicator-mode)))

#+end_src

*** Python Virtual Environment Support
We use Pyvenv-auto is a package that automatically changes to the Python virtual environment based upon the project's directory.  pyvenv-auto looks at the root director of the project for a =.venv= or =venv= (and a few others)

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package pyvenv-auto
    :after python
    :hook (python-mode . pyvenv-auto-run))

#+end_src

*** Pydoc
#Pydoc, the Python documentation navigation package
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package pydoc
    ;;:ensure (:host github :repo "statmobile/pydoc")
    :after python
    :custom
    (pydoc-python-command "python3")
    (pydoc-pip-version-command "pip3 --version"))

#+end_src

** JavaScript
*** Typescript
This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-ts-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package typescript-mode
    :defer t
    :mode "\\.ts\\'"
    :hook
    (typescript-mode . lsp-deferred)
    (js2-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 4)
    (cond
      ((equal debug-adapter 'debug-adapter-dap-mode)
        (bind-keys :map typescript-mode-map
        ("C-c ." . dap-hydra/body))
        (dap-node-setup))
      ((equal debug-adapter 'debug-adapter-dape)
        (bind-keys :map typescript-mode-map
        ("C-c ." . dape-hydra/body)))))

#+end_src

*** NodeJS

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/load-js-file-hook ()
    (js2-mode)

    (when (equal debug-adapter 'debug-adapter-dap-mode)
      (dap-mode)
      (dap-firefox-setup))

    (when (equal debug-adapter 'debug-adapter-dape)
      (dape))

    (highlight-indentation-mode nil)
    (dap-firefox-setup))

  (use-package nodejs-repl :defer t)

  (defun mrf/nvm-which ()
    (let ((output (shell-command-to-string "source ~/.nvm/nvm.sh; nvm which")))
      (cadr (split-string output "[\n]+" t))))

  (setq nodejs-repl-command #'mrf/nvm-which)

#+end_src

*** JS2-Mode
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package js2-mode
    :hook (js-mode . js2-minor-mode)
    :bind (:map js2-mode-map
          ("{" . paredit-open-curly)
          ("}" . paredit-close-curly-and-newline))
    :mode ("\\.js\\'" "\\.mjs\\'" "\\.json$")
    :custom (js2-highlight-level 3))

  (use-package ac-js2
    :after js2-mode
    :hook (js2-mode . ac-js2-mode))

#+end_src

** C/C++
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/load-c-file-hook ()
    (c-mode)
    (unless (featurep 'realgud))
    (use-package realgud)
    (highlight-indentation-mode nil)
    (display-fill-column-indicator-mode t))

  (defun code-compile ()
    "Look for a Makefile and compiles the code with gcc/cpp."
    (interactive)
    (unless (file-exists-p "Makefile")
      (set (make-local-variable 'compile-command)
        (let ((file (file-name-nondirectory buffer-file-name)))
        (format "%s -o %s %s"
          (if  (equal (file-name-extension file) "cpp") "g++" "gcc" )
          (file-name-sans-extension file)
          file)))
      (compile compile-command)))

  (global-set-key [f9] 'code-compile)
  (add-to-list 'auto-mode-alist '("\\.c\\'" . mrf/load-c-file-hook))
#+end_src

*** GameBoy Development
RGBDS is a compiler that has been around quite a long time (since 1997). It supports Z80 and the LR35902 assembler syntaxes that are used in the development of Game Boy and Game Boy color games.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package z80-mode
    :when enable-gb-dev
    :ensure (:host github :repo "SuperDisk/z80-mode"))

  (use-package mwim
    :when enable-gb-dev
    :ensure (:host github :repo "alezost/mwim.el"))

  (use-package rgbds-mode
    :when enable-gb-dev
    :after mwim
    :ensure (:host github :repo "japanoise/rgbds-mode"))

#+end_src

** Rust

Rust is blazingly fast and memory-efficient: with no runtime or garbage collector, it can power performance-critical services, run on embedded devices, and easily integrate with other languages.

*** Rustic package configuration

#+begin_src emacs-lisp

  (use-package rustic
    :ensure t
    :bind (:map rustic-mode-map
            ("M-j" . lsp-ui-imenu)
            ("M-?" . lsp-find-references)
            ("C-c C-c l" . flycheck-list-errors)
            ("C-c C-c a" . lsp-execute-code-action)
            ("C-c C-c r" . lsp-rename)
            ("C-c C-c q" . lsp-workspace-restart)
            ("C-c C-c Q" . lsp-workspace-shutdown)
            ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))
  
#+end_src

*** Rust-mode configuration

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; (use-package graphql-mode)
  (use-package rust-mode
    :defer t
    :init (setq rust-mode-treesitter-derive t)
    :hook
    (rust-mode . lsp-deferred)
    (rust-mode . (lambda () (setq indent-tabs-mode nil)
                   (prettify-symbols-mode)))
    :config
    (setq rust-format-on-save t))

  (use-package rust-playground :ensure t :after rust-mode)
  (use-package toml-mode :ensure t :after rust-mode)

#+end_src

*** Cargo-mode configuration

#+begin_src emacs-lisp

  (use-package cargo-mode
    :defer t
    :after rust-mode
    :ensure (:fetcher github :repo "ayrat555/cargo-mode"
            :files ("*.el" "*.el.in" "dir" "*.info" "*.texi"
                     "*.texinfo" "doc/dir" "doc/*.info" "doc/*.texi"
                     "doc/*.texinfo" "lisp/*.el"
                     (:exclude ".dir-locals.el" "test.el" "tests.el"
                       "*-test.el" "*-tests.el" "LICENSE" "README*"
                       "*-pkg.el"))))

#+end_src

** Golang
**** Important!
Make sure that =gopls= and =dlv= are installed. gopls is the Go! (or golang)  language server - like LSP. =dlv= is the =golang= debugger.

#+begin_src shell

  brew install gopls
  go get golang.org/x/tools/cmd/guru
  brew install dlv

#+end_src


*** Main go-mode config

#+begin_src emacs-lisp
    ;;; --------------------------------------------------------------------------

  (defun eglot-format-buffer-on-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t))

  (use-package go-mode
    :defer t
    :mode ("\\.go\\'" . go-mode)
    :custom
    (compile-command "go build -v && go test -v && go vet")
    :bind (:map go-mode-map
  	  ("C-c C-c" . 'compile))
    :config
    (eglot-format-buffer-on-save)
    (define-key (current-local-map) "\C-c\C-c" 'compile)
    (cond
      ((equal custom-ide 'custom-ide-eglot)
        (add-hook 'go-mode-hook 'eglot-ensure)
        (add-hook 'go-mode-hook #'elot-format-buffer-on-save))
      ((equal custom-ide 'custom-ide-lsp)
        (add-hook 'go-mode-hook 'lsp-deferred))))
  
#+end_src

*** go-eldoc config

=go-eldoc.el= provides eldoc for Go language. `go-eldoc.el' shows type information
for variable, functions and current argument position of function.

#+begin_src emacs-lisp

  (use-package go-eldoc
    :after go-mode
    :hook (go-mode . go-eldoc-setup)
    :config
    (eglot-format-buffer-on-save)
    (set-face-attribute 'eldoc-highlight-function-argument nil
      :underline t :foreground "green"
      :weight 'bold))
  
#+end_src

*** go-guru config

Integration of the Go 'guru' analysis tool into Emacs.

#+begin_src emacs-lisp

  (use-package go-guru
    :after go-mode
    :hook (go-mode . go-guru-hl-identifier-mode))
  
#+end_src

** Other Languages
Lesser used or lesser known languages.

*** Lisp

Lisp support is handled by SLIME which is the “Superior Lisp Interaction Mode for Emacs”. SLIME extends Emacs with support for interactive programming in Common Lisp. The features are centered around slime-mode, an Emacs minor-mode that complements the standard lisp-mode. While lisp-mode supports editing Lisp source files, slime-mode adds support for interacting with a running Common Lisp process for compilation, debugging, documentation lookup, and so on. Extensive documentation can be found [[https://slime.common-lisp.dev/doc/html/][at this link]].

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package slime
    :defer t
    :mode ("\\.lisp\\'" . slime-mode)
    :config
    (setq inferior-lisp-program "/opt/homebrew/bin/sbcl"))

#+end_src

*** Swift / Swift Playground

#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------

  (use-package swift-mode
    :defer t
    :mode ("\\.swift\\'" . swift-mode))

  (use-package swift-helpful
    :ensure (:files ("*.el" "swift-info/*.info"
                      ("images" "swift-info/images/*.png") "swift-helpful-pkg.el")
              :host github
              :repo "danielmartin/swift-helpful"))

  (use-package swift-playground-mode :ensure t
    :init
    (autoload 'swift-playground-global-mode "swift-playground-mode" nil t)
    (add-hook 'swift-mode-hook #'swift-playground-global-mode))

#+end_src

** Debug Support
*** Debug Adapter Protocol for Emacs (<<<DAPE>>>)

Dape is a Debug Adapter Client written in pure Emacs. The debug adapter protocol, much like its more well-known counterpart, the language server protocol, aims to establish a common API for programming tools. However, instead of functionalities such as code completions, it provides a standardized interface for debuggers.

To begin a debugging session, invoke the dape command. In the minibuffer prompt, enter a debug adapter configuration name from dape-configs.

For complete functionality, make sure to enable eldoc-mode in your source buffers and repeat-mode for more pleasant key mappings.

**Features**

- Batteries included support (describe-variable dape-configs)
- Log breakpoints
- Conditional breakpoints
- Variable explorer
- Variable watch
- Variable hover with eldoc
- REPL
- gdb-mi.el like interface
- Memory editor with hexl
- Integration with compile
- Debug adapter configuration ergonomics
- No external dependencies outside of core Emacs

**** Example additional options

-----
*The following source blocks are meant as examples on what can be coded to enable certain features. They are normally NOT tangled.*

***** To not display info and/or buffers on startup:
#+begin_src emacs-lisp :tangle no
  (remove-hook 'dape-on-start-hooks 'dape-info)
  (remove-hook 'dape-on-start-hooks 'dape-repl)
#+end_src

***** To display info and/or repl buffers on stopped
#+begin_src emacs-lisp :tangle no
  (add-hook 'dape-on-stopped-hooks 'dape-info)
  (add-hook 'dape-on-stopped-hooks 'dape-repl)
#+end_src

***** By default dape uses gdb keybinding prefix If you do not want to use any prefix, set it to nil.
#+begin_src emacs-lisp :tangle no
  (setq dape-key-prefix "\C-x\C-a")
#+end_src

***** Kill compile buffer on build success:
#+begin_src emacs-lisp :tangle no
  (add-hook 'dape-compile-compile-hooks 'kill-buffer)
#+end_src

***** Save buffers on startup, useful for interpreted languages
#+begin_src emacs-lisp :tangle no
  (add-hook 'dape-on-start-hooks
    (defun dape--save-on-start ()
      (save-some-buffers t t)))
#+end_src
-----

**** DAPE Initialization

Please note that DAP is triggered after loading of various languages (for Emacs startup time).  New languages that use DAPE should also be listed. Don't put just ~prog-mode~ since we want to delay loading until needed be specific languages only.

#+begin_src emacs-lisp
  ;;; ------------------------------------------------------------------------

  (use-package dape
    :when (equal debug-adapter 'debug-adapter-dape)
    :init
    (define-dape-hydra)
    :after (:any python go-mode)
    ;; To use window configuration like gud (gdb-mi)
    ;; :init
    ;; (setq dape-buffer-window-arrangement 'gud)
    :custom
    (dape-buffer-window-arrangement 'right)  ;; Info buffers to the right
    :config
    (define-dape-hydra)
    (message "prepare-dape end")
    (bind-keys :map prog-mode-map
      ("C-c ." . dape-hydra/body))
    (mrf/additional-dape-configs))
  
#+end_src

**** DAPE for TypeScript

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (setq mrf/vscode-js-debug-dir (file-name-concat user-emacs-directory "dape/vscode-js-debug"))

  (defun mrf/install-vscode-js-debug ()
    "Run installation procedure to install JS debugging support"
    (interactive)
    (mkdir mrf/vscode-js-debug-dir t)
    (let ((default-directory (expand-file-name mrf/vscode-js-debug-dir)))

      (vc-git-clone "https://github.com/microsoft/vscode-js-debug.git" "." nil)
      (call-process "npm" nil "*snam-install*" t "install")
      (call-process "npx" nil "*snam-install*" t "gulp" "dapDebugServer")))

#+end_src

****** Run This Only Once!

This is meant to be evaluated and run once. Calling this function will clone the vscode-js-debug framework. This is a DAP-based JavaScript debugger. It debugs Node.js, Chrome, Edge, WebView2, VS Code extensions, and more. It has been the default JavaScript debugger in Visual Studio Code since 1.46, and is gradually rolling out in Visual Studio proper.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; (mrf/install-vscode-js-debug)

#+end_src

#+RESULTS:
: vscode-js-debug installed

**** Additional DAPE Configs
:Golang:
#+begin_src emacs-lisp
  ;;; ------------------------------------------------------------------------
  (defun mrf/additional-dape-configs ()
    "Additional DAPE configruations for various languages."

    (with-eval-after-load
      (add-to-list 'dape-configs
        `(delve
         modes (go-mode go-ts-mode)
         command "dlv"
         command-args ("dap" "--listen" "127.0.0.1:55878")
         command-cwd dape-cwd-fn
         host "127.0.0.1"
         port 55878
         :type "debug"  ;; needed to set the adapterID correctly as a string type
         :request "launch"
         :cwd dape-cwd-fn
         :program dape-cwd-fn))))

#+end_src

**** DAPE Hydra

Below are all the necessary functions and definitions for Hydra use under DAPE.

***** DAPE Hydra Debug Functions

#+begin_src emacs-lisp :output silent
  ;;; --------------------------------------------------------------------------

  (defun mrf/dape-end-debug-session ()
    "End the debug session."
    (interactive)
    (dape-quit))

  (defun mrf/dape-delete-all-debug-sessions ()
    "End the debug session and delete all breakpoints."
    (interactive)
    (dape-breakpoint-remove-all)
    (mrf/dape-end-debug-session))
  
#+end_src

***** DAPE Hydra Definition

#+begin_src emacs-lisp

  ;;; --------------------------------------------------------------------------

  (defun define-dape-hydra ()
    (defhydra dape-hydra (:color pink :hint nil :foreign-keys run)
      "
    ^Stepping^          ^Switch^                 ^Breakpoints^          ^Debug^                     ^Eval
    ^^^^^^^^----------------------------------------------------------------------------------------------------------------
    _._: Next           _st_: Thread             _bb_: Toggle           _dd_: Debug                 _ee_: Eval Expression
    _/_: Step in        _si_: Info               _bd_: Delete           _dw_: Watch dwim
    _,_: Step out       _sf_: Stack Frame        _ba_: Add              _dx_: end session
    _c_: Continue       _su_: Up stack frame     _bc_: Set condition    _dX_: end all sessions
    _r_: Restart frame  _sd_: Down stack frame   _bl_: Set log message  _dp_: Initialize DAPE
    _Q_: Disconnect     _sR_: Session Repl
                      _sU_: Info Update"
      ("n" dape-next)
      ("i" dape-step-in)
      ("o" dape-step-out)
      ("." dape-next)
      ("/" dape-step-in)
      ("," dape-step-out)
      ("c" dape-continue)
      ("r" dape-restart)
      ("si" dape-info)
      ("st" dape-select-thread)
      ("sf" dape-select-stack)
      ("su" dape-stack-select-up)
      ("sU" dape-info-update)
      ("sd" dape-stack-select-down)
      ("sR" dape-repl)
      ("bb" dape-breakpoint-toggle)
      ("ba" dape--breakpoint-place)
      ("bd" dape-breakpoint-remove-at-point)
      ("bc" dape-breakpoint-expression)
      ("bl" dape-breakpoint-log)
      ("dd" dape)
      ("dw" dape-watch-dwim)
      ("ee" dape-evaluate-expression)
      ("dx" mrf/dape-end-debug-session)
      ("dX" mrf/dape-delete-all-debug-sessions)
      ("dp" dape-prepare)
      ("x" nil "exit Hydra" :color yellow)
      ("q" mrf/dape-end-debug-session "quit" :color blue)
      ("Q" mrf/dape-delete-all-debug-sessions :color red)))
  
#+end_src

*** Debug Adapter Protocol (<<<DAP>>>)

DAP-Mode is an Emacs client/library for Debug Adapter Protocol is a wire protocol for communication between client and Debug Server. It's similar to the LSP but provides integration with debug server.

The idea behind the Debug Adapter Protocol (DAP) is to abstract the way how the debugging support of development tools communicates with debuggers or runtimes into a protocol. Since it is unrealistic to assume that existing debuggers or runtimes adopt this protocol any time soon, we rather assume that an intermediary component - a so called Debug Adapter - adapts an existing debugger or runtime to the Debug Adapter Protocol.

The Debug Adapter Protocol makes it possible to implement a generic debugger for a development tool that can communicate with different debuggers via Debug Adapters. And Debug Adapters can be re-used across multiple development tools which significantly reduces the effort to support a new debugger in different tools.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; Debug Adapter Protocol
  (use-package dap-mode
    :when (equal debug-adapter 'debug-adapter-dap-mode)
    :after hydra
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    :commands dap-debug
    :custom
    (dap-auto-configure-features '(sessions locals breakpoints expressions repl controls tooltip))
    :config
    (require 'dap-lldb)
    (require 'dap-gdb-lldb)
    (define-dap-hydra)
    (bind-keys :map prog-mode-map
      ("C-c ." . dap-hydra/body))
    (dap-ui-controls-mode)
    (dap-ui-mode 1))

#+end_src

**** DAP Package for Python :Python:

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;;; DAP for Python

  (use-package dap-python
    :ensure (:package "dap-python" :type git :host github :repo "emacs-lsp/dap-mode")
    :when (equal debug-adapter 'debug-adapter-dap-mode)
    :after dap-mode
    :config
    (setq dap-python-executable "python3") ;; Otherwise it looks for 'python' else error.
    (setq dap-python-debugger 'debugpy))
  
#+end_src

**** DAP Setup for Rust and Go :Rust:Go:

Something that is needed for Rust and Go debugging.

#+begin_src emacs-lisp

  (use-package dap-lldb
    :when (equal debug-adapter 'debug-adapter-dap-mode)
    :defer t
    :after dap-mode
    :ensure (:package "dap-lldb" :source nil :protocol https :inherit t :depth 1 :type git :host github :repo "emacs-lsp/dap-mode")
    :custom
    (dap-lldb-debug-program "~/Developer/command-line-unix/llvm/lldb-build/bin/lldb-dap")
    :config
    (dap-register-debug-template
      "Rust::LLDB Run Configuration"
      (list :type "lldb"
        :request "launch"
        :name "LLDB::Run"
        :gdbpath "rust-lldb"
        :target nil
        :cwd nil)))

  (use-package dap-gdb-lldb
    :when (equal debug-adapter 'debug-adapter-dap-mode)
    :ensure (:package "dap-gdb-lldb" :source nil :protocol https :inherit t :depth 1 :type git :host github :repo "emacs-lsp/dap-mode")
    :defer t
    :after dap-lldb
    :config
    (dap-gdb-lldb-setup))

  (use-package dap-cpptools
    :when (equal debug-adapter 'debug-adapter-dap-mode)
    :defer t
    :after dap-mode
    :ensure (:package "dap-cpptools" :source nil :protocol https :inherit t :depth 1 :type git :host github :repo "emacs-lsp/dap-mode"))
    ;; :config
    ;; (dap-cpptools-setup))

#+end_src

**** DAP Template for NodeJS
#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------
  ;;; DAP for NodeJS

  (defun mrf/setup-dap-node ()
    "Require dap-node feature and run dap-node-setup if VSCode module isn't already installed"
    (require 'dap-node)
    (unless (file-exists-p dap-node-debug-path) (dap-node-setup)))

  (use-package dap-node
    :when (equal debug-adapter 'debug-adapter-dap-mode)
    :disabled
    :hook ((typescript-mode . mrf/setup-dap-node)
          (js2-mode . mrf/setup-dap-node))
    ;;:ensure (:host github :repo "emacs-lsp/dap-mode" :files (:defaults "icons" "dap-mode-pkg.el"))
    :after dap-mode
    :config
    (require 'dap-firefox)
    (dap-register-debug-template
      "Launch index.ts"
      (list :type "node"
        :request "launch"
        :program "${workspaceFolder}/index.ts"
        :dap-compilation "npx tsc index.ts --outdir dist --sourceMap true"
        :outFiles (list "${workspaceFolder}/dist/**/*.js")
        :name "Launch index.ts")))

#+end_src

**** DAP Templates For Various Languages :Python:Rust:

#+begin_src emacs-lisp

  (with-eval-after-load 'dap-lldb
    (dap-register-debug-template
      "Rust::LLDB Run Configuration"
      (list :type "lldb"
        :request "launch"
        :name "LLDB::Run"
        :gdbpath "rust-lldb"
        :target nil
        :cwd nil)))

  (with-eval-after-load 'dap-python
    (dap-register-debug-template "Python :: Run file from project directory"
      (list :type "python"
        :args ""
        :cwd nil
        :module nil
        :program nil
        :request "launch"))
    (dap-register-debug-template "Python :: Run file (buffer)"
      (list :type "python"
        :args ""
        :cwd nil
        :module nil
        :program nil
        :request "launch"
        :name "Python :: Run file (buffer)")))
  
#+end_src

**** DAP Hydra

Below are all the necessary functions and definitions for Hydra use under DAP.

***** DAP Hydra Debug Functions :Python:
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/dap-end-debug-session ()
    "End the debug session and delete project Python buffers."
    (interactive)
    (kill-matching-buffers "\*Python :: Run file [from|\(buffer]*" nil :NO-ASK)
    (kill-matching-buffers "\*Python: Current File*" nil :NO-ASK)
    (kill-matching-buffers "\*dap-ui-*" nil :NO-ASK)
    (dap-disconnect (dap--cur-session)))

  (defun mrf/dap-delete-all-debug-sessions ()
    "End the debug session and delete project Python buffers and all breakpoints."
    (interactive)
    (dap-breakpoint-delete-all)
    (mrf/dap-end-debug-session))

  (defun mrf/dap-begin-debug-session ()
    "Begin a debug session with several dap windows enabled."
    (interactive)
    (dap-ui-show-many-windows)
    (dap-debug))

#+end_src

***** DAP Hydra Definition Function
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun define-dap-hydra ()
    (defhydra dap-hydra (:color pink :hint nil :foreign-keys run)
      "
    ^Stepping^            ^Switch^                 ^Breakpoints^          ^Debug^                     ^Eval
    ^^^^^^^^----------------------------------------------------------------------------------------------------------------
    _._: Next            _ss_: Session            _bb_: Toggle           _dd_: Debug                 _ee_: Eval
    _/_: Step in         _st_: Thread             _bd_: Delete           _dr_: Debug recent          _er_: Eval region
    _,_: Step out        _sf_: Stack frame        _ba_: Add              _dl_: Debug last            _es_: Eval thing at point
    _c_: Continue        _su_: Up stack frame     _bc_: Set condition    _de_: Edit debug template   _ea_: Add expression.
    _r_: Restart frame   _sd_: Down stack frame   _bh_: Set hit count    _ds_: Debug restart
    _Q_: Disconnect      _sl_: List locals        _bl_: Set log message  _dx_: end session
                         _sb_: List breakpoints                          _dX_: end all sessions
                         _sS_: List sessions
                         _sR_: Session Repl
  "
      ("n" dap-next)
      ("i" dap-step-in)
      ("o" dap-step-out)
      ("." dap-next)
      ("/" dap-step-in)
      ("," dap-step-out)
      ("c" dap-continue)
      ("r" dap-restart-frame)
      ("ss" dap-switch-session)
      ("st" dap-switch-thread)
      ("sf" dap-switch-stack-frame)
      ("su" dap-up-stack-frame)
      ("sd" dap-down-stack-frame)
      ("sl" dap-ui-locals)
      ("sb" dap-ui-breakpoints)
      ("sR" dap-ui-repl)
      ("sS" dap-ui-sessions)
      ("bb" dap-breakpoint-toggle)
      ("ba" dap-breakpoint-add)
      ("bd" dap-breakpoint-delete)
      ("bc" dap-breakpoint-condition)
      ("bh" dap-breakpoint-hit-condition)
      ("bl" dap-breakpoint-log-message)
      ("dd" dap-debug)
      ("dr" dap-debug-recent)
      ("ds" dap-debug-restart)
      ("dl" dap-debug-last)
      ("de" dap-debug-edit-template)
      ("ee" dap-eval)
      ("ea" dap-ui-expressions-add)
      ("er" dap-eval-region)
      ("es" dap-eval-thing-at-point)
      ("dx" mrf/dap-end-debug-session)
      ("dX" mrf/dap-delete-all-debug-sessions)
      ("x" nil "exit Hydra" :color yellow)
      ("q" mrf/dap-end-debug-session "quit" :color blue)
      ("Q" mrf/dap-delete-all-debug-sessions :color red)))

#+end_src

z


* Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; Don't use lsp-bridge with company as lsp-bridge already provides the same
  ;; features. They actually collide.
  
  (use-package company
    :unless (equal custom-ide 'custom-ide-lsp-bridge)
    :custom
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.2)
    :config
    (global-company-mode +1))

#+end_src


#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------

  ;; Don't use lsp-bridge with company as lsp-bridge already provides the same
  ;; features. They actually collide.

  (use-package company
    :unless (equal custom-ide 'custom-ide-lsp-bridge)
    :bind (:map company-active-map
            ("C-n". company-select-next)
            ("C-p". company-select-previous)
            ("M-<". company-select-first)
            ("M->". company-select-last)
            ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.5)
    :config
    (global-company-mode +1))

  ;; IMPORTANT:
  ;; Don't use company at all if lsp-bridge is active.
  ;; lsp-bridge already provides similar functionality.

  ;; :config
  ;; (add-to-list 'company-backends 'company-yasnippet))

#+end_src

** Company Packages :Python:
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package company-box
    :after company
    :diminish cb
    :hook (company-mode . company-box-mode))

  (use-package company-jedi
    :when  (equal custom-ide 'custom-ide-elpy)
    :after python company
    :config
    (jedi:setup)
    (defun my/company-jedi-python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'my/company-jedi-python-mode-hook))

  (use-package company-anaconda
    :when (equal custom-ide 'custom-ide-anaconda)
    :after anaconda company
    :hook (python-mode . anaconda-mode)
    :config
    (eval-after-load "company"
      '(add-to-list 'company-backends 'company-anaconda)))

#+end_src



* Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package projectile
    :when (equal custom-project-handler 'custom-project-projectile)
    :diminish Proj
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Developer")
      (setq projectile-project-search-path '("~/Developer")))
    (setq projectile-switch-project-action #'projectile-dired))

  (when (equal completion-handler 'comphand-ivy-counsel)
    (use-package counsel-projectile
      :when (equal custom-project-handler 'custom-project-projectile)
      :after projectile
      :config
      (setq projectile-completion-system 'ivy)
      (counsel-projectile-mode)))

#+end_src


* Project.el
This is the default built-in project system. For those not needing the full-featured ~projectile~, this package is generally enough.

#+begin_src emacs-lisp

  (defun project-find-go-module (dir)
    (when-let ((root (locate-dominating-file dir "go.mod")))
      (cons 'go-module root)))

  (use-package project
    :when (equal custom-project-handler 'custom-project-project)
    :ensure nil
    :defer t
    :config
    (cl-defmethod project-root ((project (head go-module)))
      (cdr project))
    (add-hook 'project-find-functions #'project-find-go-module))

#+end_src


* Terminals
** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package term+
    ;;:ensure (:repo "tarao/term-plus-el" :fetcher github)
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())          ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
  
#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package vterm
    ;;:ensure (:fetcher github :repo "akermu/emacs-libvterm")
    :commands vterm
    :config
    (setq vterm-environment ("PS1=\\u@\\h:\\w \n$"))
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    (setq vterm-shell "zsh")                        ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (defun mrf/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
    (setq eshell-history-size   10000
      eshell-buffer-maximum-lines 10000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :ensure
    :defer t
    :hook (eshell-first-time-mode . mrf/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    (eshell-git-prompt-use-theme 'powerline))

#+end_src


* File Management
** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

**** Key Bindings
**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;; Prefer g-prefixed coreutils version of standard utilities when available
  (let ((gls (executable-find "gls")))
    (when gls (setq insert-directory-program gls)))

  (use-package all-the-icons-dired
    :after dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                 ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :after dired-mode
    :hook (dired-mode . dired-hide-dotfiles-mode))

#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (26178 33358 905208 0) :use-package-secs (0 0 140 0)))

*** Single Window
Dired, by default, opens up multiple windows - one for each directory. It would be nice to be able to limit =dired= to use just a single window. [[https://codeberg.org/amano.kenji/dired-single][dired-single]] does just that. We configure =dired-single= to open up a directory while in dired with the =C-<return>=  key combination. This will then open up the directory in the buffer named =*dired*=. Whenever a directory is opened with the =C-<return>= key sequence, that directory will then replace what's currently in the =*dired*= buffer.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; Single Window dired - don't continually open new buffers

  (defun mrf/dired-single-keymap-init ()
    "Bunch of stuff to run for dired, either immediately or when it's
     loaded."
    (define-key dired-mode-map
      [remap dired-find-file] 'dired-single-buffer)
    (define-key dired-mode-map
      [remap dired-mouse-find-file-other-window] 'dired-single-buffer-mouse)
    (define-key dired-mode-map
      [remap dired-up-directory] 'dired-single-up-directory))

  (use-package dired-single
    :after dired
    :config
    (mrf/dired-single-keymap-init))
#+end_src


* Miscellaneous

The following packages are some additional quality of life features.

** IRC Client
#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------

  (add-hook 'rcirc-mode-hook #'rcirc-track-minor-mode)
  (add-hook 'rcirc-mode-hook #'rcirc-omit-mode)

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; helpful package

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (when (equal completion-handler 'comphand-ivy-counsel)
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable))
    :config
    (when (equal completion-handler 'comphand-ivy-counsel)
      (bind-keys
        ([remap describe-function] . counsel-describe-function)
        ([remap describe-variable] . counsel-describe-variable)))
    (bind-keys
      ([remap describe-command] . helpful-command)
      ([remap describe-key] . helpful-key)))

#+end_src

** Solair mode
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package solaire-mode
    :after treemacs
    :ensure (:package "solaire-mode" :source "MELPA"
           :repo "hlissner/emacs-solaire-mode" :fetcher github)
    :hook (elpaca-after-init . solaire-global-mode)
    :config
    (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
    (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist))

#+end_src

** Golden Ratio
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; Golen Ratio

  (use-package golden-ratio
    :when enable-golden-ratio
    :custom
    (golden-ratio-auto-scale t)
    (golden-ratio-adjust-factor .4)
    (golden-ratio-wide-adjust-factor .4)
    (golden-ratio-max-width 100)
    (golden-ratio-exclude-modes '(
                                 prog-mode
                                 dashboard-mode
                                 ;;inferior-emacs-lisp-mode
                                 ;;inferior-python-mode
                                 comint-mode
                                 ;;lisp-interaction-mode
                                 treemacs-mode
                                 undo-tree-visualizer-mode
                                 vundo-mode
                                 ))
    (golden-ratio-exclude-buffer-regexp '("dap*"
                                         "*dape*"
                                         "*python*"))
    :config
    (golden-ratio-mode 1))

#+end_src
** Swap Buffers

This file is for lazy people wanting to swap buffers without typing C-x b on each window.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  
  (use-package buffer-move
    :bind (("C-S-<up>"     . buf-move-up)
          ("C-S-<down>"  . buf-move-down)
          ("C-S-<left>"  . buf-move-left)
          ("C-S-<right>" . buf-move-right)))

#+end_src

** Neotree
A tree plugin like NerdTree for Vim

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package neotree
    :when enable-neotree
    :config
    (global-set-key [f8] 'neotree-toggle)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))

#+end_src

** Useful functions and Keybindings
Here are some helpful functions.

#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------
  ;; Functions to insert the buffer file name at the current cursor position
  ;;
  (defun mrf/insert-buffer-full-name-at-point ()
    (interactive)
    (insert buffer-file-name))

  (defun mrf/insert-buffer-name-at-point ()
    (interactive)
    (insert (file-name-nondirectory (buffer-file-name))))

#+end_src

** Centaur Tabs
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  ;; Enable tabs for each buffer

  (use-package centaur-tabs
    :when enable-centaur-tabs
    :custom
    ;; Set the style to rounded with icons (setq centaur-tabs-style "bar")
    (centaur-tabs-style "bar")
    (centaur-tabs-set-icons t)
    (centaur-tabs-set-modified-marker t)
    :bind (("C-c <" . centaur-tabs-backward)
          ("C-c >" . centaur-tabs-forward))
    :config ;; Enable centaur-tabs
    (centaur-tabs-mode t))

#+end_src

** Diff HL
=diff-hl-mode= highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package diff-hl
    :config
    (global-diff-hl-mode))

#+end_src

** Pulsar
#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (use-package pulsar
    :config
    (pulsar-global-mode)
    :custom
    (pulsar-pulse t)
    (pulsar-delay 0.10)
    (pulsar-iterations 10)
    (pulsar-face 'pulsar-magenta)
    (pulsar-highlight-face 'pulsar-yellow))

#+end_src
** Rainbow-mode

This minor mode sets background color to strings that match color names, e.g. #0000FF is displayed in white with a blue background.

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :hook (prog-mode . (lambda () (rainbow-mode t))))

#+end_src

** Lisp Hightlighter

highlight-defined is an Emacs minor mode that highlights defined Emacs Lisp symbols in source code.

#+begin_src emacs-lisp

  (use-package highlight-defined
    :hook (emacs-lisp-mode . highlight-defined-mode))

#+end_src

** Popper

Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm’s reach.

Designate any buffer to “popup” status, and it will stay out of your way. Disimss or summon it easily with one key. Cycle through all your “popups” or just the ones relevant to your current buffer. Group popups automatically so you’re presented with the most relevant ones. Useful for many things, including toggling display of REPLs, documentation, compilation or shell output: any buffer you need instant access to but want kept out of your way!

#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------

  (use-package popper
    :bind (("C-`"   . popper-toggle)
          ("M-`"   . popper-cycle)
          ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
      '("\\*Messages\\*"
         "\\*scratch\\*"
         "\\*ielm\\*"
         "Output\\*$"
         "\\*Async Shell Command\\*"
         "^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
         "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
         "^\\*term.*\\*$"   term-mode   ;term as a popup
         "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
         help-mode
         compilation-mode))
    :config
    (popper-mode +1)
    (popper-echo-mode +1))

#+end_src

** Markdown Mode

markdown-mode is a major mode for editing Markdown-formatted text. The latest stable version is markdown-mode 2.5, released on Feb 12, 2022. See the release notes for details. markdown-mode is free software, licensed under the GNU GPL, version 3 or later.

#+begin_src emacs-lisp :tangle no

  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))

#+end_src

** GRIP Mode

Instant Github-flavored Markdown/Org preview using Grip (GitHub Readme Instant Preview).

#+begin_src emacs-lisp :tangle no

  ;; Use keybindings
  (use-package grip-mode
    :ensure t
    :bind (:map markdown-mode-command-map
           ("g" . grip-mode)))

  ;; Or using hooks
  (use-package grip-mode
    :ensure t
    :hook ((markdown-mode org-mode) . grip-mode))
  
#+end_src

** Mitch's Minor Mode

Mitch's minor mode (or <<<mmm>>>) just defines frequently used hot-keys. It works well when =which-key= is active.

*** Mitch's Minor Mode Functions
#+begin_src emacs-lisp
  
  (defun mrf/set-fill-column-interactively (num)
    "Asks for the fill column."
    (interactive "nfill-column: ")
    (set-fill-column num))

  (defun mrf/set-org-fill-column-interactively (num)
    "Asks for the fill column for Org mode."
    (interactive "norg-fill-column: ")
    (setq custom-org-fill-column num)
    (mrf/org-mode-visual-fill)
    (redraw-display))

#+end_src

*** Mitch's Minor-Mode Standard Keymaps

This is a set of keymaps that do the same things as the popup menu. Both are here for convenience. *Note* that the ~mmm-menu~ is called with either a ="C-c RET RET"= or simply a ="C-c C-<return>"=.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------
  (defun mrf/define-mmm-minor-mode-map ()
    (defvar mmm-keys-minor-mode-map
      (let ((map (make-sparse-keymap)))
        (bind-keys :map map
  	("M-RET $" . jinx-correct)
          ("M-RET p" . pulsar-pulse-line)
          ("M-RET d" . dashboard-open)
          ("M-RET S e" . eshell)
          ("M-RET f" . mrf/set-fill-column-interactively)
          ("M-RET r" . repeat-mode)
          ("M-RET S i" . ielm)
          ("M-RET S v" . vterm-other-window)
          ("M-RET t" . treemacs)
          ("M-RET |" . global-display-fill-column-indicator-mode)
          ("M-RET T +" . next-theme)
          ("M-RET T -" . previous-theme)
          ("M-RET T ?" . which-theme)
          ("M-RET ?" . eldoc-box-help-at-point))
        map)
      "mmm-keys-minor-mode keymap.")

    (define-minor-mode mmm-keys-minor-mode
      "A minor mode so that my key settings override annoying major modes."
      :init-value t
      :lighter " mmm-keys"))

  (mrf/define-mmm-minor-mode-map)
  (mmm-keys-minor-mode 1)

#+end_src

*** MmM Context-Aware Keys and Descriptions

For those menus that would normally show up as either =prefix= or =lambda=, given them a better description via the which-key replacement function. This is run via the ~which-key-inhibit-display-hook~ hook which is run just before the which-key popup is
shown. Plus, some keys are mode specific and will only appear when that major mode is active.

#+begin_src emacs-lisp :results output silent

  (defun mrf/mmm-handle-context-keys ()
    "Enable or Disable keys based upon featurep context."
    (let ((map mmm-keys-minor-mode-map))
      (unbind-key "M-RET o f" map)
      (unbind-key "M-RET o l" map)
      (unbind-key "M-RET P ?" map)
      (unbind-key "M-RET M-RET" map)
      (cond
        ((equal major-mode 'org-mode)
        (bind-keys :map map
          ("M-RET M-RET" . org-insert-heading)
          ("M-RET o f" . mrf/set-org-fill-column-interactively)
          ("M-RET o l" . org-toggle-link-display)))
        ((equal major-mode 'python-mode)
        (bind-keys :map map
          ("M-RET P" . 'pydoc-at-point))))))

  (defun mrf/mmm-update-menu ()
    (interactive)
    (mrf/mmm-handle-context-keys)
    (which-key-add-key-based-replacements "M-RET S" "shells")
    (which-key-add-key-based-replacements "M-RET T" "theme-keys")
    (which-key-add-key-based-replacements "M-RET P" "python-menu")
    (which-key-add-key-based-replacements "M-RET o" "org-menu")
    (which-key-add-key-based-replacements "M-RET t" "treemacs-toggle")
    (which-key-add-key-based-replacements "M-RET f" "set-fill-column")
    (which-key-add-key-based-replacements "M-RET" "Mitch's Menu"))

  (add-hook 'which-key-inhibit-display-hook 'mrf/mmm-update-menu)

#+end_src

** Initial *scratch* buffer message

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  (add-hook 'elpaca-after-init-hook
    (lambda ()
      (switch-to-buffer "*scratch*") (end-of-buffer)))

  (add-hook 'lisp-interaction-mode-hook
    (lambda ()
      (setq-default initial-scratch-message
        (format
        ";; Hello, World and Happy hacking %s!\n%s\n\n" user-login-name
        ";; Press M-RET (Meta-RET) to open Mitch's Context Aware Menu"))))

  (if dashboard-landing-screen
    ;; (add-hook 'inferior-emacs-lisp-mode 'dashboard-open) ;; IELM open?
    (add-hook 'lisp-interaction-mode-hook 'dashboard-open))

#+end_src


** Exiting and Cleanup

#+begin_src emacs-lisp

  (defun mrf/cleanup-when-exiting ()
    (let ((backdir (format "%s/config-backup" working-files-directory)))
      (make-directory backdir t)
      ;; Backup init.el
      (copy-file
        (expand-file-name "init.el" emacs-config-directory)
        (expand-file-name "init.el" backdir) t)))
      ;; (copy-file
      ;;   (expand-file-name "emacs-config.org" emacs-config-directory)
      ;;   (expand-file-name "emacs-config.org" backdir) t)))

  (add-hook 'kill-emacs-hook #'mrf/cleanup-when-exiting)

#+end_src


* Lastly

** Ignore Line Number Mode
The following is a list of major mode-hooks variables that are set so that they don't follow the normal global line number mode. If there is any mode that doesn't appear here, more than likely it will have line numbers added. Just add the hook name here to make it so that major mode not have line numbers. This doesn't effect minor modes.

#+begin_src emacs-lisp :tangle no
  ;;; --------------------------------------------------------------------------
  ;; Ignore Line Numbers for the following modes:

  ;; Line #'s appear everywhere
  ;; ... except for when in these modes
  (dolist (mode '(dashboard-mode-hook
                   helpful-mode-hook
                   eshell-mode-hook
                   eww-mode-hook
                   help-mode-hook
                   org-mode-hook
                   shell-mode-hook
                   term-mode-hook
                   treemacs-mode-hook
                   vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq warning-suppress-types '((package reinitialization)
                                  (package-initialize)
                                  (package)
                                  (use-package)
                                  (python-mode)))
#+end_src

** Lispy Footer
The standard =lisp= footer that should appear at the end of every =lisp= source file.

#+begin_src emacs-lisp
  ;;; --------------------------------------------------------------------------

  ;;; init.el ends here.

#+end_src

# Local Variables:
# jinx-local-words: "Elpaca Flycheck Treesit el init"
# End:
